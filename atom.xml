<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  <subtitle>未来的你,一定会感谢现在奋斗的你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-14T13:41:50.429Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Cyb</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node.js</title>
    <link href="http://yoursite.com/2017/03/12/nodejs/"/>
    <id>http://yoursite.com/2017/03/12/nodejs/</id>
    <published>2017-03-12T11:18:10.000Z</published>
    <updated>2017-03-14T13:41:50.429Z</updated>
    
    <content type="html"><![CDATA[<p><em>记录Node.js的学习笔记</em><br><a id="more"></a></p>
<h1 id="创建Node-js应用"><a href="#创建Node-js应用" class="headerlink" title="创建Node.js应用"></a>创建Node.js应用</h1><h2 id="引入require模块"><a href="#引入require模块" class="headerlink" title="引入require模块"></a>引入require模块</h2><p>使用require指令来载入模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div></pre></td></tr></table></figure></p>
<h2 id="创建服务器"><a href="#创建服务器" class="headerlink" title="创建服务器"></a>创建服务器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="comment">// 发送 HTTP 头部</span></div><div class="line">	<span class="comment">// HTTP 状态值：200：OK</span></div><div class="line">	<span class="comment">// 内容类型：text/plain</span></div><div class="line">	response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">	</div><div class="line">	<span class="comment">// 发送数据</span></div><div class="line">	response.write(<span class="string">'Hello world!'</span>);</div><div class="line">	response.end();</div><div class="line">&#125;).listen(<span class="number">8000</span>);</div><div class="line"><span class="comment">// 终端打印如下信息</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at http://localhost:8000/'</span>);</div></pre></td></tr></table></figure>
<hr>
<h1 id="Node-js-回调函数"><a href="#Node-js-回调函数" class="headerlink" title="Node.js 回调函数"></a>Node.js 回调函数</h1><blockquote>
<p>Node.js异步编程的直接体现就是回调。</p>
</blockquote>
<p>异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。<br>回调函数在完成任务后就会被调用，<strong>Node</strong>使用了大量的回调函数，<strong>Node</strong>所有API都支持回调函数。<br>例如，我们可以一边读取文件，一边执行其它命令，在文件读取完成后，将内容作为回调函数的参数返回。<br>这样执行代码时就没有阻塞或等待I/O操作。这就大大提高了Node.js的性能，可以处理大量的并发要求。</p>
<h2 id="阻塞代码实例"><a href="#阻塞代码实例" class="headerlink" title="阻塞代码实例"></a>阻塞代码实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">'test.js'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'开始'</span>);</div><div class="line"><span class="built_in">console</span>.log(data.toString());</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'结束'</span>);</div></pre></td></tr></table></figure>
<h2 id="非阻塞代码实例"><a href="#非阻塞代码实例" class="headerlink" title="非阻塞代码实例"></a>非阻塞代码实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="comment">// 第一个参数为接受错误对象</span></div><div class="line">fs.readFile(<span class="string">'test.js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data2</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'开始'</span>);</div><div class="line">	<span class="built_in">console</span>.log(data2.toString());</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'结束'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<hr>
<h1 id="Node-js-事件循环"><a href="#Node-js-事件循环" class="headerlink" title="Node.js 事件循环"></a>Node.js 事件循环</h1><p>Node.js 是单进程单线程应用程序，但是通过事件和回调支持并发，所以性能非常高。<br>Node.js 的每一个 API 都是异步的，并作为一个独立线程运行，使用异步函数调用，并处理并发。<br>Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。<br>Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.</p>
<h2 id="事件驱动程序"><a href="#事件驱动程序" class="headerlink" title="事件驱动程序"></a>事件驱动程序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入 events 模块</span></div><div class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建 eventEmitter 对象</span></div><div class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</div><div class="line"></div><div class="line"><span class="comment">// 创建事件处理程序</span></div><div class="line"><span class="keyword">var</span> connectHandler = <span class="function"><span class="keyword">function</span> <span class="title">connected</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'连接成功。'</span>);</div><div class="line">	<span class="comment">// 触发 data_received 事件</span></div><div class="line">	eventEmitter.emit(<span class="string">'data_received'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 绑定 connection 事件处理程序</span></div><div class="line">eventEmitter.on(<span class="string">'connection'</span>,connectHandler);</div><div class="line"></div><div class="line"><span class="comment">// 使用匿名函数绑定 data_received 事件</span></div><div class="line">eventEmitter.on(<span class="string">'data_received'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'数据接受成功'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 触发 connection 事件</span></div><div class="line">eventEmitter.emit(<span class="string">'connection'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'程序执行完毕'</span>);</div></pre></td></tr></table></figure>
<h2 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a>EventEmitter</h2><p><strong>events</strong> 模块只提供了一个对象：events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。<br>你可以通过<strong>require(“events”);</strong>来访问该模块。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> eventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</div><div class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> eventEmitter();</div><div class="line">event.on(<span class="string">'some_event'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">arg1,arg2</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'some_event1 事件触发'</span>,arg1,arg2);</div><div class="line">&#125;);</div><div class="line">event.on(<span class="string">'some_event'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">arg1,arg2</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'some_event2 事件触发'</span>,arg1,arg2);</div><div class="line">&#125;);</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// 触发 some_event 事件</span></div><div class="line">	event.emit(<span class="string">'some_event'</span>,<span class="string">'参数1'</span>,<span class="string">'参数2'</span>);</div><div class="line">&#125;,<span class="number">1000</span>);</div></pre></td></tr></table></figure></p>
<p>以上例子，<strong>emitter</strong>为事件<strong>some_event</strong>注册了两个事件监听器，然后触发了<strong>some_event</strong>事件<br>EventEmitter的其中两个属性<strong>on</strong>和<strong>emit</strong>，<strong>on</strong>函数用于绑定事件函数，<strong>emit</strong>属性用于触发一个事件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</div><div class="line"></div><div class="line"><span class="comment">// 监听器 1</span></div><div class="line"><span class="keyword">var</span> listener1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'监听器1执行'</span>);</div><div class="line">&#125;;</div><div class="line"><span class="comment">//  监听器 2</span></div><div class="line"><span class="keyword">var</span> listener2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'监听器2执行'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 为指定事件添加一个监听器</span></div><div class="line">eventEmitter.addListener(<span class="string">'connection'</span>,listener1);</div><div class="line"><span class="comment">// 为指定事件注册一个监听器</span></div><div class="line">eventEmitter.on(<span class="string">'connection'</span>,listener2);</div><div class="line"></div><div class="line"><span class="comment">// 打印监听器的个数</span></div><div class="line"><span class="built_in">console</span>.log(events.EventEmitter.listenerCount(eventEmitter,<span class="string">'connection'</span>)+<span class="string">"个监听器在监听"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 触发connection事件</span></div><div class="line">eventEmitter.emit(<span class="string">'connection'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 移除监听器1</span></div><div class="line">eventEmitter.removeListener(<span class="string">'connection'</span>,listener1);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'监听器1不再监听'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 打印监听器的个数</span></div><div class="line"><span class="built_in">console</span>.log(events.EventEmitter.listenerCount(eventEmitter,<span class="string">'connection'</span>)+<span class="string">"个监听器在监听"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 触发connection事件</span></div><div class="line">eventEmitter.emit(<span class="string">'connection'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'程序执行完毕'</span>);</div></pre></td></tr></table></figure></p>
<p>执行结果如下所示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span>个监听器在监听</div><div class="line">监听器<span class="number">1</span>执行</div><div class="line">监听器<span class="number">2</span>执行</div><div class="line">监听器<span class="number">1</span>不再监听</div><div class="line"><span class="number">1</span>个监听器在监听</div><div class="line">监听器<span class="number">2</span>执行</div><div class="line">程序执行完毕</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="Node-js-Stream"><a href="#Node-js-Stream" class="headerlink" title="Node.js Stream"></a>Node.js Stream</h1><p>Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个 Stream，还有stdout（标准输出）。</p>
<p>Node.js Stream有四种流类型</p>
<ul><li><strong>Readable</strong> - 可读操作</li><li><strong>Writable</strong> - 可写操作</li><li><strong>Duplex</strong> - 可写可读操作</li><li><strong>Transform</strong> - 操作被写入数据，然后读出结果</li></ul>

<h2 id="从流中读取数据"><a href="#从流中读取数据" class="headerlink" title="从流中读取数据"></a>从流中读取数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> data = <span class="string">''</span>;</div><div class="line"></div><div class="line"><span class="comment">// 创建可读流</span></div><div class="line"><span class="keyword">var</span> readerStream = fs.createReadStream(<span class="string">'test.js'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 设置编码为utf8</span></div><div class="line">readerStream.setEncoding(<span class="string">'UTF8'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 处理流事件 --&gt; data,end,error</span></div><div class="line">readerStream.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">line</span>)</span>&#123;</div><div class="line">	data+  =line;</div><div class="line">&#125;);</div><div class="line">readerStream.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(data);</div><div class="line">&#125;);</div><div class="line">readerStream.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(err.stack);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'读取完毕'</span>);</div></pre></td></tr></table></figure>
<h2 id="写入流"><a href="#写入流" class="headerlink" title="写入流"></a>写入流</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> data = <span class="string">'我要写入'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 创建写入流</span></div><div class="line"><span class="keyword">var</span> writerStream = fs.createWriteStream(<span class="string">'test.js'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 设置编码为utf8</span></div><div class="line">writerStream.write(data,<span class="string">'utf8'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 标记文件末尾</span></div><div class="line">writerStream.end();</div><div class="line"></div><div class="line"><span class="comment">// 处理流事件</span></div><div class="line">writerStream.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'写入完成'</span>);</div><div class="line">&#125;);</div><div class="line">writerStream.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(err.stack);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'程序执行结束'</span>);</div></pre></td></tr></table></figure>
<h2 id="管道流"><a href="#管道流" class="headerlink" title="管道流"></a>管道流</h2><p>管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建一个可读流</span></div><div class="line"><span class="keyword">var</span> readerStream = fs.createReadStream(<span class="string">'hello.js'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建一个可写流</span></div><div class="line"><span class="keyword">var</span> writerStream = fs.createWriteStream(<span class="string">'test.js'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 管道读写操作</span></div><div class="line"><span class="comment">// 读取 hello.js 文件内容，并将内容写入到 test.js 文件中</span></div><div class="line">readerStream.pipe(writerStream);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行完毕"</span>);</div></pre></td></tr></table></figure></p>
<h2 id="链式流"><a href="#链式流" class="headerlink" title="链式流"></a>链式流</h2><p>链式是通过连接输出流到另外一个流并创建爱你多个流操作链的机制。链式流一般用于管道操作。<br>以下例子用管道和链式来压缩和解压文件。</p>
<h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 压缩 test.js 为 test.zip</span></div><div class="line">fs.createReadStream(<span class="string">'test.js'</span>)</div><div class="line">	.pipe(zlib.createGzip())</div><div class="line">	.pipe(fs.createWriteStream(<span class="string">'test.zip'</span>));</div><div class="line">	</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'文件压缩完成'</span>);</div></pre></td></tr></table></figure>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 压缩 test.zip 为 test.js</span></div><div class="line">fs.createReadStream(<span class="string">'test.zip'</span>)</div><div class="line">	.pipe(zlib.createGunzip())</div><div class="line">	.pipe(fs.createWriteStream(<span class="string">'test.js'</span>));</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'文件解压完成'</span>);</div></pre></td></tr></table></figure>
<hr>
<h1 id="Node-js-模块系统"><a href="#Node-js-模块系统" class="headerlink" title="Node.js 模块系统"></a>Node.js 模块系统</h1><p>为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。<br>模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。<br>换言之，一个 <strong>Node.js</strong> 文件就是一个模块，这个文件可能是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。</p>
<h2 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h2><p>创建test.js文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'我是test.js exports的函数'</span>);</div><div class="line">&#125;</div><div class="line">exports.world = fun;</div></pre></td></tr></table></figure></p>
<p>再创建hello.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> test = <span class="built_in">require</span>(<span class="string">'./test.js'</span>);</div><div class="line">test.world();</div></pre></td></tr></table></figure></p>
<p>运行结果如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">我是test.js exports的函数</div></pre></td></tr></table></figure></p>
<p><strong>test.js通过exports对象把world作为模块的访问接口，在hello.js中通过require(‘./test.js’)加载模块，然后就可以直接访问hello.js中exports对象的成员函数了。</strong></p>
<h2 id="模块加载"><a href="#模块加载" class="headerlink" title="模块加载"></a>模块加载</h2><p><img src="/uploads/nodejs_module.jpg" alt="Alt text">;</p>
<h3 id="从文件模块缓存中加载"><a href="#从文件模块缓存中加载" class="headerlink" title="从文件模块缓存中加载"></a>从文件模块缓存中加载</h3><p>尽管原生模块与文件模块的优先级不同，但是都不会优先于从文件模块的缓存中加载已经存在的模块。</p>
<h3 id="从原生模块加载"><a href="#从原生模块加载" class="headerlink" title="从原生模块加载"></a>从原生模块加载</h3><p>原生模块的优先级仅次于文件模块缓存的优先级。require方法在解析文件名之后，优先检查模块是否在原生模块列表中。以http模块为例，尽管在目录下存在一个http/http.js/http.node/http.json文件，require(“http”)都不会从这些文件中加载，而是从原生模块中加载。<br>原生模块也有一个缓存区，同样也是优先从缓存区加载。如果缓存区没有被加载过，则调用原生模块的加载方式进行加载和执行。</p>
<h3 id="从文件加载"><a href="#从文件加载" class="headerlink" title="从文件加载"></a>从文件加载</h3><p>当文件模块缓存中不存在，而且不是原生模块的时候，Node.js会解析require方法传入的参数，并从文件系统中加载实际的文件，加载过程中的包装和编译细节在前一节中已经介绍过，这里我们将详细描述查找文件模块的过程，其中，也有一些细节值得知晓。<br>require方法接受以下几种参数的传递：</p>
<ul><li>http、fs、path等，原生模块。</li><li>./mod或../mod，相对路径的文件模块。</li><li>/pathtomodule/mod，绝对路径的文件模块。</li><li>mod，非原生模块的文件模块。</li></ul>

<hr>
<h1 id="Node-js-路由"><a href="#Node-js-路由" class="headerlink" title="Node.js 路由"></a>Node.js 路由</h1><h2 id="server-js"><a href="#server-js" class="headerlink" title="server.js"></a>server.js</h2><blockquote>
<p>服务器</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">router</span>)</span>&#123;</div><div class="line">	http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">		router(pathname);</div><div class="line">		response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">		response.write(pathname);</div><div class="line">		response.end();</div><div class="line">	&#125;).listen(<span class="number">8000</span>);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Server is running at http://localhost:8000'</span>);</div><div class="line">&#125;</div><div class="line">exports.start = start;</div></pre></td></tr></table></figure>
<h2 id="router-js"><a href="#router-js" class="headerlink" title="router.js"></a>router.js</h2><blockquote>
<p>路由</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">router</span>(<span class="params">pathname</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(pathname+<span class="string">'已被接收   by router'</span>);</div><div class="line">&#125;</div><div class="line">exports.router=router;</div></pre></td></tr></table></figure>
<h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><blockquote>
<p>将路由函数注入服务器</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'./server.js'</span>);</div><div class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./router.js'</span>);</div><div class="line"></div><div class="line">server.start(router.router);</div></pre></td></tr></table></figure>
<hr>
<h1 id="Node-js-GET-POST请求"><a href="#Node-js-GET-POST请求" class="headerlink" title="Node.js GET/POST请求"></a>Node.js GET/POST请求</h1><p>表单提交到服务器一般使用GET/POST请求</p>
<h2 id="获取-GET-请求内容"><a href="#获取-GET-请求内容" class="headerlink" title="获取 GET 请求内容"></a>获取 GET 请求内容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">	response.write(util.inspect(url.parse(request.url,<span class="literal">true</span>)));</div><div class="line">	response.end();</div><div class="line">&#125;).listen(<span class="number">8000</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at http://localhost:8000'</span>);</div></pre></td></tr></table></figure>
<p>在浏览器访问<strong><a href="http://localhost:8000/user?haha=haha&amp;xixi=xixi" target="_blank" rel="external">http://localhost:8000/user?haha=haha&amp;xixi=xixi</a></strong><br>查看返回结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Url &#123;</div><div class="line">  <span class="attr">protocol</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">slashes</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">auth</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">host</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">port</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">hostname</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">hash</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">search</span>: <span class="string">'?haha=haha&amp;xixi=xixi'</span>,</div><div class="line">  <span class="attr">query</span>: &#123; <span class="attr">haha</span>: <span class="string">'haha'</span>, <span class="attr">xixi</span>: <span class="string">'xixi'</span> &#125;,</div><div class="line">  <span class="attr">pathname</span>: <span class="string">'/user'</span>,</div><div class="line">  <span class="attr">path</span>: <span class="string">'/user?haha=haha&amp;xixi=xixi'</span>,</div><div class="line">  <span class="attr">href</span>: <span class="string">'/user?haha=haha&amp;xixi=xixi'</span> &#125;</div></pre></td></tr></table></figure></p>
<h3 id="获取URL的参数"><a href="#获取URL的参数" class="headerlink" title="获取URL的参数"></a>获取URL的参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">	</div><div class="line">	<span class="comment">//解析 url 参数</span></div><div class="line">	<span class="keyword">var</span> params = url.parse(request.url,<span class="literal">true</span>.query);</div><div class="line">	response.write(<span class="string">'参数haha为：'</span>+params.haha);</div><div class="line">	response.write(<span class="string">'\n'</span>);</div><div class="line">	response.write(<span class="string">'参数xixi为：'</span>+params.xixi);</div><div class="line">	</div><div class="line">	response.end();</div><div class="line">&#125;).listen(<span class="number">8000</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at http://localhost:8000'</span>);</div></pre></td></tr></table></figure>
<p>在浏览器访问<strong><a href="http://localhost:8000/user?haha=哈哈&amp;xixi=嘻嘻" target="_blank" rel="external">http://localhost:8000/user?haha=哈哈&amp;xixi=嘻嘻</a></strong><br>查看返回结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">参数haha为：哈哈</div><div class="line">参数xixi为：嘻嘻</div></pre></td></tr></table></figure></p>
<h2 id="获取-POST-请求内容"><a href="#获取-POST-请求内容" class="headerlink" title="获取 POST 请求内容"></a>获取 POST 请求内容</h2><p>POST 请求的内容全部的都在请求体中，http.ServerRequest 并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时的工作。<br>比如上传文件，而很多时候我们可能并不需要理会请求体的内容，恶意的POST请求会大大消耗服务器的资源，所有node.js 默认是不会解析请求体的，当你需要的时候，需要手动来做。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> html = </div><div class="line">  <span class="string">'&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;'</span> +</div><div class="line">  <span class="string">'&lt;body&gt;'</span> +</div><div class="line">  <span class="string">'&lt;form method="post"&gt;'</span> +</div><div class="line">  <span class="string">'用户名： &lt;input name="username" type="text"&gt;&lt;br&gt;'</span> +</div><div class="line">  <span class="string">'密码： &lt;input name="password" type="password"&gt;&lt;br&gt;'</span> +</div><div class="line">  <span class="string">'&lt;input type="submit"&gt;'</span> +</div><div class="line">  <span class="string">'&lt;/form&gt;'</span> +</div><div class="line">  <span class="string">'&lt;/body&gt;&lt;/html&gt;'</span>;</div><div class="line">  </div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="comment">// 定义一个post变量，用于暂村请求体的信息</span></div><div class="line">	<span class="keyword">var</span> post=<span class="string">""</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 通过data事件监听函数，每当收到请求体的数据，就累加到post变量中</span></div><div class="line">	request.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">		post+=data;</div><div class="line">	&#125;);</div><div class="line">	</div><div class="line">	<span class="comment">// 在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回</span></div><div class="line">	request.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-type'</span>:<span class="string">'text-plain'</span>&#125;);</div><div class="line">		</div><div class="line">		<span class="comment">// 解析参数</span></div><div class="line">		post = querystring.parse(post);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(post.username &amp;&amp; post.password)&#123; <span class="comment">// 输出POST的数据</span></div><div class="line">			response.write(<span class="string">'用户名：'</span>+post.username);</div><div class="line">			response.write(<span class="string">'\n'</span>);</div><div class="line">			response.write(<span class="string">'密  码：'</span>+post.password);</div><div class="line">		&#125;<span class="keyword">else</span>&#123; <span class="comment">// 输出表单</span></div><div class="line">			response.write(html);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		response.end();</div><div class="line">	&#125;);</div><div class="line">&#125;).listen(<span class="number">8000</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at http://localhost:8000'</span>);</div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure>
<hr>
<h1 id="Node-js-Web-模块"><a href="#Node-js-Web-模块" class="headerlink" title="Node.js Web 模块"></a>Node.js Web 模块</h1><p>Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，Web服务器的基本功能就是提供Web信息浏览服务。<br>它只需支持HTTP协议、HTML文档格式及URL，与客户端的网络浏览器配合。</p>
<h2 id="创建-Web-服务器"><a href="#创建-Web-服务器" class="headerlink" title="创建 Web 服务器"></a>创建 Web 服务器</h2><p>Node.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div></pre></td></tr></table></figure></p>
<p>最基本的 HTTP 服务器架构（使用8080端口）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> pathname = url.parse(request.url).pathname.substr(<span class="number">1</span>);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'请求'</span>+pathname+<span class="string">"文件"</span>);</div><div class="line">	fs.readFile(pathname,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(err)&#123;</div><div class="line">			<span class="built_in">console</span>.log(err);</div><div class="line">			<span class="comment">// HTTP 状态码为 404 : NOT FOUND</span></div><div class="line">			response.writeHead(<span class="number">404</span>,&#123;<span class="string">'Content-type'</span>:<span class="string">'text/html'</span>&#125;);</div><div class="line">			response.write(<span class="string">'找不到资源'</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="comment">// HTTP 状态码为 200 : OK</span></div><div class="line">			response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-type'</span>:<span class="string">'text/html'</span>&#125;);</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">'请求'</span>+pathname+<span class="string">'成功'</span>);</div><div class="line">			</div><div class="line">			<span class="comment">// 响应文件内容</span></div><div class="line">			response.write(data);</div><div class="line">		&#125;</div><div class="line">		response.end();</div><div class="line">	&#125;);</div><div class="line">&#125;).listen(<span class="number">8080</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at http://localhost:8080'</span>);</div></pre></td></tr></table></figure></p>
<p>在该目录下新建 index.html 文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		这是index.html页面</div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在浏览器访问<strong><a href="http://localhost:8000/index.html" target="_blank" rel="external">http://localhost:8000/index.html</a></strong>就会显示 index.html 页面。</p>
<h2 id="创建-Web-客户端"><a href="#创建-Web-客户端" class="headerlink" title="创建 Web 客户端"></a>创建 Web 客户端</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> body = &#123;</div><div class="line">	<span class="attr">host</span>: <span class="string">'localhost'</span>,<span class="comment">// 一定不能加http</span></div><div class="line">	port: <span class="number">8080</span>,</div><div class="line">	<span class="attr">path</span>: <span class="string">'/index.html'</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> body = <span class="string">''</span>;</div><div class="line">	response.on( <span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">		body+= data;</div><div class="line">	&#125;);</div><div class="line">	response.on( <span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">// 数据接受完成</span></div><div class="line">		<span class="built_in">console</span>.log(body);</div><div class="line">	&#125;);</div><div class="line">&#125;;</div><div class="line">http.request(body, callback).end();</div></pre></td></tr></table></figure>
<hr>
<h1 id="Node-js-Express-框架"><a href="#Node-js-Express-框架" class="headerlink" title="Node.js Express 框架"></a>Node.js Express 框架</h1><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br>使用 Express 可以快速地搭建一个完整功能的网站。<br>Express 框架核心特性：</p>
<ul><li>可以设置中间件来响应 HTTP 请求</li><li>定义了路由表用于执行不同的 HTTP 请求动作</li><li>可以通过向模版传递参数来动态渲染 HTML 页面</li></ul>

<h2 id="安装Express"><a href="#安装Express" class="headerlink" title="安装Express"></a>安装Express</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install express -gd</div></pre></td></tr></table></figure>
<h2 id="第一个-Express-框架实例"><a href="#第一个-Express-框架实例" class="headerlink" title="第一个 Express 框架实例"></a>第一个 Express 框架实例</h2><p>引入 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	response.send(<span class="string">'Hello World!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8080</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">var</span> host = server.address().address;</div><div class="line">	<span class="keyword">var</span> port = server.address().port;</div><div class="line">	</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在浏览器中访问 <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a></p>
<h2 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h2><p>Express 应用使用回调函数的参数：request和response对象来处理请求和响应的数据。</p>
<h3 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h3><p>request对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性，常见属性有：</p>
<ol><li><strong>request.app</strong> - 当callback为外部文件时，用request.app访问express的实例</li><br><li><strong>request.baseUrl</strong> - 获取路由当前安装的URL路径</li><br><li><strong>request.body</strong> / req.cookies - 获得「请求主体」/ Cookies</li><br><li><strong>request.fresh / req.stale</strong> - 判断请求是否还「新鲜」</li><br><li><strong>request.hostname / req.ip</strong> - 获取主机名和IP地址</li><br><li><strong>request.originalUrl</strong> - 获取原始请求URL</li><br><li><strong>request.params</strong> - 获取路由的parameters</li><br><li><strong>request.path</strong> - 获取请求路径</li><br><li><strong>request.protocol</strong> - 获取协议类型</li><br><li><strong>request.query</strong> - 获取URL的查询参数串</li><br><li><strong>request.route</strong> - 获取当前匹配的路由</li><br><li><strong>request.subdomains</strong> - 获取子域名</li><br><li><strong>request.accepts()</strong> - 检查可接受的请求的文档类型</li><br><li><strong>request.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages</strong> - 返回指定字符集的第一个可接受字符编码</li><br><li><strong>request.get()</strong> - 获取指定的HTTP请求头</li><br><li><strong>request.is()</strong> - 判断请求头Content-Type的MIME类型</li><br></ol>

<h3 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h3><p>response对象表示 HTTP 响应，即在接受到请求时向客户端发送的 HTTP 相应数据。</p>
<ol><li><strong>response.app</strong> - 同req.app一样</li><br><li><strong>response.append()</strong> - 追加指定HTTP头</li><br><li><strong>response.set()</strong> - 在res.append()后将重置之前设置的头</li><br><li><strong>response.cookie(name，value [，option])</strong> - 设置Cookie</li><br><li><strong>opition</strong> - domain / expires / httpOnly / maxAge / path / secure / signed</li><br><li><strong>response.clearCookie()</strong> - 清除Cookie</li><br><li><strong>response.download()</strong> - 传送指定路径的文件</li><br><li><strong>response.get()</strong> - 返回指定的HTTP头</li><br><li><strong>response.json()</strong> - 传送JSON响应</li><br><li><strong>response.jsonp()</strong> - 传送JSONP响应</li><br><li><strong>response.location()</strong> - 只设置响应的Location HTTP头，不设置状态码或者close response</li><br><li><strong>response.redirect()</strong> - 设置响应的Location HTTP头，并且设置状态码302</li><br><li><strong>response.send()</strong> - 传送HTTP响应</li><br><li><strong>response.sendFile(path [，options] [，fn])</strong> - 传送指定路径的文件 -会自动根据文件extension设定Content-Type</li><br><li><strong>response.set()</strong> - 设置HTTP头，传入object可以一次设置多个头</li><br><li><strong>response.status()</strong> - 设置HTTP状态码</li><br><li><strong>response.type()</strong> - 设置Content-Type的MIME类型</li><br></ol>

<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>由决定了由谁(指定脚本)去响应客户端请求。<br>在HTTP请求中，可以通过路由提取出请求的URL以及GET/POST参数。</p>
<p>添加功能来处理更多类型的 HTTP 请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">// 主页输出'Hello world!'</span></div><div class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'主页 GET 请求'</span>);</div><div class="line">	response.send(<span class="string">'Hello GET!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.post(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'主页 POST 请求'</span>);</div><div class="line">	response.send(<span class="string">'Hello POST!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">'/del_user'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'/del_user 响应 DELETE 请求'</span>);</div><div class="line">	response.send(<span class="string">'删除页面'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">'/list_user'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">requset,response</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'/list_user GET 请求'</span>);</div><div class="line">	response.send(<span class="string">'用户列表页面'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">'/ab*cd'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'/ab*cd GET 请求'</span>);</div><div class="line">	response.send(<span class="string">'正则匹配'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> host = server.address().address;</div><div class="line">	<span class="keyword">var</span> port = server.address().port;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>Express 提供了内置的中间件 <strong>express.static</strong> 来设置静态文件如：图片，CSS，JavaScript等。</p>
<p>在目录下新建一个 img 文件夹，放上一张 test.jpg 图片<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">// 在 img 目录下查找</span></div><div class="line">app.use(express.static(<span class="string">'img'</span>));</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	response.send(<span class="string">'Hello world'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure></p>
<p>在浏览器访问<strong><a href="http://localhost:8000/img/test.jpg" target="_blank" rel="external">http://localhost:8000/img/test.jpg</a></strong></p>
<h2 id="GET-和-POST-方法"><a href="#GET-和-POST-方法" class="headerlink" title="GET 和 POST 方法"></a>GET 和 POST 方法</h2><h3 id="GET-方法"><a href="#GET-方法" class="headerlink" title="GET 方法"></a>GET 方法</h3><p>新建 index.html 文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/process_get"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></div><div class="line">		用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">		密  码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>新建 server.js 文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"> </div><div class="line">app.get(<span class="string">'/index.html'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">requset,response</span>)</span>&#123;</div><div class="line">   response.sendFile( __dirname + <span class="string">"/index.html"</span> );</div><div class="line">&#125;)</div><div class="line"> </div><div class="line">app.get(<span class="string">'/process_get'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">requset,response</span>)</span>&#123;</div><div class="line"> </div><div class="line">   <span class="comment">// 输出 JSON 格式</span></div><div class="line">   <span class="keyword">var</span> info = &#123;</div><div class="line">       <span class="attr">username</span>:requset.query.username,</div><div class="line">       <span class="attr">password</span>:requset.query.password</div><div class="line">   &#125;;</div><div class="line">   <span class="built_in">console</span>.log(info);</div><div class="line">   response.end(<span class="built_in">JSON</span>.stringify(info));</div><div class="line">&#125;)</div><div class="line">app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure></p>
<p>在浏览器访问<strong><a href="http://localhost:8000/index.html" target="_blank" rel="external">http://localhost:8000/index.html</a></strong></p>
<h3 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h3><p>新建 index.html 文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/process_post"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></div><div class="line">		用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">		密  码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>新建 server.js 文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建 application/x-www-form-urlencoded 编码解析</span></div><div class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">'/index.html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">requset,response</span>)</span>&#123;</div><div class="line">	response.sendFile(__dirname+<span class="string">"/index.html"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.post(<span class="string">'/process_post'</span>,urlencodedParser,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="comment">//输出 JSON 格式</span></div><div class="line">	<span class="keyword">var</span> info = &#123;</div><div class="line">		<span class="attr">username</span>:request.body.username,</div><div class="line">		<span class="attr">password</span>:request.body.password</div><div class="line">	&#125;;</div><div class="line">	<span class="built_in">console</span>.log(info);</div><div class="line">	response.end(<span class="built_in">JSON</span>.stringify(info));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure></p>
<p>在浏览器访问<strong><a href="http://localhost:8000/index.html" target="_blank" rel="external">http://localhost:8000/index.html</a></strong></p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>创建一个用于上传控件的表单，使用 POST 方法，表单 <strong>enctype</strong> 属性设置为 <strong>multipart/form-data</strong>。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	选择一个文件上传<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/file_upload"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"image"</span> <span class="attr">size</span>=<span class="string">"50"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>server.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</div><div class="line"></div><div class="line">app.use(express.static(<span class="string">'img'</span>));</div><div class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</div><div class="line">app.use(multer(&#123;<span class="attr">dest</span>:<span class="string">'/tmp/'</span>&#125;).array(<span class="string">'image'</span>));</div><div class="line"></div><div class="line">app.get(<span class="string">'/index.html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	response.sendFile(__dirname+<span class="string">'/index.html'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.post(<span class="string">'/file_upload'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="comment">// 上传的文件信息</span></div><div class="line">	<span class="built_in">console</span>.log(request.files[<span class="number">0</span>]);</div><div class="line">	<span class="keyword">var</span> path_file = __dirname+<span class="string">'/'</span>+request.files[<span class="number">0</span>].originalname;</div><div class="line">	fs.readFile(request.files[<span class="number">0</span>].path,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</div><div class="line">		fs.writeFile(path_file,data,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(err)&#123;</div><div class="line">				<span class="built_in">console</span>.log(err);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				info = &#123;</div><div class="line">					<span class="attr">message</span>:<span class="string">'File uploaded successfully !'</span>,</div><div class="line">					<span class="attr">filename</span>:request.files[<span class="number">0</span>].originalname</div><div class="line">				&#125;;</div><div class="line">				<span class="built_in">console</span>.log(info);</div><div class="line">				response.end(<span class="built_in">JSON</span>.stringify(info));</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line">app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure></p>
<h2 id="Cookie-管理"><a href="#Cookie-管理" class="headerlink" title="Cookie 管理"></a>Cookie 管理</h2><p>使用中间件向 Node.js 服务器发送 cookie 信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</div><div class="line"></div><div class="line">app.use(cookieParser());</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	response.send(<span class="string">'Cookies：'</span>+request.cookies);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure></p>
<hr>
<p><a href="http://www.runoob.com/nodejs/nodejs-restful-api.html" target="_blank" rel="external">http://www.runoob.com/nodejs/nodejs-restful-api.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;记录Node.js的学习笔记&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>面试知识点</title>
    <link href="http://yoursite.com/2017/03/12/interview/"/>
    <id>http://yoursite.com/2017/03/12/interview/</id>
    <published>2017-03-12T02:56:42.000Z</published>
    <updated>2017-03-12T14:33:34.015Z</updated>
    
    <content type="html"><![CDATA[<p><em>记录牛客网刷的面试题</em><br><a id="more"></a></p>
<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p>1.http是无状态的，<br>2.request头 response<br>3.状态码<br>304表示 如果客户端发送了一个带GET请求且该请求已被允许，而文档的内容并没有改变（自上次访问以来或者根据请求的条件），则服务器应当返回这个状态码。<br>307表示 临时重定向</p>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>HTTP协议（Hyper Text Transfer Protocol，超文本传输协议）,<br>是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。<br>HTTP基于TCP/IP通信协议来传递数据。HTTP基于客户端/服务端（C/S）架构模型，通过一个可靠的链接来交换信息，是一个<strong>无状态</strong>的请求/响应协议。</p>
<h2 id="2-特点"><a href="#2-特点" class="headerlink" title="2.特点"></a>2.特点</h2><p>（1）HTTP是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。<br>（2）HTTP是媒体独立的：只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。<br>（3）HTTP是无状态：无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p>
<h2 id="3-通信流程"><a href="#3-通信流程" class="headerlink" title="3.通信流程"></a>3.通信流程</h2><p><img src="/uploads/http.gif" alt="Alt text"></p>
<h2 id="4-消息结构"><a href="#4-消息结构" class="headerlink" title="4.消息结构"></a>4.消息结构</h2><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。一旦建立连接后，数据消息就通过类似Internet邮件所使用的格式[RFC5322]和多用途Internet邮件扩展（MIME）[RFC2045]来传送。</p>
<p>客户端请求消息：请求行、请求头部、空行和请求数据。（requset）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET /hello.txt HTTP/1.1          </div><div class="line">User-Agent: curl/7.16.3 libcurl/7.16.3          </div><div class="line">OpenSSL/0.9.7l zlib/1.2.3          </div><div class="line">Host: www.example.com Accept-Language: en, mi</div></pre></td></tr></table></figure>
<p>服务端响应消息：状态行、消息报头、空行和响应正文。（response）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK         </div><div class="line">Date: Mon, 27 Jul 2009 12:28:53 GMT         </div><div class="line">Server: Apache</div><div class="line">Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT         </div><div class="line">ETag: "34aa387-d-1568eb00"         </div><div class="line">Accept-Ranges: bytes         </div><div class="line">Content-Length: 51         </div><div class="line">Vary: Accept-Encoding         </div><div class="line">Content-Type: text/plain</div></pre></td></tr></table></figure>
<h2 id="5-请求方法"><a href="#5-请求方法" class="headerlink" title="5.请求方法"></a>5.请求方法</h2><p>GET 请求指定的页面信息，并返回实体主体。<br>HEAD    类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头<br>POST  向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。<br>PUT 从客户端向服务器传送的数据取代指定的文档的内容。<br>DELETE  请求服务器删除指定的页面。<br>CONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。<br>OPTIONS 允许客户端查看服务器的性能。<br>TRACE   回显服务器收到的请求，主要用于测试或诊断。</p>
<h2 id="6-状态码"><a href="#6-状态码" class="headerlink" title="6.状态码"></a>6.状态码</h2><p>HTTP状态码分类<br>1** 信息，服务器收到请求，需要请求者继续执行操作<br>2** 成功，操作被成功接收并处理<br>3** 重定向，需要进一步的操作以完成请求<br>4** 客户端错误，请求包含语法错误或无法完成请求<br>5** 服务器错误，服务器在处理请求的过程中发生了错<br>HTTP状态码列表<br>100 Continue    继续。客户端应继续其请求<br>101 Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议<br>200 OK  请求成功。一般用于GET与POST请求<br>201 Created 已创建。成功请求并创建了新的资源<br>202 Accepted    已接受。已经接受请求，但未处理完成<br>203 Non-Authoritative Information   非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本<br>204 No Content  无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档<br>205 Reset Content   重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域<br>206 Partial Content 部分内容。服务器成功处理了部分GET请求<br>300 Multiple Choices    多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择<br>301 Moved Permanently   永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替<br>302 Found   临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI<br>303 See Other   查看其它地址。与301类似。使用GET和POST请求查看<br>304 Not Modified    未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源<br>305 Use Proxy   使用代理。所请求的资源必须通过代理访问<br>306 Unused  已经被废弃的HTTP状态码<br>307 Temporary Redirect  临时重定向。与302类似。使用GET请求重定向<br>400 Bad Request 客户端请求的语法错误，服务器无法理解<br>401 Unauthorized    请求要求用户的身份认证<br>402 Payment Required    保留，将来使用<br>403 Forbidden   服务器理解请求客户端的请求，但是拒绝执行此请求<br>404 Not Found   服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面<br>405 Method Not Allowed  客户端请求中的方法被禁止<br>406 Not Acceptable  服务器无法根据客户端请求的内容特性完成请求<br>407 Proxy Authentication Required   请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权<br>408 Request Time-out    服务器等待客户端发送的请求时间过长，超时<br>409 Conflict    服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突<br>410 Gone    客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置<br>411 Length Required 服务器无法处理客户端发送的不带Content-Length的请求信息<br>412 Precondition Failed 客户端请求信息的先决条件错误<br>413 Request Entity Too Large    由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息<br>414 Request-URI Too Large   请求的URI过长（URI通常为网址），服务器无法处理<br>415 Unsupported Media Type  服务器无法处理请求附带的媒体格式<br>416 Requested range not satisfiable 客户端请求的范围无效<br>417 Expectation Failed  服务器无法满足Expect的请求头信息<br>500 Internal Server Error   服务器内部错误，无法完成请求<br>501 Not Implemented 服务器不支持请求的功能，无法完成请求<br>502 Bad Gateway 充当网关或代理的服务器，从远端服务器接收到了一个无效的请求<br>503 Service Unavailable 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中<br>504 Gateway Time-out    充当网关或代理的服务器，未及时从远端服务器获取请求<br>505 HTTP Version not supported  服务器不支持请求的HTTP协议的版本，无法完成处理</p>
<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="HTML5新增标签"><a href="#HTML5新增标签" class="headerlink" title="HTML5新增标签"></a>HTML5新增标签</h2><p>article: 标签定义外部的内容。<br>aside:标签定义 article 以外的内容。<br>audio:h5新增音频标签。没有高宽属性。<br>canvas:h5新增画布标签。<br>command: 定义命令按钮(未测试)<br>datalist：标签定义选项列表。<br>details：标签用于描述文档或文档某个部分的细节。<br>figure：标签用于对元素进行组合。<br>figcaption：定义 figure 元素的标题。<br>footer：定义 section 或 document 的页脚。<br>header：定义 section 或 document 的页眉。<br>hgroup：用于对网页或区段（section）的标题进行组合。<br>keygen:标签规定用于表单的密钥对生成器字段<br>mark：标签定义带有记号的文本。<br>meter：通过min=”0” max=”20”的方式定义度量衡。仅用于已知最大和最小值的度量。<br>nav：定义document或section或article的导航。<br>output：定义不同的输出类型，比如脚本。<br>progress：定义任何类型的任务的进度。<br>rp:定义若浏览器不支持 ruby 元素显示的内容<br>rt：定义 ruby 注释的解释<br>ruby：定义 ruby 注释<br>section：标签定义文档中的节、区段。比如章节、页眉、页脚或文档中的其他部分。<br>source:audio和video的属性之一。为audio和video定义媒介源。<br>summary:为details定义标题。<br>time:定义日期或时间。<br>video：h5新增视频标签。具有高宽属性。</p>
<h2 id="HTML5的表单元素"><a href="#HTML5的表单元素" class="headerlink" title="HTML5的表单元素"></a>HTML5的表单元素</h2><h3 id="HTML5新的表单元素"><a href="#HTML5新的表单元素" class="headerlink" title="HTML5新的表单元素"></a>HTML5新的表单元素</h3><p>datalist : 规定输入域的选项列表，<em>可以与input搭配使用</em>，input的list属性值与daatlist的id值保持一致。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/example/html5/demo_form.asp"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">			Webpage: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span> <span class="attr">list</span>=<span class="string">"url_list"</span> <span class="attr">name</span>=<span class="string">"link"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"url_list"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"W3School"</span> <span class="attr">value</span>=<span class="string">"http://www.w3school.com.cn"</span> /&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"Google"</span> <span class="attr">value</span>=<span class="string">"http://www.google.com"</span> /&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"Microsoft"</span> <span class="attr">value</span>=<span class="string">"http://www.microsoft.com"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>keygen : 提供一种验证用户的可靠方法。<br>keygen 元素是密钥对生成器（key-pair generator）。当提交表单时，会生成两个键，一个是私钥，一个公钥。<br>私钥（private key）存储于客户端，公钥（public key）则被发送到服务器。公钥可用于之后验证用户的客户端证书（client certificate）。<br>目前，浏览器对此元素的糟糕的支持度不足以使其成为一种有用的安全标准。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/example/html5/demo_form.asp"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">keygen</span> <span class="attr">name</span>=<span class="string">"security"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>output : 用于不同类型的输出，比如计算或脚本输出。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">			function resCalc()&#123;</div><div class="line">				numA=document.getElementById("num_a").value;</div><div class="line">				numB=document.getElementById("num_b").value;</div><div class="line">				document.getElementById("result").value=Number(numA)+Number(numB);</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>使用 output 元素的简易计算器：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">"return false"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"num_a"</span> /&gt;</span> +</div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"num_b"</span> /&gt;</span> =</div><div class="line">			<span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">"result"</span> <span class="attr">onforminput</span>=<span class="string">"resCalc()"</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="栅格系统原理（Bootstrap）"><a href="#栅格系统原理（Bootstrap）" class="headerlink" title="栅格系统原理（Bootstrap）"></a>栅格系统原理（Bootstrap）</h1><p>默认字体大小为14px</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">			*&#123;</div><div class="line">				margin:0;</div><div class="line">				padding:0;</div><div class="line">				box-sizing:border-box;</div><div class="line">			&#125;</div><div class="line">			html,body&#123;</div><div class="line">				width:100%;</div><div class="line">				height:100%;</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">			.container&#123;</div><div class="line">				width:704px;</div><div class="line">				padding:0 15px;</div><div class="line">				background:#eee;</div><div class="line">				margin:0 auto;</div><div class="line">			&#125;</div><div class="line">			.row&#123;</div><div class="line">				margin:0 -15px;</div><div class="line">				background:#ccc;</div><div class="line">			&#125;</div><div class="line">			.col&#123;</div><div class="line">				float:left;</div><div class="line">				width:10%;</div><div class="line">				height:50px;</div><div class="line">				background:#aaa;</div><div class="line">				margin:0 15px;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">javascript</span>&gt;</span><span class="undefined"></span></div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear:both;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;记录牛客网刷的面试题&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js学习之事件模型</title>
    <link href="http://yoursite.com/2017/03/10/js-dom/"/>
    <id>http://yoursite.com/2017/03/10/js-dom/</id>
    <published>2017-03-10T14:15:18.000Z</published>
    <updated>2017-03-11T06:56:58.105Z</updated>
    
    <content type="html"><![CDATA[<p><em>一直对JavaScript中的事件模型不是很清楚，特此记录学习笔记</em><br><a id="more"></a></p>
<hr>
<h1 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h1><p>Dom(文档对象模型)结构是一个树形结构，当一个HTML元素产生一个事件时，该事件会在元素节点与根节点之间按特定的顺序传播，路径所经过的节点都会收到该事件，这个传播过程称为DOM事件流。</p>
<p>事件顺序有两种类型：事件捕获和事件冒泡</p>
<h2 id="冒泡型事件（Event-Bubbling）"><a href="#冒泡型事件（Event-Bubbling）" class="headerlink" title="冒泡型事件（Event Bubbling）"></a>冒泡型事件（Event Bubbling）</h2><p>这是IE浏览器对事件模型的实现，也是最容易理解的。冒泡，顾名思义，事件像水中的气泡一样往上冒，直到顶端。<br>从DOM树形结构上理解，就是事件由具有从属关系的最确定的目标元素一直传递到最不确定的目标元素。<br>即从当前元素一层一层往外知道最顶层。</p>
<h2 id="捕获型事件（Event-Capturing）"><a href="#捕获型事件（Event-Capturing）" class="headerlink" title="捕获型事件（Event Capturing）"></a>捕获型事件（Event Capturing）</h2><p>与冒泡型刚好相反，由DOM树最顶层元素一直到最精确的元素。</p>
<h2 id="标准的事件转送模式"><a href="#标准的事件转送模式" class="headerlink" title="标准的事件转送模式"></a>标准的事件转送模式</h2><p>（1）.在事件捕捉（Capturing）阶段，事件将沿着DOM树向下转送，目标节点的每一个祖先节点，直至目标节点。例如，若用户单击了一个超链接，则该单击事件将从document节点转送到html元素，body元素以及包含该链接的p元素。<br>在此过程中，浏览器都会检测针对该事件的捕捉事件监听器，并且运行这件事件监听器。<br>(2). 在目标（target）阶段，浏览器在查找到已经指定给目标事件的事件监听器之后，就会运行 该事件监听器。目标节点就是触发事件的DOM节点。例如，如果用户单击一个超链接，那么该链接就是目标节点（此时的目标节点实际上是超链接内的文本节点）。<br>（3）.在冒泡（Bubbling）阶段，事件将沿着DOM树向上转送，再次逐个访问目标元素的祖先节点到document节点。该过程中的每一步。浏览器都将检测那些不是捕捉事件监听器的事件监听器，并执行它们。</p>
<blockquote>
<p>并非所有的事件都经过冒泡阶段<br>所有的事件都要经过捕捉阶段和目标阶段，但是有些事件会跳过冒泡阶段，例如让元素获得输入焦点的focus事件和失去输入焦点的blur事件都不会冒泡。</p>
</blockquote>
<hr>
<h1 id="事件句柄和事件监听器"><a href="#事件句柄和事件监听器" class="headerlink" title="事件句柄和事件监听器"></a>事件句柄和事件监听器</h1><h2 id="事件句柄"><a href="#事件句柄" class="headerlink" title="事件句柄"></a>事件句柄</h2><p>事件句柄（又称事件处理函数，DOM称之为事件监听函数），用于响应某个事件而调用的函数称为事件处理函数。<br>每一个事件对应一个句柄，响应点击事件的函数是onclick事件处理函数，可以分配在HTML和JavaScript中。</p>
<blockquote>
<p><strong>HTML</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"#"</span> onclick=<span class="string">"click"</span>&gt;click me!<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p><strong>JavaSript</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.getElementById(<span class="string">"mylink"</span>);</div><div class="line">link.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	dosomething();</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="事件监听器"><a href="#事件监听器" class="headerlink" title="事件监听器"></a>事件监听器</h2><p>现在大多数浏览器都内置了一些更高级的事件处理方式，即事件监听器，这种处理方式就不受一个元素只能绑定一个事件句柄的限制。<br>事件句柄和事件监听器最大的不同就是在使用事件句柄时一次只能插接一个事件句柄，但对于事件监听器，一次可以插接多个。</p>
<h3 id="IE下的事件监听器"><a href="#IE下的事件监听器" class="headerlink" title="IE下的事件监听器"></a>IE下的事件监听器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.attachEvent(<span class="string">"onevent"</span>,eventListener);</div></pre></td></tr></table></figure>
<p>在IE中想要给一个元素的事件附加事件处理函数，必须调用attachEvent方法才能创建一个事件监听器。attachEvent方法允许外界注册该元素多个事件监听器。<br>attachEvent方法接受两个参数，第一个参数是<em>事件类型名</em>（’on’开头），第二个参数是<em>回调处理函数</em>。<br><strong>注意：IE中用attachEvent注册的处理函数调用this指向不再是先前注册事件的元素，此时的this为window对象。</strong><br>用detachEvent方法即可移除，参数相同。</p>
<h3 id="DOM标准下的事件监听器"><a href="#DOM标准下的事件监听器" class="headerlink" title="DOM标准下的事件监听器"></a>DOM标准下的事件监听器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//标准语法</span></div><div class="line">element.addEventListener(<span class="string">'event'</span>,eventListener,useCapture);</div><div class="line"><span class="comment">//默认</span></div><div class="line">element.addEventListener(<span class="string">'event'</span>,eventListener,<span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>addEventListener方法接受三个参数，第一个参数是<em>事件类型名</em>（没’on’开头），第二个参数是<em>回调处理函数</em>，第三个参数<em>注明该处理函数在事件传递过程中是否调用捕获阶段</em>，通常设置为false（为false时是冒泡），如果设置为true，就创建爱你一个捕捉事件监听器。<br>用removeEventListener方法即可移除，参数必须完全相同（包括useCapture的值）。</p>
<h3 id="跨浏览器的注册与移除元素事件监听器"><a href="#跨浏览器的注册与移除元素事件监听器" class="headerlink" title="跨浏览器的注册与移除元素事件监听器"></a>跨浏览器的注册与移除元素事件监听器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Event = &#123;</div><div class="line">	<span class="comment">//注册</span></div><div class="line">	addHandler:<span class="function"><span class="keyword">function</span>(<span class="params">element,type,handle</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(element.addEventListener)&#123;</div><div class="line">			element.addEventListener(type,handle,<span class="literal">false</span>);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent)&#123;</div><div class="line">			element.attachEvent(<span class="string">"on"</span>+type,handle);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			element[<span class="string">"on"</span>+type] = handle;</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	<span class="comment">//移除</span></div><div class="line">	removeHandle:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(element.remoeEventListener)&#123;</div><div class="line">			element.removeEventListener(type,handle,<span class="literal">false</span>);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.detachEvent)&#123;</div><div class="line">			element.detachEvent(<span class="string">"on"</span>+type,handle);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			element[<span class="string">"on"</span>+type] = <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h1 id="事件对象引用"><a href="#事件对象引用" class="headerlink" title="事件对象引用"></a>事件对象引用</h1><p>为了可以更好地处理事件，可以根据所发生的事件的特定属性来采取不同的操作。<br>与事件模型类似，IE使用一个event的全局事件对象来处理对象（可以在全局变量window.event来访问），其它浏览器采用的W3C推荐的方式，使用独立的包含事件对象的参数传递。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventUtil=&#123;</div><div class="line">	<span class="attr">getEvent</span>:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> event?event:<span class="built_in">window</span>.event;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">getTarget</span>:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> event.target || event.srcElement;</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h1 id="停止事件冒泡和阻止事件的默认行为"><a href="#停止事件冒泡和阻止事件的默认行为" class="headerlink" title="停止事件冒泡和阻止事件的默认行为"></a>停止事件冒泡和阻止事件的默认行为</h1><p>停止事件冒泡和祖师事件的默认行为这两个概念非常重要吗，它们对复杂的应用程序处理非常有用。</p>
<h2 id="停止事件冒泡"><a href="#停止事件冒泡" class="headerlink" title="停止事件冒泡"></a>停止事件冒泡</h2><p>停止事件冒泡，指停止冒泡型事件的进一步传递。在冒泡型时间传递中，如果在body处理停止事件传递后，位于上层的document的事件监听器就不再收到通知，不再被处理。</p>
<h3 id="IE下的停止事件冒泡"><a href="#IE下的停止事件冒泡" class="headerlink" title="IE下的停止事件冒泡"></a>IE下的停止事件冒泡</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">someHandle</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>; <span class="comment">// 取消冒泡</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DOM标准下的停止事件冒泡"><a href="#DOM标准下的停止事件冒泡" class="headerlink" title="DOM标准下的停止事件冒泡"></a>DOM标准下的停止事件冒泡</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">someHandle</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">	event.stopPropagation();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="跨浏览器的停止事件冒泡"><a href="#跨浏览器的停止事件冒泡" class="headerlink" title="跨浏览器的停止事件冒泡"></a>跨浏览器的停止事件冒泡</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">someHandle</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">	event=event || <span class="built_in">window</span>.event;</div><div class="line">	<span class="keyword">if</span>(event.stopPropagation)&#123;</div><div class="line">		event.stopPropagation();</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		event.cancelBubble = <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="停止事件的默认行为"><a href="#停止事件的默认行为" class="headerlink" title="停止事件的默认行为"></a>停止事件的默认行为</h2><p>停止事件的默认行为，指通常浏览器在事件传递并处理完后会执行与该事件相关联的默认动作。<br>例如，表单中input type的属性是”submit”，点击后在事件传播完后，浏览器就自动提交表单。<br>又例如，input元素的keydown事件发生并树立后，浏览器默认会将用户键入的字符自动追加到input元素中。</p>
<h3 id="IE下的停止事件的默认行为"><a href="#IE下的停止事件的默认行为" class="headerlink" title="IE下的停止事件的默认行为"></a>IE下的停止事件的默认行为</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">someHandle</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DOM标准下的停止事件的默认行为"><a href="#DOM标准下的停止事件的默认行为" class="headerlink" title="DOM标准下的停止事件的默认行为"></a>DOM标准下的停止事件的默认行为</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">someHandle</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">	event.preventDefault();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="跨浏览器的停止时间的默认行为"><a href="#跨浏览器的停止时间的默认行为" class="headerlink" title="跨浏览器的停止时间的默认行为"></a>跨浏览器的停止时间的默认行为</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">someHandle</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">	event = event || <span class="built_in">window</span>.event;</div><div class="line">	<span class="keyword">if</span>(event.preventDefault)&#123;</div><div class="line">		event.preventDefault();</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		event.returnValue = <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="完整的事件处理兼容性函数"><a href="#完整的事件处理兼容性函数" class="headerlink" title="完整的事件处理兼容性函数"></a>完整的事件处理兼容性函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventUtil=&#123;</div><div class="line">	<span class="comment">//添加事件</span></div><div class="line">	addHandler:<span class="function"><span class="keyword">function</span>(<span class="params">element,type,handle</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(element.addEventListener)&#123;</div><div class="line">			element.addEventListener(type,handle.false);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent)&#123;</div><div class="line">			element.attachEvent(<span class="string">"on"</span>+type,handle);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			element[<span class="string">"on"</span>+type]=handle;</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	<span class="comment">//移除事件</span></div><div class="line">	removeHandler:<span class="function"><span class="keyword">function</span>(<span class="params">element,type,handle</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(element.removeEventListener)&#123;</div><div class="line">			element.removeEventListener(type,handle,<span class="literal">false</span>);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.detachEvent)&#123;</div><div class="line">			element.detachEvent(<span class="string">"on"</span>+type,handle);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			element[<span class="string">"on"</span>+type]=<span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	<span class="comment">//获取事件对象</span></div><div class="line">	getEvent:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> event?event:<span class="built_in">window</span>.event;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">getTarget</span>:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> event.target || event.srcElement;</div><div class="line">	&#125;,</div><div class="line">	<span class="comment">//停止冒泡</span></div><div class="line">	stopPropagation:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(event.stopPropagation)&#123;</div><div class="line">			event.stopPropagation();</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			event.cancelBubble=<span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	<span class="comment">//停止事件的默认行为</span></div><div class="line">	preventDefault:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(event.preventDefault)&#123;</div><div class="line">			event.preventDefault();</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			event.returnValue=<span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h1 id="捕获型事件模型与冒泡型事件模型的应用场合"><a href="#捕获型事件模型与冒泡型事件模型的应用场合" class="headerlink" title="捕获型事件模型与冒泡型事件模型的应用场合"></a>捕获型事件模型与冒泡型事件模型的应用场合</h1><h2 id="捕获型事件模型的应用场合"><a href="#捕获型事件模型的应用场合" class="headerlink" title="捕获型事件模型的应用场合"></a>捕获型事件模型的应用场合</h2><p>捕获型事件传递由最不精确的祖先元素一直到最精确的事件源元素，传递方式与操作系统中的全局快捷键与应用程序快捷键相似。<br>当一个系统组合键发生时，如果注册了系统全局快捷键监听器，该事件就先被操作系统层捕获，全局监听器就先于应用程序快捷键监听器得到通知，也就是全局的先获得控制权，它有权阻止事件的进一步传递。<br>所以捕获型事件模型适用于作<strong>全局范围</strong>内的监听，这里的全局是相对的全局，相对于某个顶层结点与该结点所有子孙结点形成的集合范围。<br>例如你想作全局的点击事件监听，相对于document结点与document下所有的子结点，在某个条件下要求所有的子结点点击无效，这种情况下冒泡模型就解决不了了，而捕获型却非常适合，可以在最顶层结点添加捕获型事件监听器。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">globalClickListener</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(canEventPass == <span class="literal">false</span>)&#123;</div><div class="line">		<span class="comment">//取消事件的进一步向子节点传递和冒泡传递</span></div><div class="line">		event.stopPropagation();</div><div class="line">		<span class="comment">//取消浏览器事件后的默认行为</span></div><div class="line">		event.preventDefault();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="冒泡型事件模型的应用场合"><a href="#冒泡型事件模型的应用场合" class="headerlink" title="冒泡型事件模型的应用场合"></a>冒泡型事件模型的应用场合</h2><p>在元素一些频繁触发的事件中，如onmousemove,onmouseover,onmouseout,如果明确事件处理后没必要进一步传递，那么就可以大胆的取消它。<br>此外，对于子结点事件监听器的处理会对父层监听器处理造成负面影响的，也应该在子结点监听器中禁止事件进一步向上传递以消除影响。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onclick</span>=<span class="string">"alert('current is body');"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div0"</span> <span class="attr">onclick</span>=<span class="string">"alert('current is '+this.id)"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">onclick</span>=<span class="string">"alert('current is '+this.id)"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span> <span class="attr">onclick</span>=<span class="string">"alert('current is '+this.id)"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"event_source"</span> <span class="attr">onclick</span>=<span class="string">"alert('current is '+this.id)"</span> <span class="attr">style</span>=<span class="string">"height:200px;width:200px;background-color:red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>点击event_source时无论是DOM标准还是IE，直接写在HTML里的监听处理函数是事件冒泡传递时调用的，由最里层一直往上传递，先后出现<br>current is event_source<br>current is div2<br>current is div1<br>current is div0<br>current is body</p>
<p>添加以下片段<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> div2 = <span class="built_in">document</span>.getElementById(<span class="string">"div2"</span>);</div><div class="line">EventUtil.addHandler(div2,<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">	event=EventUtil.getEvent();</div><div class="line">	EventUtil.stopPropagation(event);</div><div class="line">&#125;,<span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p>点击出现<br>current is event_source<br>current is div2</p>
<p>在支持DOM标准的浏览器中，添加以下代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	event.stopPropagation();</div><div class="line">&#125;,<span class="literal">true</span>);<span class="comment">//在捕获型传递调用</span></div></pre></td></tr></table></figure></p>
<p>以上代码中的监听函数由于是捕获型传递时被调用的,所以点击event_source后,虽然事件源是id为event_source的元素,但捕获型选传递,从最顶层开始,body节点监听函数先被调用,并且取消了事件进一步向下传递,所以只会出现current is body 。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;一直对JavaScript中的事件模型不是很清楚，特此记录学习笔记&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js学习之(原型)继承</title>
    <link href="http://yoursite.com/2017/02/21/entend/"/>
    <id>http://yoursite.com/2017/02/21/entend/</id>
    <published>2017-02-21T13:11:35.000Z</published>
    <updated>2017-02-22T08:45:42.308Z</updated>
    
    <content type="html"><![CDATA[<p>参考《你不知道的JavaScript》<a id="more"></a><br>继承意味着复制操作，JavaScript(默认)不会复制对象属性。<br>JavaScript会在两个对象之间创建一个关联，这样一个对象就可以通过委托访问另一个对象的属性和函数。<br>函数不是构造函数，但是当且仅当使用 new 时，函数调用会变成“构造函数调用”。</p>
<p>创建一个关联对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">//ES6之前</span></div><div class="line">Bar.prototype = <span class="built_in">Object</span>.create(Foo.prototype);</div><div class="line"></div><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="built_in">Object</span>.setPrototypeOf(Bar.prototype,Foo.prototype);</div></pre></td></tr></table></figure></p>
<p>Object.create()会创建一个新对象(这里指Bar.prototype)并把新对象内部的[[Prototype]]关联到指定的对象中(这里指Foo)。</p>
<hr>
<p>[[Prototype]]机制就是存在于对象中的一个内部链接，它会引用其它对象。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考《你不知道的JavaScript》
    
    </summary>
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js学习之对象</title>
    <link href="http://yoursite.com/2017/02/20/object/"/>
    <id>http://yoursite.com/2017/02/20/object/</id>
    <published>2017-02-20T14:21:49.000Z</published>
    <updated>2017-02-21T14:52:03.814Z</updated>
    
    <content type="html"><![CDATA[<p>参考《你不知道的JavaScript》<a id="more"></a></p>
<h1 id="对象的定义"><a href="#对象的定义" class="headerlink" title="对象的定义"></a>对象的定义</h1><hr>
<h2 id="声明形式"><a href="#声明形式" class="headerlink" title="声明形式"></a>声明形式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">	<span class="attr">key1</span>:value1,</div><div class="line">	<span class="attr">key2</span>:value2</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h2 id="构造形式"><a href="#构造形式" class="headerlink" title="构造形式"></a>构造形式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">obj.key=value;</div></pre></td></tr></table></figure>
<hr>
<h1 id="对象的类型"><a href="#对象的类型" class="headerlink" title="对象的类型"></a>对象的类型</h1><hr>
<h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>对象是JavaScript的基础，在JavaScrpit中一共有六种主要类型。</p>
<ul>
<li><strong>string</strong></li>
<li><strong>boolean</strong></li>
<li><strong>number</strong></li>
<li><strong>null</strong></li>
<li><strong>undefined</strong></li>
<li><strong>object</strong></li>
</ul>
<hr>
<h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>一些基本类型对象的子类型，通常被成为内置对象。</p>
<ul>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
<li>Object</li>
<li>Function</li>
<li>Array</li>
<li>Date</li>
<li>RegExp</li>
<li>Error<br>!!!在JavaScript中，它们只是一些内置函数，而不是类似于Java当中的类。!!!<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str1 = <span class="string">"I am a string"</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str1); <span class="comment">// string</span></div><div class="line"><span class="built_in">console</span>.log(str1 <span class="keyword">instanceof</span> <span class="built_in">String</span>); <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"I am a String"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str2); <span class="comment">// object</span></div><div class="line"><span class="built_in">console</span>.log(str2 <span class="keyword">instanceof</span> <span class="built_in">String</span>); <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">//检查str2对象</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(str2); <span class="comment">// [Object String]</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h1 id="对象的内容"><a href="#对象的内容" class="headerlink" title="对象的内容"></a>对象的内容</h1><hr>
<h2 id="访问对象的值"><a href="#访问对象的值" class="headerlink" title="访问对象的值"></a>访问对象的值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj&#123;</div><div class="line">	<span class="attr">a</span> : <span class="number">2</span></div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(obj[<span class="string">"a"</span>]); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p>访问对象的值，需要使用 .操作符和[]操作符。<br>.语法通常被成为属性访问，[]语法通常被成为键访问。</p>
<hr>
<h2 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h2><p>ECMAScript5中定义了一个叫”属性描述符”的对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj=&#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>&#123;</div><div class="line">	<span class="attr">value</span>:<span class="number">2</span>, <span class="comment">// 值</span></div><div class="line">	writable:<span class="literal">true</span>, <span class="comment">// 是否可写</span></div><div class="line">	configurable:<span class="literal">true</span>, <span class="comment">// 是否可配置</span></div><div class="line">	enumerable:<span class="literal">true</span>, <span class="comment">// 是否可枚举</span></div><div class="line">	setter:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;, <span class="comment">// 设置值</span></div><div class="line">	getter:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">// 获取值</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="Writable"><a href="#Writable" class="headerlink" title="Writable"></a>Writable</h3><p>writable 决定是否可以修改属性的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</div><div class="line">	<span class="attr">value</span>:<span class="number">2</span>,</div><div class="line">	<span class="attr">writable</span>:<span class="literal">false</span>,</div><div class="line">	<span class="attr">configurable</span>:<span class="literal">true</span>,</div><div class="line">	<span class="attr">enumerable</span>:<span class="literal">true</span></div><div class="line">&#125;);</div><div class="line">obj.a = <span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">// 2,无法修改值,在严格模式下会报TypeError错误</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="Configurable"><a href="#Configurable" class="headerlink" title="Configurable"></a>Configurable</h3><p>只要属性是可配置的，就可以使用defineProperty()方法来修改属性描述符<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">obj.a = <span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log(obj.a);</div><div class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</div><div class="line">	<span class="attr">value</span>:<span class="number">4</span>,</div><div class="line">	<span class="attr">writable</span>:<span class="literal">true</span>,</div><div class="line">	<span class="attr">configurable</span>:<span class="literal">false</span>,</div><div class="line">	<span class="attr">writable</span>:<span class="literal">true</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">// 4</span></div><div class="line">obj.a = <span class="number">5</span>;</div><div class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">// 5</span></div><div class="line"></div><div class="line"><span class="keyword">delete</span> obj.a;</div><div class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">// 5，禁止删除这个属性</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</div><div class="line">	<span class="attr">value</span>:<span class="number">6</span>,</div><div class="line">	<span class="attr">writable</span>:<span class="literal">true</span>,</div><div class="line">	<span class="attr">configurable</span>:<span class="literal">true</span>,</div><div class="line">	<span class="attr">writable</span>:<span class="literal">true</span></div><div class="line">&#125;); <span class="comment">// TypeError,无法修改属性描述符</span></div></pre></td></tr></table></figure></p>
<p>由此可见，把configurable修改为false是单向操作，无法撤销！</p>
<hr>
<h3 id="Enumerable"><a href="#Enumerable" class="headerlink" title="Enumerable"></a>Enumerable</h3><p>控制对象的属性能否出现在属性枚举中，比如说for..in循环。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">	<span class="attr">a</span>:<span class="number">2</span>,</div><div class="line">	<span class="attr">b</span>:<span class="number">3</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> obj)&#123;</div><div class="line">	<span class="built_in">console</span>.log(i);</div><div class="line">&#125; <span class="comment">// a b</span></div><div class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</div><div class="line">	<span class="attr">value</span>:<span class="number">2</span>,</div><div class="line">	<span class="attr">writable</span>:<span class="literal">true</span>,</div><div class="line">	<span class="attr">configurable</span>:<span class="literal">true</span>,</div><div class="line">	<span class="attr">enumerable</span>:<span class="literal">false</span></div><div class="line">&#125;);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> obj)&#123;</div><div class="line">	<span class="built_in">console</span>.log(i);</div><div class="line">&#125; <span class="comment">// b</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="Setter和Getter"><a href="#Setter和Getter" class="headerlink" title="Setter和Getter"></a>Setter和Getter</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">	get a()&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>._a_;</div><div class="line">	&#125;</div><div class="line">	set a(value)&#123;</div><div class="line">		<span class="keyword">this</span>._a_ = value*<span class="number">2</span>;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"b"</span>,&#123;</div><div class="line">	<span class="attr">get</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.a*<span class="number">2</span>&#125;,</div><div class="line">&#125;);</div><div class="line">obj.a=<span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">// 4</span></div><div class="line"><span class="built_in">console</span>.log(obj.b); <span class="comment">// 8</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="禁止拓展"><a href="#禁止拓展" class="headerlink" title="禁止拓展"></a>禁止拓展</h2><p>禁止一个对象添属性并保留已有属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">	a=<span class="number">2</span></div><div class="line">&#125;;</div><div class="line"><span class="built_in">Object</span>.preventExtensions(obj); <span class="comment">//禁止拓展</span></div><div class="line">obj.b=<span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log(obj.b); <span class="comment">// undefined</span></div></pre></td></tr></table></figure></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考《你不知道的JavaScript》
    
    </summary>
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js学习之this</title>
    <link href="http://yoursite.com/2017/02/19/this/"/>
    <id>http://yoursite.com/2017/02/19/this/</id>
    <published>2017-02-19T13:12:43.000Z</published>
    <updated>2017-02-21T13:13:02.803Z</updated>
    
    <content type="html"><![CDATA[<p>参考《你不知道的JavaScript》<a id="more"></a></p>
<h1 id="绑定规则"><a href="#绑定规则" class="headerlink" title="绑定规则"></a>绑定规则</h1><hr>
<h2 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</div><div class="line">foo(); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p>默认绑定时,this指向全局对象。<br>但是在严格模式下,全局对象无法使用默认绑定。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="meta">	"use strict"</span>;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</div><div class="line">foo(); <span class="comment">// Type Error:this is undefined</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h2><p>在一个对象内部创建包含一个指向函数的属性，并通过这个对象间接引用函数，<br>从而把this隐式绑定到这个对象上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj =&#123;</div><div class="line">	<span class="attr">a</span>:<span class="number">2</span>,</div><div class="line">	<span class="attr">f</span>:foo</div><div class="line">&#125;</div><div class="line">obj.f(); <span class="comment">// 2</span></div></pre></td></tr></table></figure></p>
<p>this绑定到obj对象</p>
<h3 id="隐式丢失"><a href="#隐式丢失" class="headerlink" title="隐式丢失"></a>隐式丢失</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj =&#123;</div><div class="line">	<span class="attr">a</span>:<span class="number">2</span>,</div><div class="line">	<span class="attr">f</span>:foo</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> bar = obj.f;</div><div class="line"><span class="keyword">var</span> a = <span class="string">"hello"</span>;</div><div class="line">bar(); <span class="comment">// hello</span></div></pre></td></tr></table></figure>
<p>隐式绑定的函数丢失绑定对象，应用默认绑定。</p>
<hr>
<h2 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h2><p>使用 call() 和 apply() 方法，把this绑定到传进去的对象上<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">	a=<span class="number">2</span>;</div><div class="line">&#125;</div><div class="line">foo.call(obj); <span class="comment">// 2</span></div></pre></td></tr></table></figure></p>
<p>与隐式绑定相同，显示绑定同样有着绑定丢失的情况<br>但是显示绑定的一个变种可以解决这个问题</p>
<h3 id="硬绑定"><a href="#硬绑定" class="headerlink" title="硬绑定"></a>硬绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="title">something</span>(<span class="params">something</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a,something);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.a + something;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">	a=<span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> bar = foo.bind(obj);</div><div class="line"><span class="keyword">var</span> b = bar(<span class="number">3</span>); <span class="comment">// 2 3</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">//5</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.a=a;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> foo(<span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(bar.a); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p>创建一个新对象并把它绑定到foo()调用的this上</p>
<h1 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h1><hr>
<h2 id="显示绑定和隐式绑定"><a href="#显示绑定和隐式绑定" class="headerlink" title="显示绑定和隐式绑定"></a>显示绑定和隐式绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj1=&#123;</div><div class="line">	<span class="attr">a</span>:<span class="number">2</span>,</div><div class="line">	<span class="attr">foo</span>:foo</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> obj2=&#123;</div><div class="line">	a=<span class="number">3</span>,</div><div class="line">	<span class="attr">foo</span>:foo</div><div class="line">&#125;;</div><div class="line">obj1.foo(); <span class="comment">// 2</span></div><div class="line">obj2.foo(); <span class="comment">// 3</span></div><div class="line"></div><div class="line">obj1.foo.call(obj2); <span class="comment">// 3</span></div><div class="line">obj2.foo.call(obj1); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p>可以看到，显示绑定优先级更高，在判断时应当先考虑是否可以应用显示绑定</p>
<hr>
<h2 id="new绑定和隐式绑定"><a href="#new绑定和隐式绑定" class="headerlink" title="new绑定和隐式绑定"></a>new绑定和隐式绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">something</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.a=something;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj1=&#123;</div><div class="line">	<span class="attr">foo</span>:foo</div><div class="line">&#125;;</div><div class="line"></div><div class="line">obj1.foo(<span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(obj1.a); <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> obj1.foo(<span class="number">4</span>);</div><div class="line"><span class="built_in">console</span>.log(obj1.a); <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(bar.a); <span class="comment">// 4</span></div></pre></td></tr></table></figure>
<p>可以看到，new绑定比隐式绑定优先级更高</p>
<hr>
<h2 id="new绑定和显示绑定"><a href="#new绑定和显示绑定" class="headerlink" title="new绑定和显示绑定"></a>new绑定和显示绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">something</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.a=something;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bar = foo.bind(obj1);</div><div class="line">bar(<span class="number">2</span>);</div><div class="line">consolo.log(obj1.a); <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> baz = <span class="keyword">new</span> bar(<span class="number">3</span>);</div><div class="line"><span class="built_in">console</span>.log(obj1.a); <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(baz.a); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>可以看到，new绑定比显示绑定优先级更高</p>
<hr>
<h2 id="判断this顺序"><a href="#判断this顺序" class="headerlink" title="判断this顺序"></a>判断this顺序</h2><p>按照下面的顺序来判断this所应用的规则<br>1.函数是否在用new中调用(new绑定)</p>
<blockquote>
<p>var bar = new foo();</p>
</blockquote>
<p>2.函数是否通过call、apply或者bind(硬绑定)调用(显示绑定)</p>
<blockquote>
<p>var bar = foo.call(obj);</p>
</blockquote>
<p>3.函数是否在某个上下文对象中调用(隐式绑定)</p>
<blockquote>
<p>var bar = obj.foo();</p>
</blockquote>
<p>4.如果都不是的话,就使用默认绑定</p>
<blockquote>
<p>var bar = foo();</p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考《你不知道的JavaScript》
    
    </summary>
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Github</title>
    <link href="http://yoursite.com/2017/02/17/github/"/>
    <id>http://yoursite.com/2017/02/17/github/</id>
    <published>2017-02-17T09:24:33.000Z</published>
    <updated>2017-02-26T12:48:22.416Z</updated>
    
    <content type="html"><![CDATA[<p>学习Git<a id="more"></a></p>
<h1 id="一、windows安装git"><a href="#一、windows安装git" class="headerlink" title="一、windows安装git"></a>一、windows安装git</h1><p><a href="https://git-for-windows.github.io/" target="_blank" rel="external">下载链接</a></p>
<h1 id="二、建立远程仓库"><a href="#二、建立远程仓库" class="headerlink" title="二、建立远程仓库"></a>二、建立远程仓库</h1><h2 id="1-创建SSH-Key"><a href="#1-创建SSH-Key" class="headerlink" title="1.创建SSH Key"></a>1.创建SSH Key</h2><blockquote>
<p>$ ssh-keygen -t rsa -C “Cybbin@Cybbin.com”</p>
</blockquote>
<p>创建ssh key,一路回车默认即可<br>创建.ssh目录,在该目录(我的是在C:\Users\Administrator目录下)下会有id_rsa,和id_rsa.pub文件<br>id_rsa是私钥,不能泄露<br>id_rsa.pub是公钥</p>
<h2 id="2-登陆Github"><a href="#2-登陆Github" class="headerlink" title="2.登陆Github"></a>2.登陆Github</h2><p>点击头像，打开Setting,点击左边的SSH and GPG keys,点击News SSH key<br>填上任意Title,把id_rsa.pub的内容粘贴到Key文本框里<br>然后点击Add SSH key</p>
<h1 id="三、git指令"><a href="#三、git指令" class="headerlink" title="三、git指令"></a>三、git指令</h1><h2 id="提交仓库"><a href="#提交仓库" class="headerlink" title="提交仓库"></a>提交仓库</h2><hr>
<blockquote>
<p>git init</p>
</blockquote>
<p>git目录初始化</p>
<hr>
<blockquote>
<p>git add .</p>
</blockquote>
<p>添加该目录下所有文件到暂存区</p>
<hr>
<blockquote>
<p>git commit -m ‘m’</p>
</blockquote>
<p>把文件提交到仓库,引号为提交的说明</p>
<hr>
<blockquote>
<p>git remote add origin git@github.com:Cybbin/jd.git</p>
</blockquote>
<p>将本地仓库与Github仓库关联</p>
<hr>
<blockquote>
<p>git push -u origin master</p>
</blockquote>
<p>将本地仓库推送到远程(Github)库的master主分支上<br>-u是第一次提交时,把本地的master分支与远程的master分支关联起来<br>在以后的推送就可以简化命令</p>
<blockquote>
<p>git push origin master</p>
</blockquote>
<hr>
<blockquote>
<p>git clone git@github.com:Cybbin/jd.git</p>
</blockquote>
<p>克隆远程库到本地,克隆在gitskills文件夹中</p>
<hr>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><hr>
<blockquote>
<p>git log</p>
</blockquote>
<p>查看版本控制器的历史记录<br>commit后面为版本id</p>
<hr>
<blockquote>
<p>git log --pretty=oneline</p>
</blockquote>
<p>前面为版本commit id,后面的数字为在commit的时候后面引号内的内容</p>
<blockquote>
<p>git log --pretty=oneline --abbrev-commit</p>
</blockquote>
<p>只显示前几位commit id</p>
<hr>
<blockquote>
<p>git reset --hard HEAD^</p>
</blockquote>
<p>回到上个版本<br>上上个版本是 Head^^<br>上100个版本是 Head~100<br>回到第id个版本,id为git log出现的commit id</p>
<blockquote>
<p>git reset --hard id</p>
</blockquote>
<hr>
<blockquote>
<p>git reflog</p>
</blockquote>
<p>记录每一次命令的id<br>回退时找不到新版本的id时用(重返未来)</p>
<hr>
<blockquote>
<p>git status</p>
</blockquote>
<p>查看当前仓库的状态</p>
<hr>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><hr>
<blockquote>
<p>git branch dev</p>
</blockquote>
<p>创建dev分支</p>
<hr>
<blockquote>
<p>git checkout dev</p>
</blockquote>
<p>切换到dev分支上</p>
<hr>
<blockquote>
<p>git checkout -b dev</p>
</blockquote>
<p>相当于这两句</p>
<blockquote>
<p>git branch dev<br>git checkout dev</p>
</blockquote>
<hr>
<blockquote>
<p>git branch</p>
</blockquote>
<p>列出所有分支,当前分支前有*号</p>
<hr>
<blockquote>
<p>git merge dev</p>
</blockquote>
<p>将dev分支合并到master主分支上,Fast forward模式</p>
<hr>
<blockquote>
<p>git merge dev --no-ff -m ‘’ dev</p>
</blockquote>
<p>禁用Fast forward模式，并提交备注信息</p>
<hr>
<blockquote>
<p>git branch -d dev</p>
</blockquote>
<p>删除dev分支,没有被合并时,如果有修改,无法删除</p>
<hr>
<blockquote>
<p>git branch -D dev</p>
</blockquote>
<p>强力删除dev分支</p>
<hr>
<blockquote>
<p>git log --graph</p>
</blockquote>
<p>列出分支合并图</p>
<hr>
<blockquote>
<p>git stash</p>
</blockquote>
<p>将当前工作现场隐藏</p>
<hr>
<blockquote>
<p>git stash list</p>
</blockquote>
<p>列出当前分支所有被隐藏的工作区</p>
<hr>
<blockquote>
<p>git stash pop</p>
</blockquote>
<p>恢复工作区,并删除stash内容</p>
<hr>
<blockquote>
<p>git stash apply stash@{0}</p>
</blockquote>
<p>恢复工作区,但没有删除stash内容<br>需要再用 git stash drop 来删除</p>
<hr>
<blockquote>
<p>git pull</p>
</blockquote>
<p>将最新的提交从origin抓下来</p>
<hr>
<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><hr>
<blockquote>
<p>git tag v1.0</p>
</blockquote>
<p>设置当前标签为v1.0</p>
<hr>
<blockquote>
<p>git tag</p>
</blockquote>
<p>查看当前分支的所有标签(不是按时间顺序排列,按字母顺序排列)</p>
<hr>
<blockquote>
<p>git tab v1.0 id</p>
</blockquote>
<p>对当前分支的过去版本打标签,id为commit id(版本回退里有)</p>
<hr>
<blockquote>
<p>git show v1.0</p>
</blockquote>
<p>查看v1.0标签信息</p>
<hr>
<blockquote>
<p>git tag -d v1.0</p>
</blockquote>
<p>删除本地的标签</p>
<blockquote>
<p>git push origin :ref/tags/v1.0</p>
</blockquote>
<p>删除推送到远程的标签</p>
<hr>
<blockquote>
<p>git push origin v1.0</p>
</blockquote>
<p>推送标签到远程</p>
<blockquote>
<p>git push origin --tags</p>
</blockquote>
<p>一次性推送全部未推送到远程的标签</p>
<hr>
<h2 id="其它小命令"><a href="#其它小命令" class="headerlink" title="其它小命令"></a>其它小命令</h2><hr>
<blockquote>
<p>git remote -v</p>
</blockquote>
<p>查看远程库的信息</p>
<hr>
<blockquote>
<p>ls</p>
</blockquote>
<p>查看当前目录所有文件</p>
<hr>
<blockquote>
<p>touch README.md</p>
</blockquote>
<p>创建 README.md 文件</p>
<hr>
<blockquote>
<p>rm README.md</p>
</blockquote>
<p>删除 README.md 文件</p>
<hr>
<h1 id="四、踩过的坑"><a href="#四、踩过的坑" class="headerlink" title="四、踩过的坑"></a>四、踩过的坑</h1><hr>
<p>错误：<br>git commit 后运行 git status<br>出现  git commit On branch master nothing to commit, working tree clean<br>解决办法:<br>当前分支没有修改内容,可能是切换错分支了<br>查看分支</p>
<blockquote>
<p>git branch</p>
</blockquote>
<hr>
<p>错误：</p>
<blockquote>
<p>git push origin master<br>To git@github.com:Cybbin/jd.git<br> ! [rejected]        master -&gt; master (non-fast-forward)<br>error: failed to push some refs to ‘git@github.com:Cybbin/jd.git’<br>hint: Updates were rejected because the tip of your current branch is behind<br>hint: its remote counterpart. Integrate the remote changes (e.g.<br>hint: ‘git pull …’) before pushing again.<br>hint: See the ‘Note about fast-forwards’ in ‘git push --help’ for details.</p>
</blockquote>
<p>解决办法：</p>
<blockquote>
<p>git push -f origin master</p>
</blockquote>
<hr>
<p>错误：</p>
<blockquote>
<p>$ git push -u origin master<br>To git@github.com:yangchao0718/cocos2d.git<br> ! [rejected]        master -&gt; master (non-fast-forward)<br>error: failed to push some refs to ‘git@github.com:yangchao0718/cocos2d.git<br>hint: Updates were rejected because the tip of your current branch is behin<br>hint: its remote counterpart. Integrate the remote changes (e.g.<br>hint: ‘git pull …’) before pushing again.<br>hint: See the ‘Note about fast-forwards’ in ‘git push --help’ for details.</p>
</blockquote>
<p>解决办法：<br>github上的README.md文件不在本地代码目录中</p>
<blockquote>
<p>git pull --rebase origin master</p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习Git
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="language" scheme="http://yoursite.com/tags/language/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>js学习之ajax</title>
    <link href="http://yoursite.com/2017/02/01/ajax/"/>
    <id>http://yoursite.com/2017/02/01/ajax/</id>
    <published>2017-02-01T08:46:46.000Z</published>
    <updated>2017-02-21T13:13:13.148Z</updated>
    
    <content type="html"><![CDATA[<p>ajax源码:</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</div><div class="line">	xmlHttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(windoe.ActionXObject)&#123;</div><div class="line">	<span class="keyword">var</span> actionName = [<span class="string">'MSXML2.XMLHTTP'</span>,<span class="string">'Microsoft.XMLHTTP'</span>];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&amp;lt;actionName.length;i++)&#123;</div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">			xmlHttp = <span class="keyword">new</span> ActionXObject(actionName[i]);</div><div class="line">		&#125;<span class="keyword">catch</span>(e)&#123;&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!xmlHttp)&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'xmlHttp对象创建失败'</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	xmlHttp.onreadystatechange=callback;</div><div class="line">	<span class="comment">//xmlHttp.open('get','url',true);</span></div><div class="line">	xmlHttp.open(<span class="string">'post'</span>,<span class="string">'url'</span>,<span class="literal">true</span>);</div><div class="line">	xmlHttp.setHeadRequest(<span class="string">'Content-type'</span>,<span class="string">'appplication/x-www-form-urlencode'</span>);</div><div class="line">	xmlHttp.send();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(xmlHttp.readyState)&#123;</div><div class="line">		<span class="keyword">if</span>(xmlHttp.status)&#123;</div><div class="line">			<span class="keyword">var</span> responseText = xmlHttp.responseText;</div><div class="line">			<span class="comment">//返回XML时</span></div><div class="line">			<span class="comment">//var responseXML = xmlHtpp.responseXML;</span></div><div class="line">			<span class="comment">//返回json时</span></div><div class="line">			<span class="comment">//responseText = eval('('+responseText+')');</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ajax源码:&lt;/p&gt;
    
    </summary>
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>css水平垂直居中</title>
    <link href="http://yoursite.com/2017/01/25/css%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
    <id>http://yoursite.com/2017/01/25/css水平垂直居中/</id>
    <published>2017-01-25T12:52:30.000Z</published>
    <updated>2017-02-21T11:41:39.330Z</updated>
    
    <content type="html"><![CDATA[<p>4种将一个绝对定位元素水平垂直居中的方法<br><a id="more"></a></p>
<p>css代码:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="comment">/*css3方法*/</span></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 justify-content:center;/子元素水平居中/</div><div class="line">	 align-items:center;/子元素垂直居中/</div><div class="line">	 display:flex;</div><div class="line">	 */</div><div class="line">&#125;</div><div class="line"><span class="comment">/*Chrome,Firefox, Safari, Mobile Safari, IE8-10.*/</span></div><div class="line"><span class="selector-class">.div1</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">background</span>: red;</div><div class="line">	<span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">margin</span>: auto;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*******兼容IE6,7,流行方法*******/</span></div><div class="line"><span class="selector-class">.div2</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">background</span>: blue;</div><div class="line">	<span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">margin-left</span>: -<span class="number">50px</span>;</div><div class="line">	<span class="attribute">margin-top</span>: -<span class="number">50px</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*不兼容IE8*/</span></div><div class="line"><span class="selector-class">.div3</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">background</span>: red;</div><div class="line">	<span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 -webkit-transform:translate(-50%,-50%);</div><div class="line">	 -ms-transform:translate(-50%,-50%);</div><div class="line">	 */</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*水平方向居中*/</span></div><div class="line"><span class="selector-class">.div3</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">background</span>: red;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;4种将一个绝对定位元素水平垂直居中的方法&lt;br&gt;
    
    </summary>
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="http://yoursite.com/2017/01/25/markdown/"/>
    <id>http://yoursite.com/2017/01/25/markdown/</id>
    <published>2017-01-25T07:55:33.000Z</published>
    <updated>2017-02-21T12:15:29.625Z</updated>
    
    <content type="html"><![CDATA[<p>md语法<a id="more"></a></p>
<hr>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section"># 这是H1</span></div></pre></td></tr></table></figure>
<p>效果：</p>
<h1 id="这是H1"><a href="#这是H1" class="headerlink" title="这是H1"></a>这是H1</h1><hr>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">## 这是H2 ##</span></div></pre></td></tr></table></figure>
<p>效果：</p>
<h2 id="这是H2"><a href="#这是H2" class="headerlink" title="这是H2"></a>这是H2</h2><hr>
<h1 id="标记区块"><a href="#标记区块" class="headerlink" title="标记区块"></a>标记区块</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; 标记区块1</span></div><div class="line">标记区块1</div><div class="line"><span class="quote">&gt; &gt; 标记区块2</span></div></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<p>标记区块1<br>标记区块1</p>
<blockquote>
<p>标记区块2</p>
</blockquote>
</blockquote>
<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span></div><div class="line"><span class="code">     var i=0;</span></div><div class="line"><span class="code">     i++;</span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span></div><div class="line"><span class="code">`print() ;`</span></div></pre></td></tr></table></figure>
<p>效果：</p>
<p><pre><code><br>     var i=0;<br>     i++;<br></code></pre><br><code>print() ;</code></p>
<hr>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>Bird</div><div class="line"><span class="bullet">* </span>McHale</div><div class="line"><span class="bullet">* </span>Parish</div><div class="line"></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span>Bird<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span>McHale<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span>Parish<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>效果：</p>
<ul>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ul>
<ul><br><li>Bird</li><br><li>McHale</li><br><li>Parish</li><br></ul>

<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span>Bird<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span>McHale<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span>Parish<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>效果：</p>
<ol><br><li>Bird</li><br><li>McHale</li><br><li>Parish</li><br></ol>

<hr>
<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="emphasis">***</span></div><div class="line"><span class="section">___</span></div><div class="line">---</div></pre></td></tr></table></figure>
<p>效果：</p>
<hr>
<hr>
<h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="string">点击预览</span>](<span class="link">http://www.baidu.com</span>)</div><div class="line">[<span class="string">点击预览</span>](<span class="link">http://www.baidu.com "预览"</span>)</div></pre></td></tr></table></figure>
<p>效果：<br><a href="http://www.baidu.com" target="_blank" rel="external">点击预览</a><br><a href="http://www.baidu.com" title="预览" target="_blank" rel="external">点击预览</a></p>
<hr>
<h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="emphasis">*强调(斜体)*</span></div><div class="line"><span class="strong">**强调(加粗)**</span></div></pre></td></tr></table></figure>
<p>效果：<br><em>强调(斜体)</em><br><strong>强调(加粗)</strong></p>
<hr>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">Alt Text</span>](<span class="link">/uploads/1.jpg</span>)</div></pre></td></tr></table></figure>
<p>效果：<br><img src="/uploads/1.jpg" alt="Alt Text"></p>
<hr>
<h1 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</div></pre></td></tr></table></figure>
<hr>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">|language  |language_key|</div><div class="line">|:--------:|:----------:|</div><div class="line">|css       |css         |</div><div class="line">|C++       |cpp         |</div><div class="line">|C# C      |cpp         |</div><div class="line">|Go        |go          |</div><div class="line">|HTTP      |http        |</div><div class="line">|Java      |java        |</div><div class="line">|Javascript|javascript  |</div><div class="line">|JSON      |json        |</div><div class="line">|Less      |less        |</div><div class="line">|Markdown  |markdown    |</div><div class="line">|Matlab    |matlab      |</div><div class="line">|PHP       |php         |</div><div class="line">|Python    |python      |</div><div class="line">|Ruby      |ruby        |</div><div class="line">|SCSS      |SCSS        |</div><div class="line">|SQL       |sql         |</div><div class="line">|XML       |xml         |</div></pre></td></tr></table></figure>
<p>效果：</p>
<table>
<thead>
<tr>
<th style="text-align:center">language</th>
<th style="text-align:center">language_key</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">css</td>
<td style="text-align:center">css</td>
</tr>
<tr>
<td style="text-align:center">C++</td>
<td style="text-align:center">cpp</td>
</tr>
<tr>
<td style="text-align:center">C# C</td>
<td style="text-align:center">cpp</td>
</tr>
<tr>
<td style="text-align:center">Go</td>
<td style="text-align:center">go</td>
</tr>
<tr>
<td style="text-align:center">HTTP</td>
<td style="text-align:center">http</td>
</tr>
<tr>
<td style="text-align:center">Java</td>
<td style="text-align:center">java</td>
</tr>
<tr>
<td style="text-align:center">Javascript</td>
<td style="text-align:center">javascript</td>
</tr>
<tr>
<td style="text-align:center">JSON</td>
<td style="text-align:center">json</td>
</tr>
<tr>
<td style="text-align:center">Less</td>
<td style="text-align:center">less</td>
</tr>
<tr>
<td style="text-align:center">Markdown</td>
<td style="text-align:center">markdown</td>
</tr>
<tr>
<td style="text-align:center">Matlab</td>
<td style="text-align:center">matlab</td>
</tr>
<tr>
<td style="text-align:center">PHP</td>
<td style="text-align:center">php</td>
</tr>
<tr>
<td style="text-align:center">Python</td>
<td style="text-align:center">python</td>
</tr>
<tr>
<td style="text-align:center">Ruby</td>
<td style="text-align:center">ruby</td>
</tr>
<tr>
<td style="text-align:center">SCSS</td>
<td style="text-align:center">SCSS</td>
</tr>
<tr>
<td style="text-align:center">SQL</td>
<td style="text-align:center">sql</td>
</tr>
<tr>
<td style="text-align:center">XML</td>
<td style="text-align:center">xml</td>
</tr>
</tbody>
</table>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;md语法
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
      <category term="language" scheme="http://yoursite.com/tags/language/"/>
    
  </entry>
  
</feed>
