<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  <subtitle>未来的你,一定会感谢现在奋斗的你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-24T12:45:16.406Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Cyb</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跨域</title>
    <link href="http://yoursite.com/2017/04/24/cross-domain/"/>
    <id>http://yoursite.com/2017/04/24/cross-domain/</id>
    <published>2017-04-24T12:42:45.000Z</published>
    <updated>2017-04-24T12:45:16.406Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript跨域的五种方法<br><a id="more"></a></p>
<h1 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h1><p>原理：利用js不受跨域限制，利用script标签引入不同域上的文件。<br>注意：资源来源是否支持jsonp。<br>优点：不像Ajax受同源策略的限制，兼容性更好，不需要XMLHttpRequest或ActiveX的支持。<br>缺点：只支持GET请求而不支持POST等其它类型的HTTP请求，它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(data);</div><div class="line">&#125;</div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">	script.setAttribute(<span class="string">'type'</span>, <span class="string">'text/javascript'</span>);</div><div class="line">	script.src = <span class="string">'http://s.music.163.com/search/get/?type=1&amp;filterDj=true&amp;s=%E8%96%9B%E4%B9%8B%E8%B0%A6&amp;limit=100&amp;offset=0&amp;callback=callback'</span>;</div><div class="line">	<span class="built_in">document</span>.body.appendChild(script);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><p>CORS(Cross-Origin Resource Sharing)跨域资源共享，定义了必须在访问跨域资源时，浏览器与服务器应该如何沟通。CORS背后的基本思想就是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是失败。<br>优点：支持所有类型的HTTP请求，可以使用普通的XMLHttpRequest发起请求和获得数据，比JSONP有更好的错误处理。<br>缺点：不支持老的浏览器。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 前端用普通的Ajax方式即可</span></div><div class="line"><span class="comment">// 后端</span></div><div class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h1><p>相同基础域名页面之间的调用。</p>
<hr>
<h1 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h1><p>window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的</p>
<hr>
<h1 id="window-postMessage"><a href="#window-postMessage" class="headerlink" title="window.postMessage()"></a>window.postMessage()</h1><p>window.postMessage(message,targetOrigin) 方法是html5新引进的特性，可以使用它来向其它的window对象发送消息，无论这个window对象是属于同源或不同源，目前IE8+、FireFox、Chrome、Opera等浏览器都已经支持window.postMessage方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript跨域的五种方法&lt;br&gt;
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>异步编程</title>
    <link href="http://yoursite.com/2017/04/24/asyn/"/>
    <id>http://yoursite.com/2017/04/24/asyn/</id>
    <published>2017-04-24T12:40:36.000Z</published>
    <updated>2017-04-24T12:47:20.734Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript异步编程的四种方法<br><a id="more"></a></p>
<h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f1();</div><div class="line">f2();</div></pre></td></tr></table></figure>
<p>以上代码表示执行完f1()再执行f2()。<br>将f2()写成f1()的回调函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">//f1的任务代码</span></div><div class="line">		callback();</div><div class="line">	&#125;,<span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">f1(f2); <span class="comment">// 将f2()写成f1()的回调函数</span></div></pre></td></tr></table></figure></p>
<p>优点：简单、容易理解和部署。<br>缺点：不利于代码的阅读与维护，各个部分之间高度耦合，流程混乱，并且每个函数只能指定一个回调函数。</p>
<p>如何解决嵌套回调？</p>
<ol>
<li>给你的函数命名并传递它们的名字作为回调函数，而不是主函数的参数中定义匿名函数。</li>
<li>将代码分隔到模块中，这样就可以指定一块代码来完成特定的工作，再将模块导入到应用中。</li>
</ol>
<hr>
<h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><p>为f1绑定一个done事件（jQuery写法）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">// f1的任务代码</span></div><div class="line">		</div><div class="line">		<span class="comment">// 触发done事件</span></div><div class="line">		f1.trigger(<span class="string">'done'</span>);</div><div class="line">	&#125;,<span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 绑定done事件</span></div><div class="line">f1.on(<span class="string">'done'</span>,f2);</div></pre></td></tr></table></figure></p>
<p>优点：容易理解，可以绑定多个事件，每个事件可以绑定多个回调函数，而且去耦合，有利于模块化。<br>缺点：整个程序都编程事件驱动器型，运行流程会变得很不清晰。</p>
<hr>
<h1 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布/订阅"></a>发布/订阅</h1><p>又称观察者模式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// f2向'信号中心'订阅'done'信号（jQuery写法）</span></div><div class="line">jQuery.subscribe(<span class="string">'done'</span>,f2);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">// f1的任务代码</span></div><div class="line">		</div><div class="line">		<span class="comment">// 向'信号中心'发布'done'信号</span></div><div class="line">		jQuery.publish(<span class="string">'done'</span>);</div><div class="line">	&#125;,<span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// f2完成执行后，可以取消订阅</span></div><div class="line">jQuery.unsubscribe(<span class="string">'done'</span>,f2);</div></pre></td></tr></table></figure></p>
<p>与事件监听类似，但明显发布/订阅模式更优，因为我们可以通过查看“消息中心”，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行。</p>
<hr>
<h1 id="Promises对象"><a href="#Promises对象" class="headerlink" title="Promises对象"></a>Promises对象</h1><p>每个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。<br>比如，f1的回调函数f2，可以写成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f1().then(f2);</div></pre></td></tr></table></figure></p>
<p>改写f1（jQuery的写法）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> dfd = $.Deferred();</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">//f1的任务代码</span></div><div class="line">		dfd.resolve();</div><div class="line">	&#125;,<span class="number">1000</span>);</div><div class="line">	<span class="comment">//返回promise对象</span></div><div class="line">	<span class="keyword">return</span> dfd;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>优点：回调函数编程了链式写法，程序的流程可以看得很清楚，可以实现许多强大的功能。<br>比如：指定多个回调函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f1().then(f2).then(f3);</div></pre></td></tr></table></figure></p>
<p>指定发生错误时的回调函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f1().then(f2).fail(f3);</div></pre></td></tr></table></figure></p>
<p>而且还有一个前面三种方法都没有的好处，如果一个任务已经完成，再添加回调函数，该回调函数会立即执行，所以不用担心是否错过了某个事件或信号。<br>缺点：对编写和理解相对比较难。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript异步编程的四种方法&lt;br&gt;
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>CSS3</title>
    <link href="http://yoursite.com/2017/04/24/css3/"/>
    <id>http://yoursite.com/2017/04/24/css3/</id>
    <published>2017-04-24T12:37:58.000Z</published>
    <updated>2017-04-24T12:48:17.108Z</updated>
    
    <content type="html"><![CDATA[<p>CSS3新特性<br><a id="more"></a></p>
<h1 id="CSS3选择器（Selector）"><a href="#CSS3选择器（Selector）" class="headerlink" title="CSS3选择器（Selector）"></a>CSS3选择器（Selector）</h1><table>
<thead>
<tr>
<th style="text-align:center">选择器</th>
<th style="text-align:center">例子</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">element1~element2</td>
<td style="text-align:center">p~ul</td>
<td style="text-align:left">选择前面有 p 元素的每个 ul 元素</td>
</tr>
<tr>
<td style="text-align:center">[attribute^=value]</td>
<td style="text-align:center">a[src^=”https”]</td>
<td style="text-align:left">选择其 src 属性值以 “https” 开头的每个 a 元素</td>
</tr>
<tr>
<td style="text-align:center">[attribute$=value]</td>
<td style="text-align:center">a[src$=”.pdf”]</td>
<td style="text-align:left">选择其 src 属性以 “.pdf” 结尾的所有 a 元素</td>
</tr>
<tr>
<td style="text-align:center">[attribute*=value]</td>
<td style="text-align:center">a[src*=”abc”]</td>
<td style="text-align:left">选择其 src 属性中包含 “abc” 子串的每个 a 元素</td>
</tr>
<tr>
<td style="text-align:center">:first-of-type</td>
<td style="text-align:center">p:first-of-type</td>
<td style="text-align:left">选择属于其父元素的首个 p 元素的每个 p 元素</td>
</tr>
<tr>
<td style="text-align:center">:last-of-type</td>
<td style="text-align:center">p:last-of-type</td>
<td style="text-align:left">选择属于其父元素的最后 p 元素的每个 p 元素</td>
</tr>
<tr>
<td style="text-align:center">:only-of-type</td>
<td style="text-align:center">p:only-of-type</td>
<td style="text-align:left">选择属于其父元素唯一的 p 元素的每个 p 元素</td>
</tr>
<tr>
<td style="text-align:center">:only-child</td>
<td style="text-align:center">p:only-child</td>
<td style="text-align:left">选择属于其父元素的唯一子元素的每个 p 元素</td>
</tr>
<tr>
<td style="text-align:center">:nth-child(n)</td>
<td style="text-align:center">p:nth-child(2)</td>
<td style="text-align:left">选择属于其父元素的第二个子元素的每个 p 元素</td>
</tr>
<tr>
<td style="text-align:center">:nth-last-child(n)</td>
<td style="text-align:center">p:nth-last-child(2)</td>
<td style="text-align:left">同上，从最后一个子元素开始计数</td>
</tr>
<tr>
<td style="text-align:center">:nth-of-type(n)</td>
<td style="text-align:center">p:nth-of-type(2)</td>
<td style="text-align:left">选择属于其父元素第二个 p 元素的每个 p 元素</td>
</tr>
<tr>
<td style="text-align:center">:nth-last-of-type(n)</td>
<td style="text-align:center">p:nth-last-of-type(2)</td>
<td style="text-align:left">同上，但是从最后一个子元素开始计数</td>
</tr>
<tr>
<td style="text-align:center">:last-child</td>
<td style="text-align:center">p:last-child</td>
<td style="text-align:left">选择属于其父元素最后一个子元素每个 p 元素</td>
</tr>
<tr>
<td style="text-align:center">:root</td>
<td style="text-align:center">:root</td>
<td style="text-align:left">选择文档的根元素</td>
</tr>
<tr>
<td style="text-align:center">:empty</td>
<td style="text-align:center">p:empty</td>
<td style="text-align:left">选择没有子元素的每个 p 元素（包括文本节点）</td>
</tr>
<tr>
<td style="text-align:center">:target</td>
<td style="text-align:center">#news:target</td>
<td style="text-align:left">选择当前活动的 #news 元素</td>
</tr>
<tr>
<td style="text-align:center">:enabled</td>
<td style="text-align:center">input:enabled</td>
<td style="text-align:left">选择每个启用的 input 元素</td>
</tr>
<tr>
<td style="text-align:center">:disabled</td>
<td style="text-align:center">input:disabled</td>
<td style="text-align:left">选择每个禁用的 input 元素</td>
</tr>
<tr>
<td style="text-align:center">:checked</td>
<td style="text-align:center">input:checked</td>
<td style="text-align:left">选择每个被选中的 input 元素</td>
</tr>
<tr>
<td style="text-align:center">:not(selector)</td>
<td style="text-align:center">:not(p)</td>
<td style="text-align:left">选择非 p 元素的每个元素</td>
</tr>
<tr>
<td style="text-align:center">::selection</td>
<td style="text-align:center">::selection</td>
<td style="text-align:left">选择被用户选取的元素部分</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="Word-wrap-amp-Text-overflow-样式"><a href="#Word-wrap-amp-Text-overflow-样式" class="headerlink" title="Word-wrap &amp; Text-overflow 样式"></a>Word-wrap &amp; Text-overflow 样式</h1><p><strong>Word-wrap</strong>：允许长单词换行到下一行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:296px; border:1px solid #999999; overflow: hidden"</span>&gt;</span></div><div class="line">	wordwrapbreakwordwordwrapbreakwordwordwrapbreakwordwordwrapbreakword</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:296px; border:1px solid #999999; word-wrap:break-word;"</span>&gt;</span></div><div class="line">	wordwrapbreakwordwordwrapbreakwordwordwrapbreakwordwordwrapbreakword</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>Text-overflow</strong>：<br> (1)text-overflow:clip; — 修剪文本<br> (2)text-overflow:ellipsis; — 显示省略符号来代表被修剪的文本</p>
<hr>
<h1 id="文字渲染（Text-decoration）"><a href="#文字渲染（Text-decoration）" class="headerlink" title="文字渲染（Text-decoration）"></a>文字渲染（Text-decoration）</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">	<span class="attribute">-webkit-text-fill-color</span>:black;</div><div class="line">	<span class="attribute">-webkit-text-stroke-color</span>:red;</div><div class="line">	<span class="attribute">-webkit-text-stroke-width</span>:<span class="number">2.75px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Text-fill-color:文字内部填充颜色<br>Text-stroke-color:文字边界填充颜色<br>Text-stroke-width:文字边界宽度</p>
<hr>
<h1 id="多列布局（multi-column-layout）"><a href="#多列布局（multi-column-layout）" class="headerlink" title="多列布局（multi-column layout）"></a>多列布局（multi-column layout）</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">multi_column_style</span>&#123;</div><div class="line">	<span class="attribute">-webkit-column-count</span>:<span class="number">3</span>;</div><div class="line">	<span class="attribute">-webkit-column-rule</span>:<span class="number">2px</span> solid <span class="number">#bbb</span>;</div><div class="line">	<span class="attribute">-webkit-column-gap</span>:<span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"multi_column_style"</span>&gt;</span></div><div class="line">	测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本</div><div class="line">	测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Column-count:表示布局几列<br>Column-rule:表示列于列之间的间隔条样式<br>Column-gap:表示列于列之间的间隔</p>
<hr>
<h1 id="边框和颜色（color-border）"><a href="#边框和颜色（color-border）" class="headerlink" title="边框和颜色（color border）"></a>边框和颜色（color border）</h1><p><strong>颜色的透明度</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">color</span><span class="selector-pseudo">:rgba(255</span>,0,0,0<span class="selector-class">.5</span>);</div><div class="line"><span class="selector-tag">background-color</span><span class="selector-pseudo">:rgba(255</span>,0,0,0<span class="selector-class">.5</span>);</div><div class="line"></div><div class="line"><span class="selector-tag">color</span><span class="selector-pseudo">:hsla(112</span>,72%,33%,0<span class="selector-class">.68</span>);</div></pre></td></tr></table></figure></p>
<p><strong>边框圆角</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">border-radius</span><span class="selector-pseudo">:15px</span>;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="渐变效果"><a href="#渐变效果" class="headerlink" title="渐变效果"></a>渐变效果</h1><h2 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h2><p>左上（0%，0%）到右上（0%，100%）即从左到右水平渐变<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:-webkit-gradient(linear</span>,0% 0%,100% 0%,<span class="selector-tag">from</span>(<span class="selector-id">#2A8BBE</span>),<span class="selector-tag">to</span>(<span class="selector-id">#FE280E</span>));</div></pre></td></tr></table></figure></p>
<p><strong>复杂线性渐变</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:-webkit-gradient(linear</span>,0% 0%,100% 0%,<span class="selector-tag">from</span>(<span class="selector-id">#2A8BBE</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.33</span>,<span class="selector-id">#AAD010</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.33</span>,<span class="selector-id">#FF7F00</span>),<span class="selector-tag">to</span>(<span class="selector-id">#FE280E</span>));</div></pre></td></tr></table></figure></p>
<h2 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-webkit-gradient</span>(<span class="selector-tag">radial</span>,50 50,50,50 50,0,<span class="selector-tag">from</span>(<span class="selector-tag">black</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.5</span>,<span class="selector-tag">red</span>),<span class="selector-tag">to</span>(<span class="selector-tag">blue</span>));</div><div class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-webkit-gradient</span>(<span class="selector-tag">radial</span>,50 50,50,50 50,10,<span class="selector-tag">from</span>(<span class="selector-tag">black</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.5</span>,<span class="selector-tag">red</span>),<span class="selector-tag">to</span>(<span class="selector-tag">blue</span>));</div><div class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-webkit-gradient</span>(<span class="selector-tag">radial</span>,50 50,50,70 50,10,<span class="selector-tag">from</span>(<span class="selector-tag">black</span>),<span class="selector-tag">color-stop</span>(0<span class="selector-class">.5</span>,<span class="selector-tag">red</span>),<span class="selector-tag">to</span>(<span class="selector-tag">blue</span>));</div><div class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-webkit-gradient</span>(<span class="selector-tag">radial</span>,50 50,50,50 1,0,<span class="selector-tag">from</span>(<span class="selector-tag">black</span>),<span class="selector-tag">to</span>(<span class="selector-tag">white</span>));</div></pre></td></tr></table></figure>
<hr>
<h1 id="阴影（Shadow）和反射（Reflect）效果"><a href="#阴影（Shadow）和反射（Reflect）效果" class="headerlink" title="阴影（Shadow）和反射（Reflect）效果"></a>阴影（Shadow）和反射（Reflect）效果</h1><h2 id="阴影（Shadow）"><a href="#阴影（Shadow）" class="headerlink" title="阴影（Shadow）"></a>阴影（Shadow）</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">text-shadow</span><span class="selector-pseudo">:5px</span> 2<span class="selector-tag">px</span> 6<span class="selector-tag">px</span> <span class="selector-id">#ccc</span>;</div><div class="line"><span class="selector-tag">box-shadow</span><span class="selector-pseudo">:5px</span> 2<span class="selector-tag">px</span> 6<span class="selector-tag">px</span> <span class="selector-id">#ccc</span>;</div></pre></td></tr></table></figure>
<p>四个参数：水平阴影距离，垂直阴影距离，模糊距离，颜色</p>
<h2 id="反射（Reflect）"><a href="#反射（Reflect）" class="headerlink" title="反射（Reflect）"></a>反射（Reflect）</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-webkit-box-reflect</span>: <span class="selector-tag">below</span> 1<span class="selector-tag">px</span>;</div></pre></td></tr></table></figure>
<p>above：<br>指定倒影在对象的上边<br>below：<br>指定倒影在对象的下边<br>left：<br>指定倒影在对象的左边<br>right：<br>指定倒影在对象的右边</p>
<h1 id="Transition-Transform-Animation-Transition"><a href="#Transition-Transform-Animation-Transition" class="headerlink" title="Transition,Transform,Animation Transition"></a>Transition,Transform,Animation Transition</h1><h2 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h2><p> (1)<strong>transition-property</strong>：用于指定过度的性质<br> (2)<strong>transition-duration</strong>：用于指定过度的持续时间<br> (3)<strong>transition-delay</strong>：用于指定延迟过度的时间<br> (4)<strong>transition-timing-function</strong>：用于指定过度类型（ease|linear|ease-in|ease-out|ease-in-out|cubic-bezier）<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-class">.transStart</span> &#123;</div><div class="line">		<span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">		<span class="attribute">-webkit-transition</span>: all .<span class="number">5s</span>;</div><div class="line">		<span class="attribute">-moz-transition</span>: all .<span class="number">5s</span>;</div><div class="line">		<span class="attribute">transition</span>: all .<span class="number">5s</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="selector-class">.transStart</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">		<span class="attribute">background-color</span>: red;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"transDiv"</span> <span class="attr">class</span>=<span class="string">"transStart"</span>&gt;</span> transition <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.transStart</span>&#123;</div><div class="line">	<span class="attribute">-webkit-transition</span>: all .<span class="number">5s</span>;</div><div class="line">	<span class="attribute">-moz-transition</span>: all .<span class="number">5s</span>;</div><div class="line">	<span class="attribute">transition</span>: all .<span class="number">5s</span>;</div><div class="line">	<span class="attribute">width</span>:<span class="number">50px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">50px</span>;</div><div class="line">	<span class="attribute">background</span>:red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.skew</span>&#123; </div><div class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">skew</span>(50deg); </div><div class="line">&#125;</div><div class="line"><span class="selector-class">.scale</span>&#123;</div><div class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(2, 0.5); </div><div class="line">&#125;</div><div class="line"><span class="selector-class">.rotate</span>&#123; </div><div class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(30deg); </div><div class="line">&#125; </div><div class="line"><span class="selector-class">.translate</span>&#123; </div><div class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(50px, 50px); </div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"transDiv"</span> <span class="attr">class</span>=<span class="string">"transStart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p> (1)<strong>skew</strong>：倾斜（角度）<br> (2)<strong>scale</strong>：缩放（横向缩放，纵向缩放）<br> (3)<strong>rotate</strong>：旋转（角度）<br> (4)<strong>translate</strong>：平移（水平距离，纵向距离）</p>
<h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> anim1 &#123;</div><div class="line">	0% &#123;</div><div class="line">		<span class="attribute">Opacity</span>: <span class="number">0</span>;</div><div class="line">		<span class="attribute">Font-size</span>: <span class="number">12px</span>;</div><div class="line">	&#125;</div><div class="line">	100% &#123;</div><div class="line">		<span class="attribute">Opacity</span>: <span class="number">1</span>;</div><div class="line">		<span class="attribute">Font-size</span>: <span class="number">24px</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.anim1Div</span> &#123;</div><div class="line">	<span class="attribute">-webkit-animation-name</span>: anim1;</div><div class="line">	<span class="attribute">-webkit-animation-duration</span>: <span class="number">1.5s</span>;</div><div class="line">	<span class="attribute">-webkit-animation-iteration-count</span>: <span class="number">4</span>;</div><div class="line">	<span class="attribute">-webkit-animation-direction</span>: alternate;</div><div class="line">	<span class="attribute">-webkit-animation-timing-function</span>: ease-in-out;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"anim1Div"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p> (1)<strong>animation-name</strong>：定义动画名字<br> (2)<strong>animation-duration</strong>：定义动画时间<br> (3)<strong>animation-iteration-count</strong>：定义动画次数<br> (4)<strong>animation-direction</strong>：动画执行完一次后方向的变化方式（如第一次从右到左，第二次从左到右）<br> (5)<strong>animation-function</strong>：变化的模式</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS3新特性&lt;br&gt;
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>DOM节点操作</title>
    <link href="http://yoursite.com/2017/04/24/dom/"/>
    <id>http://yoursite.com/2017/04/24/dom/</id>
    <published>2017-04-24T12:34:34.000Z</published>
    <updated>2017-04-24T12:48:38.333Z</updated>
    
    <content type="html"><![CDATA[<p>DOM节点操作<br><a id="more"></a></p>
<h1 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h1><h2 id="document-createElement"><a href="#document-createElement" class="headerlink" title="document.createElement()"></a>document.createElement()</h2><p>document.createElement()方法可以创建新元素，接收一个参数，即要创建元素的标签名，不区分大小写。<br>所有节点都有一个ownerDocument的属性，指向整个文档节点document，使用createElement()方法创建新元素的同时，也为新元素设置了ownerDocument属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line"><span class="built_in">console</span>.log(newDiv); <span class="comment">// &lt;div&gt;</span></div><div class="line"><span class="built_in">console</span>.log(newDiv.ownerDocument); <span class="comment">// document</span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h1><h2 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild()"></a>appendChild()</h2><p>appendChild()方法用于向childNodes列表的末尾添加一个节点，并返回新增节点。添加节点后，childNodes中的新增节点、父节点和以后的最后一个子节点的关系指针都响应地得到更新。<br><em>（PS:如果插入的节点已经是文档的一部分，则将该结果从原来的位置转移到新位置(末尾)）</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newDiv =<span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.body.appendChild(newDiv)); <span class="comment">// &lt;div&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore()"></a>insertBefore()</h2><p>insertBefore()方法接收两个参数：要插入的节点和作为参照的节点。插入节点后，被插入的节点变成参照节点的前一个兄弟节点，并返回新增节点,如果参照节点是null,则插入在末尾。<br><em>（PS:如果插入的节点已经是文档的一部分，则将该结果从原来的位置转移到新位置）</em><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> newDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">	newDiv.innerHTML=<span class="string">'newDiv'</span>;</div><div class="line">	<span class="keyword">var</span> div0 = <span class="built_in">document</span>.getElementById(<span class="string">'div0'</span>);</div><div class="line">	<span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">	<span class="built_in">console</span>.log(div0.insertBefore(newDiv,div1)); <span class="comment">// &lt;div&gt;newDiv&lt;/div&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="insertAfter"><a href="#insertAfter" class="headerlink" title="insertAfter()"></a>insertAfter()</h2><p>由于不存在insertAfter()方法，如果要实现插在当前节点的某个子节点后面，可以用insertBefore()和appendChild()封装。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div0"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> newDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">	newDiv.innerHTML=<span class="string">'newDiv'</span>;</div><div class="line">	<span class="keyword">var</span> div0 = <span class="built_in">document</span>.getElementById(<span class="string">'div0'</span>);</div><div class="line">	<span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">	<span class="built_in">console</span>.log(insertAfter(newDiv,div1)); <span class="comment">// &lt;div&gt;newDiv&lt;/div&gt;</span></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">insertAfter</span>(<span class="params">newElement,targetElement</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> parent = targetElement.parentNode;</div><div class="line">		<span class="keyword">if</span>(parent.lastChild==targetElement)&#123;</div><div class="line">			targetElement.appendChild(newElement);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			parent.insertBefore(newElement,targetElement.nextSibling);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> newElement;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="insertAdjacentHTML"><a href="#insertAdjacentHTML" class="headerlink" title="insertAdjacentHTML()"></a>insertAdjacentHTML()</h2><p>insertAdjacentHTML()方法相当于前三个方法的综合，接收两个参数：插入位置和要插入的HTML文本。<br>第一个参数为下列值之一：</p>
<p><ul><li>beforebegin</li><li>afterbegin</li><li>beforeend</li><li>afterend</li></ul><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'target'</span> <span class="attr">style</span>=<span class="string">"border: 1px solid black;"</span>&gt;</span>This is the element content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>beforebegin<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>afterbegin<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>beforeend<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>afterend<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">4</span>; i++)&#123;</div><div class="line">    btns[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">        target.insertAdjacentHTML(that.innerHTML,<span class="string">'&lt;span id="test"&gt;测试&lt;/span&gt;'</span>)    </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h1><h2 id="removeChild"><a href="#removeChild" class="headerlink" title="removeChild()"></a>removeChild()</h2><p>removeChild()方法接收一个参数，即要移除的节点，并返回被移除的节点。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span>等待移除的节点<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>移除节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    removeChild(myDiv);</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h2><p>直接在要移除的节点使用remove()方法就可以移除该节点，无返回值。<br><em>（PS:可用于删除元素节点和文本节点，但不可用于删除特性节点）</em><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span> <span class="attr">title</span>=<span class="string">'div2'</span>&gt;</span>div2（title=div2）<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span> <span class="attr">title</span>=<span class="string">'div3'</span>&gt;</span>div3（title=div3）<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>remove div1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>remove div2 title<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn3"</span>&gt;</span>remove div3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> btn1=<span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">	<span class="keyword">var</span> btn2=<span class="built_in">document</span>.getElementById(<span class="string">'btn2'</span>);</div><div class="line">	<span class="keyword">var</span> btn3=<span class="built_in">document</span>.getElementById(<span class="string">'btn3'</span>);</div><div class="line">			</div><div class="line">	btn1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">//文本节点</span></div><div class="line">		<span class="built_in">console</span>.log(div1.childNodes[<span class="number">0</span>]); <span class="comment">//'div1'</span></div><div class="line">		div1.childNodes[<span class="number">0</span>].remove();</div><div class="line">	&#125;;</div><div class="line">	btn2.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">//特性节点</span></div><div class="line">		<span class="built_in">console</span>.log(div2.attributes.title); <span class="comment">//'div'</span></div><div class="line">		<span class="comment">//报错，remove()方法无法用于删除特性节点(title节点)</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			div2.attributes[<span class="number">0</span>].remove();</div><div class="line">		&#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">'error'</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	btn3.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">//元素节点</span></div><div class="line">		<span class="built_in">console</span>.log(div3); <span class="comment">// div3</span></div><div class="line">		div3.remove();</div><div class="line">	&#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h1><h2 id="replaceChild"><a href="#replaceChild" class="headerlink" title="replaceChild()"></a>replaceChild()</h2><p>replaceChild()接收两个参数：要插入的节点和要被替换的节点。插入的节点将要被替换的节点替换掉。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>新增节点替换(4替换2)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>原有节点替换(3替换1)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">btn2.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">document</span>.body.replaceChild(div3,div1);</div><div class="line">&#125;</div><div class="line">btn1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> div4 = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">    div4.innerHTML = <span class="string">'4'</span>;</div><div class="line">    <span class="built_in">document</span>.body.replaceChild(div4,div2);</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h1><h2 id="cloneNode"><a href="#cloneNode" class="headerlink" title="cloneNode()"></a>cloneNode()</h2><p>cloneNode()方法用于克隆一个节点。它接收一个布尔值，表示是否深复制。<br>当参数为true时，执行深复制，即复制节点和整个子节点树；<br>当参数为false时，执行浅复制，即只复制节点本身。<br>若参数为空，默认为false。<br><em>(PS:复制的节点不会复制添加到DOM节点中的javascript属性，例如事件处理等，该方法只复制特性和子节点，其它一切都不会复制)</em><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> oList = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</div><div class="line">	oList.index = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> deepList = oList.cloneNode(<span class="literal">true</span>);</div><div class="line">	<span class="comment">//成功复制了子节点</span></div><div class="line">	<span class="built_in">console</span>.log(deepList.children.length);<span class="comment">//6</span></div><div class="line">	<span class="comment">//但并没有复制属性</span></div><div class="line">	<span class="built_in">console</span>.log(deepList.index);<span class="comment">//undefined</span></div><div class="line">	<span class="keyword">var</span> shallowList = oList.cloneNode();</div><div class="line">	<span class="comment">//浅复制不复制子节点</span></div><div class="line">	<span class="built_in">console</span>.log(shallowList.children.length);<span class="comment">//0</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DOM节点操作&lt;br&gt;
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>HTML5</title>
    <link href="http://yoursite.com/2017/04/24/html5/"/>
    <id>http://yoursite.com/2017/04/24/html5/</id>
    <published>2017-04-24T12:30:23.000Z</published>
    <updated>2017-04-24T12:33:49.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML5-新特性"><a href="#HTML5-新特性" class="headerlink" title="HTML5 新特性"></a>HTML5 新特性</h1><a id="more"></a>
<h2 id="1-语义特性"><a href="#1-语义特性" class="headerlink" title="1.语义特性"></a>1.语义特性</h2><p>HTML5 赋予网页更好的意义和结构</p>
<h2 id="2-本地存储特性"><a href="#2-本地存储特性" class="headerlink" title="2.本地存储特性"></a>2.本地存储特性</h2><p>基于HTML5开发的网页APP拥有更短的启动时间，更快的联网速度，这些得益于HTML5 APP Cache，以及本地存储功能。</p>
<h2 id="3-设备访问特性"><a href="#3-设备访问特性" class="headerlink" title="3.设备访问特性"></a>3.设备访问特性</h2><p>从Geolocation功能的API文档公开以来，HTML5为网页应用开发者们提供了更多功能上的优化选择，带来了更多体验功能的优势。<br>HTML5提供了前所未有的数据与应用接入开放接口。使外部应用可以直接与浏览器内部的数据直接相连，例如视频影音可直接与microphones及摄像头相连。</p>
<h2 id="4-连接特性"><a href="#4-连接特性" class="headerlink" title="4.连接特性"></a>4.连接特性</h2><p>更有效的连接工作效率，使得基于页面的实时聊天，更快速的网页游戏体验，更优化的在线交流得到了实现。<br>HTML5拥有更有效的服务器推送技术，Server-Sent Event和WebSockets就是其中的两个特性，这两个特效那个能够帮助我们实现服务器将数据“推送”到客户端的功能。</p>
<h2 id="5-网页多媒体特性"><a href="#5-网页多媒体特性" class="headerlink" title="5.网页多媒体特性"></a>5.网页多媒体特性</h2><p>支持网页端的Audio、Video等多媒体功能，与网站自带的APPS、摄像头、影音功能相得益彰。</p>
<h2 id="6-三维、图像及特效特性"><a href="#6-三维、图像及特效特性" class="headerlink" title="6.三维、图像及特效特性"></a>6.三维、图像及特效特性</h2><p>基于SVG、Canvas、WebGL及CSS3的3D功能，用户会惊叹于在浏览器中，所呈现的惊人视觉效果。</p>
<h2 id="7-性能与集成特性"><a href="#7-性能与集成特性" class="headerlink" title="7.性能与集成特性"></a>7.性能与集成特性</h2><p>HTML5通过XMLHttpRequest2等技术，解决以前的跨域等问题，帮助Web应用和网站在多样化的环境中更快速地工作。</p>
<hr>
<h1 id="HTML5-新增元素"><a href="#HTML5-新增元素" class="headerlink" title="HTML5 新增元素"></a>HTML5 新增元素</h1><h2 id="新图形绘制元素"><a href="#新图形绘制元素" class="headerlink" title="新图形绘制元素"></a>新图形绘制元素</h2><table>
<thead>
<tr>
<th style="text-align:center">标签</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">canvas</td>
<td style="text-align:left">定义图形，比如图标和其它图像。该标签基于JavaScript的绘图API</td>
</tr>
</tbody>
</table>
<h2 id="新多媒体元素"><a href="#新多媒体元素" class="headerlink" title="新多媒体元素"></a>新多媒体元素</h2><table>
<thead>
<tr>
<th style="text-align:center">标签</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">audio</td>
<td style="text-align:left">定义音频内容</td>
</tr>
<tr>
<td style="text-align:center">vedio</td>
<td style="text-align:left">定义视频内容</td>
</tr>
<tr>
<td style="text-align:center">source</td>
<td style="text-align:left">定义多媒体资源（audio或vedio）</td>
</tr>
<tr>
<td style="text-align:center">embed</td>
<td style="text-align:left">定义嵌入的内容，比如插件</td>
</tr>
<tr>
<td style="text-align:center">track</td>
<td style="text-align:left">为如vedio或audio元素之类的媒体规定外部文本轨道</td>
</tr>
</tbody>
</table>
<h2 id="新的表单元素"><a href="#新的表单元素" class="headerlink" title="新的表单元素"></a>新的表单元素</h2><h3 id="datalist-规定输入域的选项列表，可以与input搭配使用，input的list属性值与datalist的id值保持一致。"><a href="#datalist-规定输入域的选项列表，可以与input搭配使用，input的list属性值与datalist的id值保持一致。" class="headerlink" title="datalist : 规定输入域的选项列表，可以与input搭配使用，input的list属性值与datalist的id值保持一致。"></a>datalist : 规定输入域的选项列表，<em>可以与input搭配使用</em>，input的list属性值与datalist的id值保持一致。</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/example/html5/demo_form.asp"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">			Webpage: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span> <span class="attr">list</span>=<span class="string">"url_list"</span> <span class="attr">name</span>=<span class="string">"link"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"url_list"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"W3School"</span> <span class="attr">value</span>=<span class="string">"http://www.w3school.com.cn"</span> /&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"Google"</span> <span class="attr">value</span>=<span class="string">"http://www.google.com"</span> /&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"Microsoft"</span> <span class="attr">value</span>=<span class="string">"http://www.microsoft.com"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="keygen-提供一种验证用户的可靠方法。"><a href="#keygen-提供一种验证用户的可靠方法。" class="headerlink" title="keygen : 提供一种验证用户的可靠方法。"></a>keygen : 提供一种验证用户的可靠方法。</h3><p>keygen 元素是密钥对生成器（key-pair generator）。当提交表单时，会生成两个键，一个是私钥，一个公钥。<br>私钥（private key）存储于客户端，公钥（public key）则被发送到服务器。公钥可用于之后验证用户的客户端证书（client certificate）。<br>目前，浏览器对此元素的糟糕的支持度不足以使其成为一种有用的安全标准。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/example/html5/demo_form.asp"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">keygen</span> <span class="attr">name</span>=<span class="string">"security"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="output-用于不同类型的输出，比如计算或脚本输出。"><a href="#output-用于不同类型的输出，比如计算或脚本输出。" class="headerlink" title="output : 用于不同类型的输出，比如计算或脚本输出。"></a>output : 用于不同类型的输出，比如计算或脚本输出。</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">resCalc</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				numA=<span class="built_in">document</span>.getElementById(<span class="string">"num_a"</span>).value;</div><div class="line">				numB=<span class="built_in">document</span>.getElementById(<span class="string">"num_b"</span>).value;</div><div class="line">				<span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).value=<span class="built_in">Number</span>(numA)+<span class="built_in">Number</span>(numB);</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>使用 output 元素的简易计算器：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">"return false"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"num_a"</span> /&gt;</span> +</div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"num_b"</span> /&gt;</span> =</div><div class="line">			<span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">"result"</span> <span class="attr">onforminput</span>=<span class="string">"resCalc()"</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="新的语义和结构元素"><a href="#新的语义和结构元素" class="headerlink" title="新的语义和结构元素"></a>新的语义和结构元素</h2><table>
<thead>
<tr>
<th style="text-align:center">标签</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">article</td>
<td style="text-align:left">定义页面独立的内容区域</td>
</tr>
<tr>
<td style="text-align:center">aside</td>
<td style="text-align:left">标签定义 article 以外的内容</td>
</tr>
<tr>
<td style="text-align:center">bdi</td>
<td style="text-align:left">设置一段文本，使其脱离其父元素的文本方向设置</td>
</tr>
<tr>
<td style="text-align:center">command</td>
<td style="text-align:left">定义命令按钮，比如单选按钮、复选框或按钮。</td>
</tr>
<tr>
<td style="text-align:center">details</td>
<td style="text-align:left">用于描述文档或文档某个部分的细节</td>
</tr>
<tr>
<td style="text-align:center">summary</td>
<td style="text-align:left">定义 details 元素的标题</td>
</tr>
<tr>
<td style="text-align:center">dialog</td>
<td style="text-align:left">定义对话框，如提示框</td>
</tr>
<tr>
<td style="text-align:center">figure</td>
<td style="text-align:left">规定独立的流内容（图像、图标、照片、代码等）</td>
</tr>
<tr>
<td style="text-align:center">figcaption</td>
<td style="text-align:left">定义 figure 元素的标题</td>
</tr>
<tr>
<td style="text-align:center">footer</td>
<td style="text-align:left">定义section 或 document 的页脚</td>
</tr>
<tr>
<td style="text-align:center">header</td>
<td style="text-align:left">定义文档的头部区域</td>
</tr>
<tr>
<td style="text-align:center">hgroup</td>
<td style="text-align:left">用于对网页或区段（section）的标题进行组合</td>
</tr>
<tr>
<td style="text-align:center">mark</td>
<td style="text-align:left">定义带有记号的文本</td>
</tr>
<tr>
<td style="text-align:center">meter</td>
<td style="text-align:left">通过min=”0” max=”20”的方式定义度量衡。仅用于已知最大和最小值的度量</td>
</tr>
<tr>
<td style="text-align:center">nav</td>
<td style="text-align:left">定义导航链接</td>
</tr>
<tr>
<td style="text-align:center">progress</td>
<td style="text-align:left">定义任何类型的任务的进度</td>
</tr>
<tr>
<td style="text-align:center">ruby</td>
<td style="text-align:left">定义ruby注释（中文注音或字符）</td>
</tr>
<tr>
<td style="text-align:center">rt</td>
<td style="text-align:left">定义字符的解释或发音</td>
</tr>
<tr>
<td style="text-align:center">rp</td>
<td style="text-align:left">在ruby注释中使用，定义不支持ruby元素的浏览器所显示的内容</td>
</tr>
<tr>
<td style="text-align:center">section</td>
<td style="text-align:left">标签定义文档中的节、区段。比如章节、页眉、页脚或文档中的其他部分</td>
</tr>
<tr>
<td style="text-align:center">time</td>
<td style="text-align:left">定义日期或时间</td>
</tr>
<tr>
<td style="text-align:center">wbr</td>
<td style="text-align:left">规定在文本中的何处适合添加换行符</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="HTML5-移除元素"><a href="#HTML5-移除元素" class="headerlink" title="HTML5 移除元素"></a>HTML5 移除元素</h1><table>
<thead>
<tr>
<th style="text-align:center">标签</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">acronym</td>
</tr>
<tr>
<td style="text-align:center">applet</td>
</tr>
<tr>
<td style="text-align:center">basefont</td>
</tr>
<tr>
<td style="text-align:center">big</td>
</tr>
<tr>
<td style="text-align:center">center</td>
</tr>
<tr>
<td style="text-align:center">dir</td>
</tr>
<tr>
<td style="text-align:center">font</td>
</tr>
<tr>
<td style="text-align:center">frame</td>
</tr>
<tr>
<td style="text-align:center">frameset</td>
</tr>
<tr>
<td style="text-align:center">noframes</td>
</tr>
<tr>
<td style="text-align:center">strike</td>
</tr>
<tr>
<td style="text-align:center">tt</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="HTML5新标签兼容"><a href="#HTML5新标签兼容" class="headerlink" title="HTML5新标签兼容"></a>HTML5新标签兼容</h1><h2 id="方法一：创建新标签"><a href="#方法一：创建新标签" class="headerlink" title="方法一：创建新标签"></a>方法一：创建新标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> e = <span class="string">"abbr, article, aside, audio, canvas, datalist, details, dialog,eventsource,figure,footer,header,hgroup,mark,menu,meter,nav,output,progress,section,time,video"</span>.split(<span class="string">','</span>);</div><div class="line">		<span class="keyword">var</span> len=e.length;</div><div class="line">		<span class="keyword">while</span>(len--)&#123;</div><div class="line">			<span class="built_in">document</span>.createElement(e[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;)();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="方法二：使用框架"><a href="#方法二：使用框架" class="headerlink" title="方法二：使用框架"></a>方法二：使用框架</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></div><div class="line">&lt;script&gt; src="http://html5shim.googlecode.com/svn/trunk/html5.js"&lt;/script&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML5-新特性&quot;&gt;&lt;a href=&quot;#HTML5-新特性&quot; class=&quot;headerlink&quot; title=&quot;HTML5 新特性&quot;&gt;&lt;/a&gt;HTML5 新特性&lt;/h1&gt;
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>HTTP</title>
    <link href="http://yoursite.com/2017/04/24/http/"/>
    <id>http://yoursite.com/2017/04/24/http/</id>
    <published>2017-04-24T12:26:39.000Z</published>
    <updated>2017-04-24T12:49:11.251Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP协议<br><a id="more"></a></p>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p>HTTP协议（Hyper Text Transfer Protocol，超文本传输协议）,<br>是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。<br>HTTP基于TCP/IP通信协议来传递数据。HTTP基于客户端/服务端（C/S）架构模型，通过一个可靠的链接来交换信息，是一个<strong>无状态</strong>的请求/响应协议。</p>
<hr>
<h1 id="2-特点"><a href="#2-特点" class="headerlink" title="2.特点"></a>2.特点</h1><p>（1）HTTP是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。<br>（2）HTTP是媒体独立的：只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。<br>（3）HTTP是无状态：无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p>
<hr>
<h1 id="3-通信流程"><a href="#3-通信流程" class="headerlink" title="3.通信流程"></a>3.通信流程</h1><p><img src="/uploads/http.gif" alt="Alt text"></p>
<hr>
<h1 id="4-消息结构"><a href="#4-消息结构" class="headerlink" title="4.消息结构"></a>4.消息结构</h1><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。一旦建立连接后，数据消息就通过类似Internet邮件所使用的格式[RFC5322]和多用途Internet邮件扩展（MIME）[RFC2045]来传送。</p>
<p>客户端请求消息：请求行、请求头部、空行和请求数据。（requset）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET /hello.txt HTTP/1.1          </div><div class="line">User-Agent: curl/7.16.3 libcurl/7.16.3          </div><div class="line">OpenSSL/0.9.7l zlib/1.2.3          </div><div class="line">Host: www.example.com Accept-Language: en, mi</div></pre></td></tr></table></figure>
<p>服务端响应消息：状态行、消息报头、空行和响应正文。（response）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK         </div><div class="line">Date: Mon, 27 Jul 2009 12:28:53 GMT         </div><div class="line">Server: Apache</div><div class="line">Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT         </div><div class="line">ETag: "34aa387-d-1568eb00"         </div><div class="line">Accept-Ranges: bytes         </div><div class="line">Content-Length: 51         </div><div class="line">Vary: Accept-Encoding         </div><div class="line">Content-Type: text/plain</div></pre></td></tr></table></figure>
<hr>
<h1 id="5-请求方法"><a href="#5-请求方法" class="headerlink" title="5.请求方法"></a>5.请求方法</h1><p>GET 请求指定的页面信息，并返回实体主体。<br>HEAD    类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头<br>POST  向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。<br>PUT 从客户端向服务器传送的数据取代指定的文档的内容。<br>DELETE  请求服务器删除指定的页面。<br>CONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。<br>OPTIONS 允许客户端查看服务器的性能。<br>TRACE   回显服务器收到的请求，主要用于测试或诊断。</p>
<h1 id="6-状态码"><a href="#6-状态码" class="headerlink" title="6.状态码"></a>6.状态码</h1><p>HTTP状态码分类<br>1** 信息，服务器收到请求，需要请求者继续执行操作<br>2** 成功，操作被成功接收并处理<br>3** 重定向，需要进一步的操作以完成请求<br>4** 客户端错误，请求包含语法错误或无法完成请求<br>5** 服务器错误，服务器在处理请求的过程中发生了错<br>HTTP状态码列表<br>100 Continue    继续。客户端应继续其请求<br>101 Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议<br>200 OK  请求成功。一般用于GET与POST请求<br>201 Created 已创建。成功请求并创建了新的资源<br>202 Accepted    已接受。已经接受请求，但未处理完成<br>203 Non-Authoritative Information   非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本<br>204 No Content  无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档<br>205 Reset Content   重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域<br>206 Partial Content 部分内容。服务器成功处理了部分GET请求<br>300 Multiple Choices    多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择<br>301 Moved Permanently   永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替<br>302 Found   临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI<br>303 See Other   查看其它地址。与301类似。使用GET和POST请求查看<br>304 Not Modified    未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源<br>305 Use Proxy   使用代理。所请求的资源必须通过代理访问<br>306 Unused  已经被废弃的HTTP状态码<br>307 Temporary Redirect  临时重定向。与302类似。使用GET请求重定向<br>400 Bad Request 客户端请求的语法错误，服务器无法理解<br>401 Unauthorized    请求要求用户的身份认证<br>402 Payment Required    保留，将来使用<br>403 Forbidden   服务器理解请求客户端的请求，但是拒绝执行此请求<br>404 Not Found   服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面<br>405 Method Not Allowed  客户端请求中的方法被禁止<br>406 Not Acceptable  服务器无法根据客户端请求的内容特性完成请求<br>407 Proxy Authentication Required   请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权<br>408 Request Time-out    服务器等待客户端发送的请求时间过长，超时<br>409 Conflict    服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突<br>410 Gone    客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置<br>411 Length Required 服务器无法处理客户端发送的不带Content-Length的请求信息<br>412 Precondition Failed 客户端请求信息的先决条件错误<br>413 Request Entity Too Large    由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息<br>414 Request-URI Too Large   请求的URI过长（URI通常为网址），服务器无法处理<br>415 Unsupported Media Type  服务器无法处理请求附带的媒体格式<br>416 Requested range not satisfiable 客户端请求的范围无效<br>417 Expectation Failed  服务器无法满足Expect的请求头信息<br>500 Internal Server Error   服务器内部错误，无法完成请求<br>501 Not Implemented 服务器不支持请求的功能，无法完成请求<br>502 Bad Gateway 充当网关或代理的服务器，从远端服务器接收到了一个无效的请求<br>503 Service Unavailable 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中<br>504 Gateway Time-out    充当网关或代理的服务器，未及时从远端服务器获取请求<br>505 HTTP Version not supported  服务器不支持请求的HTTP协议的版本，无法完成处理</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTP协议&lt;br&gt;
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>两栏布局</title>
    <link href="http://yoursite.com/2017/04/23/two-column-layout/"/>
    <id>http://yoursite.com/2017/04/23/two-column-layout/</id>
    <published>2017-04-23T07:54:32.000Z</published>
    <updated>2017-04-23T08:45:29.134Z</updated>
    
    <content type="html"><![CDATA[<p>两栏布局，左侧固定宽度，右侧自适应大小<br><a id="more"></a></p>
<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">*&#123;</div><div class="line">	<span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">	<span class="attribute">background</span>:<span class="number">#ccc</span>;</div><div class="line">	<span class="attribute">float</span>:left;</div><div class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">	<span class="attribute">background</span>:<span class="number">#bbb</span>;</div><div class="line">	<span class="attribute">margin-left</span>:<span class="number">120px</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>左侧向左浮动，固定于左侧，<br>右侧用margin-left撑开距离。（与方法二类似）</p>
<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">* &#123;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">background</span>:<span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">120px</span>;</div><div class="line">	<span class="attribute">background</span>:<span class="number">#eee</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>左侧采用绝对定位，固定于左侧，<br>右侧用margin-left撑开距离。（与方法一类似）</p>
<h1 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">*&#123;</div><div class="line">	<span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">	<span class="attribute">background</span>:<span class="number">#ccc</span>;</div><div class="line">	<span class="attribute">float</span>:left;</div><div class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">	<span class="attribute">margin-right</span>:<span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">	<span class="attribute">background</span>:<span class="number">#bbb</span>;</div><div class="line">	<span class="attribute">overflow</span>:hidden;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>给右侧添加overflow:hidden，触发BFC，内部元素的布局不受外面布局的影响<br>可以通过以下任何一种方式创建BFC</p>
<ol>
<li>float的值不为 none</li>
<li>position的值不为static 或 relative</li>
<li>display 的值为 table-cell , table-caption , inline-block , flex 或 inline-flex 的其中一个</li>
<li>overflow 的值不为 visible</li>
</ol>
<h1 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">*&#123;</div><div class="line">	<span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">	<span class="attribute">background</span>:<span class="number">#ccc</span>;</div><div class="line">	<span class="attribute">float</span>:left;</div><div class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">	<span class="attribute">margin-right</span>: -<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">	<span class="attribute">float</span>:left;</div><div class="line">	<span class="attribute">width</span>:<span class="number">100%</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main</span>&#123;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">	<span class="attribute">background</span>:<span class="number">#bbb</span>;</div><div class="line">	<span class="attribute">margin-left</span>:<span class="number">120px</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>左侧设置margin-right:-100%，<br>右侧用双层标签，外层div宽度100%，并浮动，内层div为真正的主题内容内含margin-left:120px。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;两栏布局，左侧固定宽度，右侧自适应大小&lt;br&gt;
    
    </summary>
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="http://yoursite.com/2017/04/03/sort/"/>
    <id>http://yoursite.com/2017/04/03/sort/</id>
    <published>2017-04-03T13:55:07.000Z</published>
    <updated>2017-04-05T06:09:07.101Z</updated>
    
    <content type="html"><![CDATA[<p><em>记录几种排序算法</em><br><a id="more"></a></p>
<h1 id="交换排序-冒泡排序-BubbleSort"><a href="#交换排序-冒泡排序-BubbleSort" class="headerlink" title="交换排序 - 冒泡排序  ( BubbleSort )"></a>交换排序 - 冒泡排序  ( BubbleSort )</h1><p>思路：重复遍历数组，每次比较相邻的两个数字，如果位置错误就互相交换，每一次遍历将最大的数放到后面。<br>时间复杂度：<strong>O(N<sup>2</sup>)</strong>。<br>最好情况：元素本来就是正序的，仅需一趟冒泡排序就可以完成排序工作，时间复杂度为 <strong>O(N)</strong>。<br>最差情况：元素本来就是逆序的，则需进行<strong>n-1</strong>趟冒泡排序，时间复杂度为 <strong>O(N<sup>2</sup>)</strong>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">BubbleSort</span>(<span class="params">A</span>) </span>&#123;</div><div class="line">	<span class="comment">// 判断是否在最好的情况下</span></div><div class="line">	<span class="keyword">var</span> flag = <span class="literal">false</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; A.length - <span class="number">1</span>; i++) &#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; A.length - i; j++) &#123;</div><div class="line">			<span class="keyword">if</span>(A[j] &lt; A[j - <span class="number">1</span>]) &#123;</div><div class="line">				<span class="keyword">var</span> temp = A[j];</div><div class="line">				A[j] = A[j - <span class="number">1</span>];</div><div class="line">				A[j - <span class="number">1</span>] = temp;</div><div class="line">				flag = <span class="literal">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 如果在最好的情况下则循环一次即可跳出循环</span></div><div class="line">		<span class="keyword">if</span>(flag == <span class="literal">false</span>)&#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> A;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> array = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> result = BubbleSort(array);</div><div class="line"><span class="built_in">console</span>.log(result);</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="交换排序-快速排序-QuickSort"><a href="#交换排序-快速排序-QuickSort" class="headerlink" title="交换排序 - 快速排序  ( QuickSort )"></a>交换排序 - 快速排序  ( QuickSort )</h1><p>思路：找一个基准数，将整个数组比基准数小的放到基准数前面，比基准数大的放到基准数后面，然后将前面的数和后面的数递归调用。<br>时间复杂度：<strong>O(N*log<sub>2</sub>N)</strong>。<br>最好情况：每次划分得很均匀，时间复杂度为 <strong>O(N*log<sub>2</sub>N)</strong>。<br>最坏情况：元素为正序或逆序的，每次划分只能得到比上一次划分少一个记录的子序列，时间复杂度为 <strong>O(N<sup>2</sup>)</strong>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">QuickSort</span>(<span class="params">A, l, r</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>(l &lt; r) &#123;</div><div class="line">		<span class="keyword">var</span> i = l,</div><div class="line">			j = r,</div><div class="line">			jizhun = A[l]; <span class="comment">// 设置基准数为第一个数字</span></div><div class="line">		<span class="keyword">while</span>(i &lt; j) &#123;</div><div class="line">			<span class="comment">// 从右向左找第一个小于基准数的数</span></div><div class="line">			<span class="keyword">while</span>(i &lt; j &amp;&amp; A[j] &gt;= jizhun) &#123;</div><div class="line">				j--;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(i &lt; j) &#123;</div><div class="line">				A[i] = A[j];</div><div class="line">				i++;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 从左向右找第一个大于基准数的数</span></div><div class="line">			<span class="keyword">while</span>(i &lt; j &amp;&amp; A[i] &lt; jizhun) &#123;</div><div class="line">				i++;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(i &lt; j) &#123;</div><div class="line">				A[j]=A[i];</div><div class="line">				j--;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 此时i=j</span></div><div class="line">		A[i]=jizhun;</div><div class="line">		QuickSort(A,l,i<span class="number">-1</span>);</div><div class="line">		QuickSort(A,i+<span class="number">1</span>,r);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> A;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> array = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> result = QuickSort(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</div><div class="line"><span class="built_in">console</span>.log(result);</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="插入排序-直接插入排序-InsertionSort"><a href="#插入排序-直接插入排序-InsertionSort" class="headerlink" title="插入排序 - 直接插入排序 ( InsertionSort )"></a>插入排序 - 直接插入排序 ( InsertionSort )</h1><p>思路：从第二个元素开始逐个插入前面已经排序好了的数列。<br>时间复杂度：<strong>O(N<sup>2</sup>)</strong>。<br>最优情况：元素本来就是正序的，每次只需比较一次，时间复杂度为 <strong>O(N)</strong>。<br>最差情况：元素本来就是逆序的，比较次数是<strong>1+2+3+…+(N-1)</strong>，时间复杂度为 <strong>O(N<sup>2</sup>)</strong>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">InsertionSort</span>(<span class="params">A</span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; A.length; i++) &#123;</div><div class="line">		<span class="comment">// 记录要插入的数</span></div><div class="line">		<span class="keyword">var</span> temp = A[i];</div><div class="line">		<span class="comment">// 从要插入的数往前遍历，找到插入的位置</span></div><div class="line">		<span class="keyword">var</span> j = i - <span class="number">1</span>;</div><div class="line">		<span class="keyword">while</span>(A[j] &gt; temp &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</div><div class="line">			A[j + <span class="number">1</span>] = A[j];</div><div class="line">			j--;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// j+1 为插入的位置</span></div><div class="line">		A[j + <span class="number">1</span>] = temp;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> A;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> array = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> result = InsertionSort(array);</div><div class="line"><span class="built_in">console</span>.log(result);</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="插入排序-希尔排序-ShellSort"><a href="#插入排序-希尔排序-ShellSort" class="headerlink" title="插入排序 - 希尔排序 ( ShellSort )"></a>插入排序 - 希尔排序 ( ShellSort )</h1><p>思路：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。<br>时间复杂度：<strong>O(N*log<sub>2</sub>N)</strong>。<br>最优情况：元素本来就是正序的，时间复杂度为 <strong>O(N)</strong>。<br>最差情况：元素本来就是逆序的，时间复杂度为 <strong>O(N<sup>2</sup>)</strong>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ShellSort</span>(<span class="params">A</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> gap = <span class="built_in">parseInt</span>(A.length / <span class="number">2</span>);</div><div class="line">	<span class="keyword">while</span>(gap &gt;= <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i = gap; i &lt; A.length; i++) &#123;</div><div class="line">			<span class="keyword">var</span> j = i - gap;</div><div class="line">			<span class="keyword">var</span> temp = A[i];</div><div class="line">			<span class="keyword">while</span>(A[j] &gt; temp &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</div><div class="line">				A[j + gap] = A[j];</div><div class="line">				j = j - gap;</div><div class="line">			&#125;</div><div class="line">			A[j + gap] = temp;</div><div class="line">		&#125;</div><div class="line">		gap = <span class="built_in">parseInt</span>(gap / <span class="number">2</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> A;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="选择排序-直接选择-SelectSort"><a href="#选择排序-直接选择-SelectSort" class="headerlink" title="选择排序 - 直接选择  ( SelectSort )"></a>选择排序 - 直接选择  ( SelectSort )</h1><p>思路：每次寻找数组中最小的值，然后放在前面。<br>时间复杂度：<strong>O(N<sup>2</sup>)</strong>。<br>最好情况：元素本来就是正序的，交换次数为<strong>0</strong>，时间复杂度为 <strong>O(N<sup>2</sup>)</strong>。<br>最坏情况：元素本来就是逆序的，交换次数为<strong>n-1</strong>，时间复杂度为 <strong>O(N<sup>2</sup>)</strong>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SelectSort</span>(<span class="params">A</span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; A.length - <span class="number">1</span>; i++) &#123;</div><div class="line">		<span class="keyword">var</span> k = i;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; A.length; j++) &#123;</div><div class="line">			<span class="keyword">if</span>(A[k] &gt; A[j]) &#123;</div><div class="line">				k = j;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">var</span> temp = A[i];</div><div class="line">		A[i] = A[k];</div><div class="line">		A[k] = temp;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> A;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> array = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> result = SelectSort(array);</div><div class="line"><span class="built_in">console</span>.log(result);</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h1><blockquote>
<p>表示两个值相同的元素在排序前后是否有位置变化，如果前后位置变化，则排列算法是不稳定的，否则是稳定的。两个值相同的元素无需再次交换位置，交换位置相当于做了一次无用功。</p>
</blockquote>
<p>(1)冒泡排序<br>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，我想你是不会再无聊地把他们俩交换一下的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。</p>
<p>(2)选择排序<br>选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n - 1个元素，第n个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。</p>
<p>(3)插入排序<br>插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。当然，刚开始这个有序的小序列只有1个元素，就是第一个元素。比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。</p>
<p>(4)快速排序<br>快速排序有两个方向，左边的i下标一直往右走，当a[i] &lt;= a[center_index]，其中center_index是中枢元素的数组下标，一般取为数组第0个元素。而右边的j下标一直往左走，当a[j] &gt; a[center_index]。如果i和j都走不动了，i &lt;= j，交换a[i]和a[j],重复上面的过程，直到i &gt; j。 交换a[j]和a[center_index]，完成一趟快速排序。在中枢元素和a[j]交换的时候，很有可能把前面的元素的稳定性打乱，比如序列为5 3 3 4 3 8 9 10 11，现在中枢元素5和3（第5个元素，下标从1开始计）交换就会把元素3的稳定性打乱，所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和a[j] 交换的时刻。</p>
<p>(5)归并排序<br>归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素（认为直接有序）或者2个序列（1次比较和交换），然后把各个有序的段序列合并成一个有序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。</p>
<p>(6)基数排序<br>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序，最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以其是稳定的排序算法。</p>
<p>(7)希尔排序(shell)<br>希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小， 插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比O(N<sup>2</sup>)好一些。由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以shell排序是不稳定的。</p>
<p>(8)堆排序<br>我们知道堆的结构是节点i的孩子为2 <em> i和2 </em> i + 1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n / 2开始和其子节点共3个值选择最大（大顶堆）或者最小（小顶堆），这3个元素之间的选择当然不会破坏稳定性。但当为n / 2 - 1， n / 2 - 2， … 1这些个父节点选择元素时，就会破坏稳定性。有可能第n / 2个父节点交换把后面一个元素交换过去了，而第n / 2 - 1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。</p>
<p>综上，得出结论: 选择排序、快速排序、希尔排序、堆排序不是稳定的排序算法，而冒泡排序、插入排序、归并排序和基数排序是稳定的排序算法</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;记录几种排序算法&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="sort" scheme="http://yoursite.com/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装Nodejs</title>
    <link href="http://yoursite.com/2017/03/28/linux-nodejs/"/>
    <id>http://yoursite.com/2017/03/28/linux-nodejs/</id>
    <published>2017-03-28T14:00:07.000Z</published>
    <updated>2017-03-28T14:10:28.603Z</updated>
    
    <content type="html"><![CDATA[<p>服务器从Windows换到Linux， = =！！！，所有环境全部重装。<br><a id="more"></a></p>
<p>先在本机到<a href="http://nodejs.cn/download/" target="_blank" rel="external">Node.js官网</a>下载Linux版的Node.js，32位、64位看清楚下载。</p>
<p>这里借助<a href="https://filezilla-project.org/" target="_blank" rel="external">FileZilla</a>工具，把下载好的压缩包上传到Linux服务器上。<br>（PS：具体怎么传自行百度哈）</p>
<p>Linux服务器上，在命令行输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar -xvf nodejs.tar.gz // 解压。</div><div class="line">cd nodejs // 进入nodejs文件夹</div><div class="line">node -v // 查看版本</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;服务器从Windows换到Linux， = =！！！，所有环境全部重装。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 爬虫小程序</title>
    <link href="http://yoursite.com/2017/03/17/spider/"/>
    <id>http://yoursite.com/2017/03/17/spider/</id>
    <published>2017-03-17T13:09:55.000Z</published>
    <updated>2017-03-17T14:08:45.342Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>学习了Node.js后就照网上的教程，改编成爬取 <strong><a href="http://www.szpt.edu.cn/szyw/szyw/index.shtml" target="_blank" rel="external">深圳职业技术学院官网</a></strong> 的新闻数据和图片。</p>
</blockquote>
<a id="more"></a>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>首先说下思路，登录<a href="http://www.szpt.edu.cn/szyw/szyw/index.shtml" target="_blank" rel="external">官网</a>后，每一篇新闻都有独一的链接，我们要做的就是进行一次请求，通过对网页的分析，将链接提取出来，然后再进行一次请求，爬取文章的内容和图片。</p>
<hr>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p><a href="http://nodejs.cn/download/" target="_blank" rel="external">下载地址</a></p>
<h2 id="建立工程"><a href="#建立工程" class="headerlink" title="建立工程"></a>建立工程</h2><p>（1）在要创建项目的路径创建文件夹 cyb_spider;</p>
<p>（2）在该目录下创建data文件夹（存放新闻）、image文件夹（存放图片）、spider.js文件;</p>
<p>（3）打开<strong>cmd</strong>进入该目录;</p>
<p>（4）npm init （初始化工程），一路回车即可，因为Node.js自带npm，所以无需专门去下载;</p>
<p>（5）安装第三方包<br>npm install cheerio --save<br>cheerio 以一种类似jQuery的方式处理爬取的网页</p>
<p>npm install request --save<br>request 简化http请求</p>
<p>npm install iconv-lite --save<br>iconv-lite 将gbk编码的网页转变为utf-8</p>
<p>--save是为了将项目对包的依赖写入package.json文件中</p>
<p>整个工程的目录结构为<br><img src="/uploads/node.js/1.png" alt="目录"></p>
<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><strong>准备工作大功告成，下面上代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取模块</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line">	fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">	cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>),</div><div class="line">	request = <span class="built_in">require</span>(<span class="string">'request'</span>),</div><div class="line">	iconv = <span class="built_in">require</span>(<span class="string">'iconv-lite'</span>),</div><div class="line">	url = <span class="string">'http://www.szpt.edu.cn/szyw/szyw/index.shtml'</span>; <span class="comment">// 官网url</span></div><div class="line"></div><div class="line"><span class="comment">// 先爬取首页</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pcindex</span>(<span class="params">url,request,response</span>)</span>&#123;</div><div class="line">	<span class="comment">// 用 http 模块向服务器发起一次 get 请求</span></div><div class="line">	http.get(url,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">		<span class="comment">// 存储请求网页的完整 html 内容</span></div><div class="line">		<span class="keyword">var</span> html = <span class="string">''</span>;</div><div class="line">		res.setEncoding(<span class="string">'binary'</span>);</div><div class="line">		</div><div class="line">		<span class="comment">// 监听 data 事件，获取网页内容</span></div><div class="line">		res.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">			html+=data;</div><div class="line">		&#125;);</div><div class="line">		</div><div class="line">		<span class="comment">// 监听 end 事件，当网页完整获取完毕，就执行该函数</span></div><div class="line">		res.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer(html,<span class="string">'binary'</span>);</div><div class="line">			html = iconv.decode(buf,<span class="string">'GBK'</span>);</div><div class="line">			</div><div class="line">			<span class="comment">// 解析html</span></div><div class="line">			<span class="keyword">var</span> $ = cheerio.load(html);</div><div class="line">			</div><div class="line">			<span class="comment">// 获取标题</span></div><div class="line">			<span class="keyword">var</span> title = $(<span class="string">'.news_list li .title a'</span>);</div><div class="line">			<span class="comment">// 获取时间</span></div><div class="line">			<span class="keyword">var</span> date = $(<span class="string">'.news_list li .data'</span>);</div><div class="line">			</div><div class="line">			<span class="comment">// 对 title 进行遍历</span></div><div class="line">			title.each(<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;</div><div class="line">				<span class="comment">// 将标题和时间打印在网页上</span></div><div class="line">				response.write(<span class="string">'标题：'</span>+$(<span class="keyword">this</span>).text()+<span class="string">'\n'</span>);</div><div class="line">				response.write(<span class="string">'时间：'</span>+date[i].children[<span class="number">0</span>].data+<span class="string">'\n'</span>);</div><div class="line">				<span class="comment">// 获取文章的链接</span></div><div class="line">				<span class="keyword">var</span> link = $(<span class="keyword">this</span>).attr(<span class="string">'href'</span>);</div><div class="line">				<span class="comment">// 对文章进行再次爬取</span></div><div class="line">				pc(<span class="string">'http://www.szpt.edu.cn'</span>+link,request,response);</div><div class="line">				</div><div class="line">				response.write(<span class="string">'\n'</span>);</div><div class="line">			&#125;);</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取每条新闻的链接后，请求链接并再次爬取</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pc</span>(<span class="params">url,req,response</span>)</span>&#123;</div><div class="line">	http.get(url,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> html =<span class="string">''</span>;</div><div class="line">		res.setEncoding(<span class="string">'binary'</span>);</div><div class="line">		</div><div class="line">		res.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">			html+=data;</div><div class="line">		&#125;);</div><div class="line">		</div><div class="line">		res.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer(html,<span class="string">'binary'</span>);</div><div class="line">			html = iconv.decode(buf,<span class="string">'GBK'</span>);</div><div class="line">			<span class="keyword">var</span> $ = cheerio.load(html);</div><div class="line">			<span class="comment">// 获取所有段落</span></div><div class="line">			<span class="keyword">var</span> content = $(<span class="string">'.news_list .content p'</span>);</div><div class="line">			<span class="comment">// 获取标题</span></div><div class="line">			<span class="keyword">var</span> title = $(<span class="string">'.news_list .title'</span>);</div><div class="line">			<span class="comment">// 存储文章的内容</span></div><div class="line">			<span class="keyword">var</span> data=<span class="string">''</span>;</div><div class="line">			<span class="comment">// 对段落进行遍历</span></div><div class="line">			content.each(<span class="function"><span class="keyword">function</span>(<span class="params">index,item</span>)</span>&#123;</div><div class="line">				<span class="comment">// 将图片段落单独处理</span></div><div class="line">				<span class="keyword">if</span>($(<span class="keyword">this</span>).text().trim() == <span class="string">''</span>)&#123;</div><div class="line">					response.write(<span class="string">'（图片）\n'</span>);</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					<span class="keyword">var</span> x = $(<span class="keyword">this</span>).text().trim();</div><div class="line">					response.write(x+<span class="string">'\n'</span>);</div><div class="line">					<span class="comment">// 对每个段落进行累加，\r\n 是为了能在文本文档中换行</span></div><div class="line">					data+=x+<span class="string">'\r\n'</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">			response.write(<span class="string">'\n\n'</span>);</div><div class="line">			</div><div class="line">			<span class="comment">// 保存文本到本地文本文档</span></div><div class="line">			fs.appendFile(<span class="string">'./data/'</span>+title.text()+<span class="string">'.txt'</span>,data,<span class="string">'utf-8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">				<span class="keyword">if</span>(err)&#123;</div><div class="line">					<span class="built_in">console</span>.log(err);</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">			</div><div class="line">			<span class="comment">// 保存图片到本地</span></div><div class="line">			<span class="comment">// 获取所有图片</span></div><div class="line">			<span class="keyword">var</span> img = $(<span class="string">'.news_list .content img'</span>);</div><div class="line">			<span class="keyword">if</span>(img.length!==<span class="number">0</span>)&#123;</div><div class="line">				<span class="comment">// 对图片进行遍历</span></div><div class="line">				img.each(<span class="function"><span class="keyword">function</span>(<span class="params">index,item</span>)</span>&#123;</div><div class="line">					<span class="comment">// 获取图片链接</span></div><div class="line">					<span class="keyword">var</span> img_link = <span class="string">'http://www.szpt.edu.cn'</span>+$(<span class="keyword">this</span>).attr(<span class="string">'src'</span>);</div><div class="line">					</div><div class="line">					<span class="comment">// 采用request模块，向服务器发送一次请求，获取图片资源并保存到本地</span></div><div class="line">					request(img_link).pipe(fs.createWriteStream(<span class="string">'./image/'</span>+title.text()+<span class="string">'---'</span>+index+img_link.substr(img_link.length<span class="number">-4</span>)));</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 创建服务器，</span></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(request.url!=<span class="string">'/favicon.ico'</span>)&#123;</div><div class="line">		pcindex(url,request,response);</div><div class="line">	&#125;</div><div class="line">&#125;).listen(<span class="number">8000</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at http://localhost:8000/'</span>);</div></pre></td></tr></table></figure>
<p>在<strong>cmd</strong>运行 spider.js 程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node spider.js</div></pre></td></tr></table></figure></p>
<p>用浏览器<a href="http://localhost:8000" target="_blank" rel="external">http://localhost:8000</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习了Node.js后就照网上的教程，改编成爬取 &lt;strong&gt;&lt;a href=&quot;http://www.szpt.edu.cn/szyw/szyw/index.shtml&quot;&gt;深圳职业技术学院官网&lt;/a&gt;&lt;/strong&gt; 的新闻数据和图片。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="http://yoursite.com/2017/03/12/nodejs/"/>
    <id>http://yoursite.com/2017/03/12/nodejs/</id>
    <published>2017-03-12T11:18:10.000Z</published>
    <updated>2017-03-15T06:03:04.455Z</updated>
    
    <content type="html"><![CDATA[<p><em>记录Node.js的学习笔记</em><br><a id="more"></a></p>
<h1 id="创建Node-js应用"><a href="#创建Node-js应用" class="headerlink" title="创建Node.js应用"></a>创建Node.js应用</h1><h2 id="引入require模块"><a href="#引入require模块" class="headerlink" title="引入require模块"></a>引入require模块</h2><p>使用require指令来载入模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div></pre></td></tr></table></figure></p>
<h2 id="创建服务器"><a href="#创建服务器" class="headerlink" title="创建服务器"></a>创建服务器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="comment">// 发送 HTTP 头部</span></div><div class="line">	<span class="comment">// HTTP 状态值：200：OK</span></div><div class="line">	<span class="comment">// 内容类型：text/plain</span></div><div class="line">	response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">	</div><div class="line">	<span class="comment">// 发送数据</span></div><div class="line">	response.write(<span class="string">'Hello world!'</span>);</div><div class="line">	response.end();</div><div class="line">&#125;).listen(<span class="number">8000</span>);</div><div class="line"><span class="comment">// 终端打印如下信息</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at http://localhost:8000/'</span>);</div></pre></td></tr></table></figure>
<hr>
<h1 id="Node-js-回调函数"><a href="#Node-js-回调函数" class="headerlink" title="Node.js 回调函数"></a>Node.js 回调函数</h1><blockquote>
<p>Node.js异步编程的直接体现就是回调。</p>
</blockquote>
<p>异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。<br>回调函数在完成任务后就会被调用，<strong>Node</strong>使用了大量的回调函数，<strong>Node</strong>所有API都支持回调函数。<br>例如，我们可以一边读取文件，一边执行其它命令，在文件读取完成后，将内容作为回调函数的参数返回。<br>这样执行代码时就没有阻塞或等待I/O操作。这就大大提高了Node.js的性能，可以处理大量的并发要求。</p>
<h2 id="阻塞代码实例"><a href="#阻塞代码实例" class="headerlink" title="阻塞代码实例"></a>阻塞代码实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">'test.js'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'开始'</span>);</div><div class="line"><span class="built_in">console</span>.log(data.toString());</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'结束'</span>);</div></pre></td></tr></table></figure>
<h2 id="非阻塞代码实例"><a href="#非阻塞代码实例" class="headerlink" title="非阻塞代码实例"></a>非阻塞代码实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="comment">// 第一个参数为接受错误对象</span></div><div class="line">fs.readFile(<span class="string">'test.js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data2</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'开始'</span>);</div><div class="line">	<span class="built_in">console</span>.log(data2.toString());</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'结束'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<hr>
<h1 id="Node-js-事件循环"><a href="#Node-js-事件循环" class="headerlink" title="Node.js 事件循环"></a>Node.js 事件循环</h1><p>Node.js 是单进程单线程应用程序，但是通过事件和回调支持并发，所以性能非常高。<br>Node.js 的每一个 API 都是异步的，并作为一个独立线程运行，使用异步函数调用，并处理并发。<br>Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。<br>Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.</p>
<h2 id="事件驱动程序"><a href="#事件驱动程序" class="headerlink" title="事件驱动程序"></a>事件驱动程序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入 events 模块</span></div><div class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建 eventEmitter 对象</span></div><div class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</div><div class="line"></div><div class="line"><span class="comment">// 创建事件处理程序</span></div><div class="line"><span class="keyword">var</span> connectHandler = <span class="function"><span class="keyword">function</span> <span class="title">connected</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'连接成功。'</span>);</div><div class="line">	<span class="comment">// 触发 data_received 事件</span></div><div class="line">	eventEmitter.emit(<span class="string">'data_received'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 绑定 connection 事件处理程序</span></div><div class="line">eventEmitter.on(<span class="string">'connection'</span>,connectHandler);</div><div class="line"></div><div class="line"><span class="comment">// 使用匿名函数绑定 data_received 事件</span></div><div class="line">eventEmitter.on(<span class="string">'data_received'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'数据接受成功'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 触发 connection 事件</span></div><div class="line">eventEmitter.emit(<span class="string">'connection'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'程序执行完毕'</span>);</div></pre></td></tr></table></figure>
<h2 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a>EventEmitter</h2><p><strong>events</strong> 模块只提供了一个对象：events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。<br>你可以通过<strong>require(“events”);</strong>来访问该模块。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> eventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</div><div class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> eventEmitter();</div><div class="line">event.on(<span class="string">'some_event'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">arg1,arg2</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'some_event1 事件触发'</span>,arg1,arg2);</div><div class="line">&#125;);</div><div class="line">event.on(<span class="string">'some_event'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">arg1,arg2</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'some_event2 事件触发'</span>,arg1,arg2);</div><div class="line">&#125;);</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// 触发 some_event 事件</span></div><div class="line">	event.emit(<span class="string">'some_event'</span>,<span class="string">'参数1'</span>,<span class="string">'参数2'</span>);</div><div class="line">&#125;,<span class="number">1000</span>);</div></pre></td></tr></table></figure></p>
<p>以上例子，<strong>emitter</strong>为事件<strong>some_event</strong>注册了两个事件监听器，然后触发了<strong>some_event</strong>事件<br>EventEmitter的其中两个属性<strong>on</strong>和<strong>emit</strong>，<strong>on</strong>函数用于绑定事件函数，<strong>emit</strong>属性用于触发一个事件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</div><div class="line"></div><div class="line"><span class="comment">// 监听器 1</span></div><div class="line"><span class="keyword">var</span> listener1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'监听器1执行'</span>);</div><div class="line">&#125;;</div><div class="line"><span class="comment">//  监听器 2</span></div><div class="line"><span class="keyword">var</span> listener2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'监听器2执行'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 为指定事件添加一个监听器</span></div><div class="line">eventEmitter.addListener(<span class="string">'connection'</span>,listener1);</div><div class="line"><span class="comment">// 为指定事件注册一个监听器</span></div><div class="line">eventEmitter.on(<span class="string">'connection'</span>,listener2);</div><div class="line"></div><div class="line"><span class="comment">// 打印监听器的个数</span></div><div class="line"><span class="built_in">console</span>.log(events.EventEmitter.listenerCount(eventEmitter,<span class="string">'connection'</span>)+<span class="string">"个监听器在监听"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 触发connection事件</span></div><div class="line">eventEmitter.emit(<span class="string">'connection'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 移除监听器1</span></div><div class="line">eventEmitter.removeListener(<span class="string">'connection'</span>,listener1);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'监听器1不再监听'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 打印监听器的个数</span></div><div class="line"><span class="built_in">console</span>.log(events.EventEmitter.listenerCount(eventEmitter,<span class="string">'connection'</span>)+<span class="string">"个监听器在监听"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 触发connection事件</span></div><div class="line">eventEmitter.emit(<span class="string">'connection'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'程序执行完毕'</span>);</div></pre></td></tr></table></figure></p>
<p>执行结果如下所示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span>个监听器在监听</div><div class="line">监听器<span class="number">1</span>执行</div><div class="line">监听器<span class="number">2</span>执行</div><div class="line">监听器<span class="number">1</span>不再监听</div><div class="line"><span class="number">1</span>个监听器在监听</div><div class="line">监听器<span class="number">2</span>执行</div><div class="line">程序执行完毕</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="Node-js-Stream"><a href="#Node-js-Stream" class="headerlink" title="Node.js Stream"></a>Node.js Stream</h1><p>Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个 Stream，还有stdout（标准输出）。</p>
<p>Node.js Stream有四种流类型</p>
<ul><li><strong>Readable</strong> - 可读操作</li><li><strong>Writable</strong> - 可写操作</li><li><strong>Duplex</strong> - 可写可读操作</li><li><strong>Transform</strong> - 操作被写入数据，然后读出结果</li></ul>

<h2 id="从流中读取数据"><a href="#从流中读取数据" class="headerlink" title="从流中读取数据"></a>从流中读取数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> data = <span class="string">''</span>;</div><div class="line"></div><div class="line"><span class="comment">// 创建可读流</span></div><div class="line"><span class="keyword">var</span> readerStream = fs.createReadStream(<span class="string">'test.js'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 设置编码为utf8</span></div><div class="line">readerStream.setEncoding(<span class="string">'UTF8'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 处理流事件 --&gt; data,end,error</span></div><div class="line">readerStream.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">line</span>)</span>&#123;</div><div class="line">	data+  =line;</div><div class="line">&#125;);</div><div class="line">readerStream.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(data);</div><div class="line">&#125;);</div><div class="line">readerStream.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(err.stack);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'读取完毕'</span>);</div></pre></td></tr></table></figure>
<h2 id="写入流"><a href="#写入流" class="headerlink" title="写入流"></a>写入流</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> data = <span class="string">'我要写入'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 创建写入流</span></div><div class="line"><span class="keyword">var</span> writerStream = fs.createWriteStream(<span class="string">'test.js'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 设置编码为utf8</span></div><div class="line">writerStream.write(data,<span class="string">'utf8'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 标记文件末尾</span></div><div class="line">writerStream.end();</div><div class="line"></div><div class="line"><span class="comment">// 处理流事件</span></div><div class="line">writerStream.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'写入完成'</span>);</div><div class="line">&#125;);</div><div class="line">writerStream.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(err.stack);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'程序执行结束'</span>);</div></pre></td></tr></table></figure>
<h2 id="管道流"><a href="#管道流" class="headerlink" title="管道流"></a>管道流</h2><p>管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建一个可读流</span></div><div class="line"><span class="keyword">var</span> readerStream = fs.createReadStream(<span class="string">'hello.js'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建一个可写流</span></div><div class="line"><span class="keyword">var</span> writerStream = fs.createWriteStream(<span class="string">'test.js'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 管道读写操作</span></div><div class="line"><span class="comment">// 读取 hello.js 文件内容，并将内容写入到 test.js 文件中</span></div><div class="line">readerStream.pipe(writerStream);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行完毕"</span>);</div></pre></td></tr></table></figure></p>
<h2 id="链式流"><a href="#链式流" class="headerlink" title="链式流"></a>链式流</h2><p>链式是通过连接输出流到另外一个流并创建爱你多个流操作链的机制。链式流一般用于管道操作。<br>以下例子用管道和链式来压缩和解压文件。</p>
<h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 压缩 test.js 为 test.zip</span></div><div class="line">fs.createReadStream(<span class="string">'test.js'</span>)</div><div class="line">	.pipe(zlib.createGzip())</div><div class="line">	.pipe(fs.createWriteStream(<span class="string">'test.zip'</span>));</div><div class="line">	</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'文件压缩完成'</span>);</div></pre></td></tr></table></figure>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 压缩 test.zip 为 test.js</span></div><div class="line">fs.createReadStream(<span class="string">'test.zip'</span>)</div><div class="line">	.pipe(zlib.createGunzip())</div><div class="line">	.pipe(fs.createWriteStream(<span class="string">'test.js'</span>));</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'文件解压完成'</span>);</div></pre></td></tr></table></figure>
<hr>
<h1 id="Node-js-模块系统"><a href="#Node-js-模块系统" class="headerlink" title="Node.js 模块系统"></a>Node.js 模块系统</h1><p>为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。<br>模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。<br>换言之，一个 <strong>Node.js</strong> 文件就是一个模块，这个文件可能是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。</p>
<h2 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h2><p>创建test.js文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'我是test.js exports的函数'</span>);</div><div class="line">&#125;</div><div class="line">exports.world = fun;</div></pre></td></tr></table></figure></p>
<p>再创建hello.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> test = <span class="built_in">require</span>(<span class="string">'./test.js'</span>);</div><div class="line">test.world();</div></pre></td></tr></table></figure></p>
<p>运行结果如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">我是test.js exports的函数</div></pre></td></tr></table></figure></p>
<p><strong>test.js通过exports对象把world作为模块的访问接口，在hello.js中通过require(‘./test.js’)加载模块，然后就可以直接访问hello.js中exports对象的成员函数了。</strong></p>
<h2 id="模块加载"><a href="#模块加载" class="headerlink" title="模块加载"></a>模块加载</h2><p><img src="/uploads/nodejs_module.jpg" alt="Alt text">;</p>
<h3 id="从文件模块缓存中加载"><a href="#从文件模块缓存中加载" class="headerlink" title="从文件模块缓存中加载"></a>从文件模块缓存中加载</h3><p>尽管原生模块与文件模块的优先级不同，但是都不会优先于从文件模块的缓存中加载已经存在的模块。</p>
<h3 id="从原生模块加载"><a href="#从原生模块加载" class="headerlink" title="从原生模块加载"></a>从原生模块加载</h3><p>原生模块的优先级仅次于文件模块缓存的优先级。require方法在解析文件名之后，优先检查模块是否在原生模块列表中。以http模块为例，尽管在目录下存在一个http/http.js/http.node/http.json文件，require(“http”)都不会从这些文件中加载，而是从原生模块中加载。<br>原生模块也有一个缓存区，同样也是优先从缓存区加载。如果缓存区没有被加载过，则调用原生模块的加载方式进行加载和执行。</p>
<h3 id="从文件加载"><a href="#从文件加载" class="headerlink" title="从文件加载"></a>从文件加载</h3><p>当文件模块缓存中不存在，而且不是原生模块的时候，Node.js会解析require方法传入的参数，并从文件系统中加载实际的文件，加载过程中的包装和编译细节在前一节中已经介绍过，这里我们将详细描述查找文件模块的过程，其中，也有一些细节值得知晓。<br>require方法接受以下几种参数的传递：</p>
<ul><li>http、fs、path等，原生模块。</li><li>./mod或../mod，相对路径的文件模块。</li><li>/pathtomodule/mod，绝对路径的文件模块。</li><li>mod，非原生模块的文件模块。</li></ul>

<hr>
<h1 id="Node-js-路由"><a href="#Node-js-路由" class="headerlink" title="Node.js 路由"></a>Node.js 路由</h1><h2 id="server-js"><a href="#server-js" class="headerlink" title="server.js"></a>server.js</h2><blockquote>
<p>服务器</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">router</span>)</span>&#123;</div><div class="line">	http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">		router(pathname);</div><div class="line">		response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">		response.write(pathname);</div><div class="line">		response.end();</div><div class="line">	&#125;).listen(<span class="number">8000</span>);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Server is running at http://localhost:8000'</span>);</div><div class="line">&#125;</div><div class="line">exports.start = start;</div></pre></td></tr></table></figure>
<h2 id="router-js"><a href="#router-js" class="headerlink" title="router.js"></a>router.js</h2><blockquote>
<p>路由</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">router</span>(<span class="params">pathname</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(pathname+<span class="string">'已被接收   by router'</span>);</div><div class="line">&#125;</div><div class="line">exports.router=router;</div></pre></td></tr></table></figure>
<h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><blockquote>
<p>将路由函数注入服务器</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'./server.js'</span>);</div><div class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./router.js'</span>);</div><div class="line"></div><div class="line">server.start(router.router);</div></pre></td></tr></table></figure>
<hr>
<h1 id="Node-js-GET-POST请求"><a href="#Node-js-GET-POST请求" class="headerlink" title="Node.js GET/POST请求"></a>Node.js GET/POST请求</h1><p>表单提交到服务器一般使用GET/POST请求</p>
<h2 id="获取-GET-请求内容"><a href="#获取-GET-请求内容" class="headerlink" title="获取 GET 请求内容"></a>获取 GET 请求内容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">	response.write(util.inspect(url.parse(request.url,<span class="literal">true</span>)));</div><div class="line">	response.end();</div><div class="line">&#125;).listen(<span class="number">8000</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at http://localhost:8000'</span>);</div></pre></td></tr></table></figure>
<p>在浏览器访问<strong><a href="http://localhost:8000/user?haha=haha&amp;xixi=xixi" target="_blank" rel="external">http://localhost:8000/user?haha=haha&amp;xixi=xixi</a></strong><br>查看返回结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Url &#123;</div><div class="line">  <span class="attr">protocol</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">slashes</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">auth</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">host</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">port</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">hostname</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">hash</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">search</span>: <span class="string">'?haha=haha&amp;xixi=xixi'</span>,</div><div class="line">  <span class="attr">query</span>: &#123; <span class="attr">haha</span>: <span class="string">'haha'</span>, <span class="attr">xixi</span>: <span class="string">'xixi'</span> &#125;,</div><div class="line">  <span class="attr">pathname</span>: <span class="string">'/user'</span>,</div><div class="line">  <span class="attr">path</span>: <span class="string">'/user?haha=haha&amp;xixi=xixi'</span>,</div><div class="line">  <span class="attr">href</span>: <span class="string">'/user?haha=haha&amp;xixi=xixi'</span> &#125;</div></pre></td></tr></table></figure></p>
<h3 id="获取URL的参数"><a href="#获取URL的参数" class="headerlink" title="获取URL的参数"></a>获取URL的参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">	</div><div class="line">	<span class="comment">//解析 url 参数</span></div><div class="line">	<span class="keyword">var</span> params = url.parse(request.url,<span class="literal">true</span>.query);</div><div class="line">	response.write(<span class="string">'参数haha为：'</span>+params.haha);</div><div class="line">	response.write(<span class="string">'\n'</span>);</div><div class="line">	response.write(<span class="string">'参数xixi为：'</span>+params.xixi);</div><div class="line">	</div><div class="line">	response.end();</div><div class="line">&#125;).listen(<span class="number">8000</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at http://localhost:8000'</span>);</div></pre></td></tr></table></figure>
<p>在浏览器访问<strong><a href="http://localhost:8000/user?haha=哈哈&amp;xixi=嘻嘻" target="_blank" rel="external">http://localhost:8000/user?haha=哈哈&amp;xixi=嘻嘻</a></strong><br>查看返回结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">参数haha为：哈哈</div><div class="line">参数xixi为：嘻嘻</div></pre></td></tr></table></figure></p>
<h2 id="获取-POST-请求内容"><a href="#获取-POST-请求内容" class="headerlink" title="获取 POST 请求内容"></a>获取 POST 请求内容</h2><p>POST 请求的内容全部的都在请求体中，http.ServerRequest 并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时的工作。<br>比如上传文件，而很多时候我们可能并不需要理会请求体的内容，恶意的POST请求会大大消耗服务器的资源，所有node.js 默认是不会解析请求体的，当你需要的时候，需要手动来做。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> html = </div><div class="line">  <span class="string">'&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;'</span> +</div><div class="line">  <span class="string">'&lt;body&gt;'</span> +</div><div class="line">  <span class="string">'&lt;form method="post"&gt;'</span> +</div><div class="line">  <span class="string">'用户名： &lt;input name="username" type="text"&gt;&lt;br&gt;'</span> +</div><div class="line">  <span class="string">'密码： &lt;input name="password" type="password"&gt;&lt;br&gt;'</span> +</div><div class="line">  <span class="string">'&lt;input type="submit"&gt;'</span> +</div><div class="line">  <span class="string">'&lt;/form&gt;'</span> +</div><div class="line">  <span class="string">'&lt;/body&gt;&lt;/html&gt;'</span>;</div><div class="line">  </div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="comment">// 定义一个post变量，用于暂村请求体的信息</span></div><div class="line">	<span class="keyword">var</span> post=<span class="string">""</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 通过data事件监听函数，每当收到请求体的数据，就累加到post变量中</span></div><div class="line">	request.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">		post+=data;</div><div class="line">	&#125;);</div><div class="line">	</div><div class="line">	<span class="comment">// 在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回</span></div><div class="line">	request.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-type'</span>:<span class="string">'text-plain'</span>&#125;);</div><div class="line">		</div><div class="line">		<span class="comment">// 解析参数</span></div><div class="line">		post = querystring.parse(post);</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(post.username &amp;&amp; post.password)&#123; <span class="comment">// 输出POST的数据</span></div><div class="line">			response.write(<span class="string">'用户名：'</span>+post.username);</div><div class="line">			response.write(<span class="string">'\n'</span>);</div><div class="line">			response.write(<span class="string">'密  码：'</span>+post.password);</div><div class="line">		&#125;<span class="keyword">else</span>&#123; <span class="comment">// 输出表单</span></div><div class="line">			response.write(html);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		response.end();</div><div class="line">	&#125;);</div><div class="line">&#125;).listen(<span class="number">8000</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at http://localhost:8000'</span>);</div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure>
<hr>
<h1 id="Node-js-Web-模块"><a href="#Node-js-Web-模块" class="headerlink" title="Node.js Web 模块"></a>Node.js Web 模块</h1><p>Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，Web服务器的基本功能就是提供Web信息浏览服务。<br>它只需支持HTTP协议、HTML文档格式及URL，与客户端的网络浏览器配合。</p>
<h2 id="创建-Web-服务器"><a href="#创建-Web-服务器" class="headerlink" title="创建 Web 服务器"></a>创建 Web 服务器</h2><p>Node.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div></pre></td></tr></table></figure></p>
<p>最基本的 HTTP 服务器架构（使用8080端口）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> pathname = url.parse(request.url).pathname.substr(<span class="number">1</span>);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'请求'</span>+pathname+<span class="string">"文件"</span>);</div><div class="line">	fs.readFile(pathname,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(err)&#123;</div><div class="line">			<span class="built_in">console</span>.log(err);</div><div class="line">			<span class="comment">// HTTP 状态码为 404 : NOT FOUND</span></div><div class="line">			response.writeHead(<span class="number">404</span>,&#123;<span class="string">'Content-type'</span>:<span class="string">'text/html'</span>&#125;);</div><div class="line">			response.write(<span class="string">'找不到资源'</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="comment">// HTTP 状态码为 200 : OK</span></div><div class="line">			response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-type'</span>:<span class="string">'text/html'</span>&#125;);</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">'请求'</span>+pathname+<span class="string">'成功'</span>);</div><div class="line">			</div><div class="line">			<span class="comment">// 响应文件内容</span></div><div class="line">			response.write(data);</div><div class="line">		&#125;</div><div class="line">		response.end();</div><div class="line">	&#125;);</div><div class="line">&#125;).listen(<span class="number">8080</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at http://localhost:8080'</span>);</div></pre></td></tr></table></figure></p>
<p>在该目录下新建 index.html 文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		这是index.html页面</div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在浏览器访问<strong><a href="http://localhost:8000/index.html" target="_blank" rel="external">http://localhost:8000/index.html</a></strong>就会显示 index.html 页面。</p>
<h2 id="创建-Web-客户端"><a href="#创建-Web-客户端" class="headerlink" title="创建 Web 客户端"></a>创建 Web 客户端</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> body = &#123;</div><div class="line">	<span class="attr">host</span>: <span class="string">'localhost'</span>,<span class="comment">// 一定不能加http</span></div><div class="line">	port: <span class="number">8080</span>,</div><div class="line">	<span class="attr">path</span>: <span class="string">'/index.html'</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> body = <span class="string">''</span>;</div><div class="line">	response.on( <span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">		body+= data;</div><div class="line">	&#125;);</div><div class="line">	response.on( <span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">// 数据接受完成</span></div><div class="line">		<span class="built_in">console</span>.log(body);</div><div class="line">	&#125;);</div><div class="line">&#125;;</div><div class="line">http.request(body, callback).end();</div></pre></td></tr></table></figure>
<hr>
<h1 id="Node-js-Express-框架"><a href="#Node-js-Express-框架" class="headerlink" title="Node.js Express 框架"></a>Node.js Express 框架</h1><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br>使用 Express 可以快速地搭建一个完整功能的网站。<br>Express 框架核心特性：</p>
<ul><li>可以设置中间件来响应 HTTP 请求</li><li>定义了路由表用于执行不同的 HTTP 请求动作</li><li>可以通过向模版传递参数来动态渲染 HTML 页面</li></ul>

<h2 id="安装Express"><a href="#安装Express" class="headerlink" title="安装Express"></a>安装Express</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install express -gd</div></pre></td></tr></table></figure>
<h2 id="第一个-Express-框架实例"><a href="#第一个-Express-框架实例" class="headerlink" title="第一个 Express 框架实例"></a>第一个 Express 框架实例</h2><p>引入 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	response.send(<span class="string">'Hello World!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8080</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">var</span> host = server.address().address;</div><div class="line">	<span class="keyword">var</span> port = server.address().port;</div><div class="line">	</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在浏览器中访问 <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a></p>
<h2 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h2><p>Express 应用使用回调函数的参数：request和response对象来处理请求和响应的数据。</p>
<h3 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h3><p>request对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性，常见属性有：</p>
<ol><li><strong>request.app</strong> - 当callback为外部文件时，用request.app访问express的实例</li><br><li><strong>request.baseUrl</strong> - 获取路由当前安装的URL路径</li><br><li><strong>request.body</strong> / req.cookies - 获得「请求主体」/ Cookies</li><br><li><strong>request.fresh / req.stale</strong> - 判断请求是否还「新鲜」</li><br><li><strong>request.hostname / req.ip</strong> - 获取主机名和IP地址</li><br><li><strong>request.originalUrl</strong> - 获取原始请求URL</li><br><li><strong>request.params</strong> - 获取路由的parameters</li><br><li><strong>request.path</strong> - 获取请求路径</li><br><li><strong>request.protocol</strong> - 获取协议类型</li><br><li><strong>request.query</strong> - 获取URL的查询参数串</li><br><li><strong>request.route</strong> - 获取当前匹配的路由</li><br><li><strong>request.subdomains</strong> - 获取子域名</li><br><li><strong>request.accepts()</strong> - 检查可接受的请求的文档类型</li><br><li><strong>request.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages</strong> - 返回指定字符集的第一个可接受字符编码</li><br><li><strong>request.get()</strong> - 获取指定的HTTP请求头</li><br><li><strong>request.is()</strong> - 判断请求头Content-Type的MIME类型</li><br></ol>

<h3 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h3><p>response对象表示 HTTP 响应，即在接受到请求时向客户端发送的 HTTP 相应数据。</p>
<ol><li><strong>response.app</strong> - 同req.app一样</li><br><li><strong>response.append()</strong> - 追加指定HTTP头</li><br><li><strong>response.set()</strong> - 在res.append()后将重置之前设置的头</li><br><li><strong>response.cookie(name，value [，option])</strong> - 设置Cookie</li><br><li><strong>opition</strong> - domain / expires / httpOnly / maxAge / path / secure / signed</li><br><li><strong>response.clearCookie()</strong> - 清除Cookie</li><br><li><strong>response.download()</strong> - 传送指定路径的文件</li><br><li><strong>response.get()</strong> - 返回指定的HTTP头</li><br><li><strong>response.json()</strong> - 传送JSON响应</li><br><li><strong>response.jsonp()</strong> - 传送JSONP响应</li><br><li><strong>response.location()</strong> - 只设置响应的Location HTTP头，不设置状态码或者close response</li><br><li><strong>response.redirect()</strong> - 设置响应的Location HTTP头，并且设置状态码302</li><br><li><strong>response.send()</strong> - 传送HTTP响应</li><br><li><strong>response.sendFile(path [，options] [，fn])</strong> - 传送指定路径的文件 -会自动根据文件extension设定Content-Type</li><br><li><strong>response.set()</strong> - 设置HTTP头，传入object可以一次设置多个头</li><br><li><strong>response.status()</strong> - 设置HTTP状态码</li><br><li><strong>response.type()</strong> - 设置Content-Type的MIME类型</li><br></ol>

<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>由决定了由谁(指定脚本)去响应客户端请求。<br>在HTTP请求中，可以通过路由提取出请求的URL以及GET/POST参数。</p>
<p>添加功能来处理更多类型的 HTTP 请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">// 主页输出'Hello world!'</span></div><div class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'主页 GET 请求'</span>);</div><div class="line">	response.send(<span class="string">'Hello GET!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.post(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'主页 POST 请求'</span>);</div><div class="line">	response.send(<span class="string">'Hello POST!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">'/del_user'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'/del_user 响应 DELETE 请求'</span>);</div><div class="line">	response.send(<span class="string">'删除页面'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">'/list_user'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">requset,response</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'/list_user GET 请求'</span>);</div><div class="line">	response.send(<span class="string">'用户列表页面'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">'/ab*cd'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'/ab*cd GET 请求'</span>);</div><div class="line">	response.send(<span class="string">'正则匹配'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> host = server.address().address;</div><div class="line">	<span class="keyword">var</span> port = server.address().port;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>Express 提供了内置的中间件 <strong>express.static</strong> 来设置静态文件如：图片，CSS，JavaScript等。</p>
<p>在目录下新建一个 img 文件夹，放上一张 test.jpg 图片<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">// 在 img 目录下查找</span></div><div class="line">app.use(express.static(<span class="string">'img'</span>));</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	response.send(<span class="string">'Hello world'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure></p>
<p>在浏览器访问<strong><a href="http://localhost:8000/test.jpg" target="_blank" rel="external">http://localhost:8000/test.jpg</a></strong></p>
<h2 id="GET-和-POST-方法"><a href="#GET-和-POST-方法" class="headerlink" title="GET 和 POST 方法"></a>GET 和 POST 方法</h2><h3 id="GET-方法"><a href="#GET-方法" class="headerlink" title="GET 方法"></a>GET 方法</h3><p>新建 index.html 文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/process_get"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></div><div class="line">		用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">		密  码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>新建 server.js 文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"> </div><div class="line">app.get(<span class="string">'/index.html'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">requset,response</span>)</span>&#123;</div><div class="line">   response.sendFile( __dirname + <span class="string">"/index.html"</span> );</div><div class="line">&#125;)</div><div class="line"> </div><div class="line">app.get(<span class="string">'/process_get'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">requset,response</span>)</span>&#123;</div><div class="line"> </div><div class="line">   <span class="comment">// 输出 JSON 格式</span></div><div class="line">   <span class="keyword">var</span> info = &#123;</div><div class="line">       <span class="attr">username</span>:requset.query.username,</div><div class="line">       <span class="attr">password</span>:requset.query.password</div><div class="line">   &#125;;</div><div class="line">   <span class="built_in">console</span>.log(info);</div><div class="line">   response.end(<span class="built_in">JSON</span>.stringify(info));</div><div class="line">&#125;)</div><div class="line">app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure></p>
<p>在浏览器访问<strong><a href="http://localhost:8000/index.html" target="_blank" rel="external">http://localhost:8000/index.html</a></strong></p>
<h3 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h3><p>新建 index.html 文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/process_post"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></div><div class="line">		用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">		密  码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>新建 server.js 文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建 application/x-www-form-urlencoded 编码解析</span></div><div class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">'/index.html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">requset,response</span>)</span>&#123;</div><div class="line">	response.sendFile(__dirname+<span class="string">"/index.html"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.post(<span class="string">'/process_post'</span>,urlencodedParser,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="comment">//输出 JSON 格式</span></div><div class="line">	<span class="keyword">var</span> info = &#123;</div><div class="line">		<span class="attr">username</span>:request.body.username,</div><div class="line">		<span class="attr">password</span>:request.body.password</div><div class="line">	&#125;;</div><div class="line">	<span class="built_in">console</span>.log(info);</div><div class="line">	response.end(<span class="built_in">JSON</span>.stringify(info));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure></p>
<p>在浏览器访问<strong><a href="http://localhost:8000/index.html" target="_blank" rel="external">http://localhost:8000/index.html</a></strong></p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>创建一个用于上传控件的表单，使用 POST 方法，表单 <strong>enctype</strong> 属性设置为 <strong>multipart/form-data</strong>。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	选择一个文件上传<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/file_upload"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"image"</span> <span class="attr">size</span>=<span class="string">"50"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>server.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</div><div class="line"></div><div class="line">app.use(express.static(<span class="string">'img'</span>));</div><div class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</div><div class="line">app.use(multer(&#123;<span class="attr">dest</span>:<span class="string">'/tmp/'</span>&#125;).array(<span class="string">'image'</span>));</div><div class="line"></div><div class="line">app.get(<span class="string">'/index.html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	response.sendFile(__dirname+<span class="string">'/index.html'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.post(<span class="string">'/file_upload'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	<span class="comment">// 上传的文件信息</span></div><div class="line">	<span class="built_in">console</span>.log(request.files[<span class="number">0</span>]);</div><div class="line">	<span class="keyword">var</span> path_file = __dirname+<span class="string">'/'</span>+request.files[<span class="number">0</span>].originalname;</div><div class="line">	fs.readFile(request.files[<span class="number">0</span>].path,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</div><div class="line">		fs.writeFile(path_file,data,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(err)&#123;</div><div class="line">				<span class="built_in">console</span>.log(err);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				info = &#123;</div><div class="line">					<span class="attr">message</span>:<span class="string">'File uploaded successfully !'</span>,</div><div class="line">					<span class="attr">filename</span>:request.files[<span class="number">0</span>].originalname</div><div class="line">				&#125;;</div><div class="line">				<span class="built_in">console</span>.log(info);</div><div class="line">				response.end(<span class="built_in">JSON</span>.stringify(info));</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line">app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure></p>
<h2 id="Cookie-管理"><a href="#Cookie-管理" class="headerlink" title="Cookie 管理"></a>Cookie 管理</h2><p>使用中间件向 Node.js 服务器发送 cookie 信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</div><div class="line"></div><div class="line">app.use(cookieParser());</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	response.send(<span class="string">'Cookies：'</span>+request.cookies);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="Node-js-RESTful-API"><a href="#Node-js-RESTful-API" class="headerlink" title="Node.js RESTful API"></a>Node.js RESTful API</h1><h2 id="什么是-REST-？"><a href="#什么是-REST-？" class="headerlink" title="什么是 REST ？"></a>什么是 REST ？</h2><p>EST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。<br>表述性状态转移是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful。需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML（标准通用标记语言下的一个子集）以及HTML（标准通用标记语言下的一个应用）这些现有的广泛流行的协议和标准。REST 通常使用 JSON 数据格式。</p>
<h2 id="RESTful-Web-Services"><a href="#RESTful-Web-Services" class="headerlink" title="RESTful Web Services"></a>RESTful Web Services</h2><p>Web service是一个平台独立的，低耦合的，自包含的、基于可编程的web的应用程序，可使用开放的XML（标准通用标记语言下的一个子集）标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的互操作的应用程序。<br>基于 REST 架构的 Web Services 即是 RESTful。<br>由于轻量级以及通过 HTTP 直接传输数据的特性，Web 服务的 RESTful 方法已经成为最常见的替代方法。可以使用各种语言（比如 Java 程序、Perl、Ruby、Python、PHP 和 Javascript[包括 Ajax]）实现客户端。<br>RESTful Web 服务通常可以通过自动客户端或代表用户的应用程序访问。但是，这种服务的简便性让用户能够与之直接交互，使用它们的 Web 浏览器构建一个 GET URL 并读取返回的内容。</p>
<h2 id="创建RESTful"><a href="#创建RESTful" class="headerlink" title="创建RESTful"></a>创建RESTful</h2><p>新建一个 json 数据资源文件 user.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   &quot;user1&quot; : &#123;</div><div class="line">      &quot;name&quot; : &quot;mahesh&quot;,</div><div class="line">	  &quot;password&quot; : &quot;password1&quot;,</div><div class="line">	  &quot;profession&quot; : &quot;teacher&quot;,</div><div class="line">	  &quot;id&quot;: 1</div><div class="line">   &#125;,</div><div class="line">   &quot;user2&quot; : &#123;</div><div class="line">      &quot;name&quot; : &quot;suresh&quot;,</div><div class="line">	  &quot;password&quot; : &quot;password2&quot;,</div><div class="line">	  &quot;profession&quot; : &quot;librarian&quot;,</div><div class="line">	  &quot;id&quot;: 2</div><div class="line">   &#125;,</div><div class="line">   &quot;user3&quot; : &#123;</div><div class="line">      &quot;name&quot; : &quot;ramesh&quot;,</div><div class="line">	  &quot;password&quot; : &quot;password3&quot;,</div><div class="line">	  &quot;profession&quot; : &quot;clerk&quot;,</div><div class="line">	  &quot;id&quot;: 3</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="获取用户列表"><a href="#获取用户列表" class="headerlink" title="获取用户列表"></a>获取用户列表</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line">app.get(<span class="string">'/listUsers'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	fs.readFile(__dirname+<span class="string">'/'</span>+<span class="string">'users.json'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(data);</div><div class="line">		response.end(data);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure>
<h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="comment">//添加新的用户信息</span></div><div class="line"><span class="keyword">var</span> user = &#123;</div><div class="line">	<span class="string">"user4"</span> : &#123;</div><div class="line">		<span class="string">"name"</span> : <span class="string">"cyb"</span>,</div><div class="line">		<span class="string">"password"</span> : <span class="string">"123456"</span>,</div><div class="line">		<span class="string">"profession"</span> : <span class="string">"student"</span>,</div><div class="line">		<span class="string">"id"</span>: <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">app.get(<span class="string">'/addUser'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	fs.readFile(__dirname+<span class="string">'/'</span>+<span class="string">'users.json'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</div><div class="line">		data = <span class="built_in">JSON</span>.parse(data);</div><div class="line">		data[<span class="string">"user4"</span>]=user[<span class="string">"user4"</span>];</div><div class="line">		<span class="built_in">console</span>.log(data);</div><div class="line">		response.end(<span class="built_in">JSON</span>.stringify(data));</div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure>
<h3 id="显示用户详情"><a href="#显示用户详情" class="headerlink" title="显示用户详情"></a>显示用户详情</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line">app.get(<span class="string">'/:i'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	fs.readFile(__dirname+<span class="string">'/'</span>+<span class="string">'users.json'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</div><div class="line">		data = <span class="built_in">JSON</span>.parse(data);</div><div class="line">		<span class="comment">// 获取相应id的用户</span></div><div class="line">		<span class="keyword">var</span> user = data[<span class="string">"user"</span>+request.params.i];</div><div class="line">		<span class="built_in">console</span>.log(user);</div><div class="line">		response.end(<span class="built_in">JSON</span>.stringify(user));</div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure>
<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line">app.get(<span class="string">'/deleteUser/:id'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</div><div class="line">	fs.readFile(__dirname+<span class="string">'/'</span>+<span class="string">'users.json'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</div><div class="line">		data = <span class="built_in">JSON</span>.parse(data);</div><div class="line">		<span class="comment">// 删除相应 id 的用户</span></div><div class="line">		<span class="keyword">delete</span> data[<span class="string">"user"</span>+request.params.id];</div><div class="line">		<span class="built_in">console</span>.log(data);</div><div class="line">		response.end(<span class="built_in">JSON</span>.stringify(data));</div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;记录Node.js的学习笔记&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>面试知识点</title>
    <link href="http://yoursite.com/2017/03/12/interview/"/>
    <id>http://yoursite.com/2017/03/12/interview/</id>
    <published>2017-03-12T02:56:42.000Z</published>
    <updated>2017-04-24T12:45:13.476Z</updated>
    
    <content type="html"><![CDATA[<p><em>记录面试题</em><br><a id="more"></a></p>
<h1 id="XHTML和HTML的区别"><a href="#XHTML和HTML的区别" class="headerlink" title="XHTML和HTML的区别"></a>XHTML和HTML的区别</h1><ol>
<li>HTML是一种基本的WEB网页设计语言，XHTML是一个基于XML的置标语言；</li>
<li>XHTML元素必须被正确的嵌套；</li>
<li>XHTML元素必须被关闭；</li>
<li>标签名必须用小写；</li>
<li>XHTML文档必须拥有根元素。</li>
</ol>
<hr>
<h1 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h1><p>IE（Trident）、火狐（Gecko）、谷歌（Webkit）、Opera（Presto）、Safari（Webkit）。</p>
<hr>
<h1 id="语义话的HTML"><a href="#语义话的HTML" class="headerlink" title="语义话的HTML"></a>语义话的HTML</h1><ol>
<li>直观地认识标签，对于搜索引擎的抓取有好处，用正确的标签做正确的事；</li>
<li>HTML与异化就是让页面的内容结构化，便于浏览器、搜索引擎解析（利于SEO）；</li>
<li>使阅读源代码的人更容易将网站分块，便于阅读维护理解。</li>
</ol>
<hr>
<h1 id="Doctype的作用"><a href="#Doctype的作用" class="headerlink" title="Doctype的作用"></a>Doctype的作用</h1><p>!Doctype声明位于HTML文档的第一行，处于html标签之前，告知浏览器的解析器用什么文档标准解析该文档。</p>
<p>严格模式：又称标准模式，指浏览器按照 W3C 标准解析文档</p>
<p>混杂模式：又称怪异模式或兼容模式，指浏览器用自己的方式解析代码</p>
<p>如何区分：浏览器解析时使用严格模式还是混杂模式，取决于网页中的DTD。</p>
<ol>
<li>如果文档包含严格的DOCTYPE，那么它一般以严格模式呈现</li>
<li>如果过渡DTD和URI的DOCTYPE，也以严格模式呈现，但有过渡DTD而没有URI会导致页面以混杂模式呈现。</li>
<li>DOCTYPE不存在或形式不正确会导致混杂模式呈现</li>
<li>HTML5没有DTD，因此也就没有严格模式和混杂模式的区别，HTML5有相对宽松的语法，实现时，已经尽可能大的实现向后兼容。</li>
</ol>
<p>意义：严格模式与混杂模式存在的意义与其来源密切相关，如果只存在严格模式，那么许多旧网站必然受影响，如果只存在混杂模式，那么会回到当时浏览器大战时的混乱，每个浏览器都有自己的解析模式。</p>
<hr>
<h1 id="CSS元素分类"><a href="#CSS元素分类" class="headerlink" title="CSS元素分类"></a>CSS元素分类</h1><ol>
<li>块状元素：div,p,form,ul,li,h1,h2…</li>
<li>行内元素：span,a,label,input,img,strong,em…</li>
</ol>
<hr>
<h1 id="CSS隐藏元素的方法"><a href="#CSS隐藏元素的方法" class="headerlink" title="CSS隐藏元素的方法"></a>CSS隐藏元素的方法</h1><ol>
<li>opacity:0<br>不会改变页面布局，如果绑定事件如click事件，那么点击该区域，也能触发点击事件</li>
<li>display:noneH<br>不会改变页面布局，但是不会触发该元素已经绑定的事件</li>
<li>visibility:hidden<br>会改变页面布局，可以理解成在页面中把该元素删除掉一样</li>
<li>position:absolute;top:-9999px;left:-9999px<br>将元素移除可使区域</li>
<li>clip-path: polygon(0px 0px,0px 0px,0px 0px,0px 0px)<br>裁剪元素</li>
</ol>
<hr>
<h1 id="link和-import的区别"><a href="#link和-import的区别" class="headerlink" title="link和@import的区别"></a>link和@import的区别</h1><ol>
<li>link属于XHTML标签，除了加载css外，还成用于定义RSS,定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS；</li>
<li>页面被加载时，link会同时加载，而@import引用的CSS会等到页面被加载完毕后再加载；</li>
<li>link无兼容问题，@import是CSS2.1提出的，只在IE5以上才能被识别。</li>
</ol>
<hr>
<h1 id="title和alt属性的区别"><a href="#title和alt属性的区别" class="headerlink" title="title和alt属性的区别"></a>title和alt属性的区别</h1><p>alt 当图片不显示时用文字代替<br>title 为该属性提供信息</p>
<hr>
<h1 id="栅格系统原理（Bootstrap）"><a href="#栅格系统原理（Bootstrap）" class="headerlink" title="栅格系统原理（Bootstrap）"></a>栅格系统原理（Bootstrap）</h1><p>默认字体大小为14px</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">			*&#123;</div><div class="line">				<span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line">				<span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">				<span class="attribute">box-sizing</span>:border-box;</div><div class="line">			&#125;</div><div class="line">			<span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</div><div class="line">				<span class="attribute">width</span>:<span class="number">100%</span>;</div><div class="line">				<span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">			<span class="selector-class">.container</span>&#123;</div><div class="line">				<span class="attribute">width</span>:<span class="number">704px</span>;</div><div class="line">				<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">15px</span>;</div><div class="line">				<span class="attribute">background</span>:<span class="number">#eee</span>;</div><div class="line">				<span class="attribute">margin</span>:<span class="number">0</span> auto;</div><div class="line">			&#125;</div><div class="line">			<span class="selector-class">.row</span>&#123;</div><div class="line">				<span class="attribute">margin</span>:<span class="number">0</span> -<span class="number">15px</span>;</div><div class="line">				<span class="attribute">background</span>:<span class="number">#ccc</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="selector-class">.col</span>&#123;</div><div class="line">				<span class="attribute">float</span>:left;</div><div class="line">				<span class="attribute">width</span>:<span class="number">10%</span>;</div><div class="line">				<span class="attribute">height</span>:<span class="number">50px</span>;</div><div class="line">				<span class="attribute">background</span>:<span class="number">#aaa</span>;</div><div class="line">				<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">15px</span>;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">javascript</span>&gt;</span><span class="undefined"></span></div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear:both;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>onabort：图像加载被中断<br>onblur：元素失去焦点<br>onchange：用户改变域的内容<br>onclick：鼠标点击某个对象<br>ondblclick：鼠标双击某个对象<br>onerror：当加载文档或图像时发生某个错误<br>onfocus：元素获得焦点<br>onkeydown：某个键盘的键被按下<br>onkeyprerss：某个键盘的键被按下或按住<br>onkeyup：某个键盘的键被松开<br>onload：某个页面或图像被完成加载<br>onmousedown：某个鼠标按键被按下<br>onmousemove：鼠标被移动<br>onmouseout：鼠标从某元素移开<br>onmouseover：鼠标被移到某元素之上<br>onmouseup：某个鼠标按键被松开<br>onreset：重置按钮被点击<br>onresize：窗口或框架被调整尺寸<br>onselect：文本被选定<br>onsubmit：提交按钮被点击<br>onunload：用户退出页面</p>
<hr>
<h1 id="Cookies-和-Session"><a href="#Cookies-和-Session" class="headerlink" title="Cookies 和 Session"></a>Cookies 和 Session</h1><ol>
<li>Cookie 是一种发送到客户浏览器的文本串句柄，并保存在客户机硬盘上，可以用来在某个WEB站点会话间持久的保持数据。</li>
<li>Session其实指的就是访问者从到达某个特定主页到离开为止的那段时间。 Session其实是利用Cookie进行信息处理的，当用户首先进行了请求后，服务端就在用户浏览器上创建了一个Cookie，当这个Session结束时，其实就是意味着这个Cookie就过期了。<br>注：为这个用户创建的Cookie的名称是aspsessionid。这个Cookie的唯一目的就是为每一个用户提供不同的身份认证。</li>
<li>Cookie和Session的共同之处在于：Cookie和Session都是用来跟踪浏览器用户身份的会话方式。</li>
<li>Cookie和Session的区别是：Cookie数据保存在客户端，Session数据保存在服务器端。<br>简单的说，当你登录一个网站的时候，如果web服务器端使用的是Session，那么所有的数据都保存在服务器上，客户端每次请求服务器的时候会发送当前会话的sessionid，服务器根据当前sessionid判断相应的用户数据标志，以确定用户是否登录或具有某种权限。由于数据是存储在服务器上面，所以你不能伪造，但是如果你能够获取某个登录用户的 sessionid，用特殊的浏览器伪造该用户的请求也是能够成功的。sessionid是服务器和客户端链接时候随机分配的，一般来说是不会有重复，但如果有大量的并发请求，也不是没有重复的可能性。<br>如果浏览器使用的是cookie，那么所有的数据都保存在浏览器端，比如你登录以后，服务器设置了cookie用户名，那么当你再次请求服务器的时候，浏览器会将用户名一块发送给服务器，这些变量有一定的特殊标记。服务器会解释为cookie变量，所以只要不关闭浏览器，那么cookie变量一直是有效的，所以能够保证长时间不掉线。如果你能够截获某个用户的 cookie变量，然后伪造一个数据包发送过去，那么服务器还是认为你是合法的。<br>所以，使用 cookie被攻击的可能性比较大。如果设置了的有效时间，那么它会将 cookie保存在客户端的硬盘上，下次再访问该网站的时候，浏览器先检查有没有 cookie，如果有的话，就读取该 cookie，然后发送给服务器。如果你在机器上面保存了某个论坛 cookie，有效期是一年，如果有人入侵你的机器，将你的  cookie拷走，然后放在他的浏览器的目录下面，那么他登录该网站的时候就是用你的的身份登录的。所以 cookie是可以伪造的。当然，伪造的时候需要主意，直接copy cookie文件到 cookie目录，浏览器是不认的，他有一个index.dat文件，存储了 cookie文件的建立时间，以及是否有修改，所以你必须先要有该网站的 cookie文件，并且要从保证时间上骗过浏览器。</li>
<li>两个都可以用来存私密的东西，同样也都有有效期的说法,区别在于session是放在服务器上的，过期与否取决于服务期的设定，cookie是存在客户端的，过去与否可以在cookie生成的时候设置进去。<br>(1) cookie数据存放在客户的浏览器上，session数据放在服务器上<br>(2) cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗,如果主要考虑到安全应当使用session<br>(3) session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，如果主要考虑到减轻服务器性能方面，应当使用COOKIE<br>(4) 单个cookie在客户端的限制是3K，就是说一个站点在客户端存放的COOKIE不能3K。<br>(5) 所以：将登陆信息等重要信息存放为SESSION;其他信息如果需要保留，可以放在COOKIE中</li>
</ol>
<hr>
<h1 id="Localstorage-、-Sessionstorage-和-Cookies"><a href="#Localstorage-、-Sessionstorage-和-Cookies" class="headerlink" title="Localstorage 、 Sessionstorage 和 Cookies"></a>Localstorage 、 Sessionstorage 和 Cookies</h1><p>共同点：都是保存在浏览器端，且同源。<br>区别:</p>
<ol>
<li>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。</li>
<li>存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li>
<li>数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。</li>
<li>作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。</li>
<li>Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。</li>
<li>Web Storage 的 api 接口使用更方便。</li>
</ol>
<hr>
<h1 id="浏览器内多个标签页之间的通信"><a href="#浏览器内多个标签页之间的通信" class="headerlink" title="浏览器内多个标签页之间的通信"></a>浏览器内多个标签页之间的通信</h1><h2 id="方法一：localstorage"><a href="#方法一：localstorage" class="headerlink" title="方法一：localstorage"></a>方法一：localstorage</h2><p>localstorage在一个标签页里被添加、修改或删除时，都会触发一个storage事件，通过在另一个标签页里监听storage事件，即可得到localstorage存储的值，实现不同标签页之间的通信。</p>
<p>标签页1<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"inp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> inp = <span class="built_in">document</span>.getElementById(<span class="string">"inp"</span>);</div><div class="line">		btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> value = inp.value;</div><div class="line">			localStorage.setItem(<span class="string">"name"</span>, value);</div><div class="line">		&#125;;</div><div class="line">	&#125;)();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>标签页2<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">window</span>.addEventListener(<span class="string">'storage'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(event.key+<span class="string">"="</span>+event.newValue);</div><div class="line">		&#125;);</div><div class="line">	&#125;)();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="方法二：cookies-setInterval"><a href="#方法二：cookies-setInterval" class="headerlink" title="方法二：cookies+setInterval"></a>方法二：cookies+setInterval</h2><p>将要传递的信息存储在cookie中，每隔一定事件读取cookie信息，即可随时获取要传递的信息</p>
<p>标签页1<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"inp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> inp = <span class="built_in">document</span>.getElementById(<span class="string">"inp"</span>);</div><div class="line">		btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> value = inp.value;</div><div class="line">			<span class="built_in">document</span>.cookie=<span class="string">"name="</span>+name;</div><div class="line">		&#125;;</div><div class="line">	&#125;)();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>标签页2<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">key</span>) </span>&#123;    </div><div class="line">            <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="string">"&#123;\""</span> + <span class="built_in">document</span>.cookie.replace(<span class="regexp">/;\s+/gim</span>,<span class="string">"\",\""</span>).replace(<span class="regexp">/=/gim</span>, <span class="string">"\":\""</span>) + <span class="string">"\"&#125;"</span>)[key];    </div><div class="line">        &#125;     </div><div class="line">        setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"name="</span> + getCookie(<span class="string">"name"</span>));    </div><div class="line">        &#125;, <span class="number">10000</span>); </div><div class="line">	&#125;)();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="JavaScript数据类型"><a href="#JavaScript数据类型" class="headerlink" title="JavaScript数据类型"></a>JavaScript数据类型</h2><p>六种基本类型：String,Boolean,Number,null,undefined,symbol((es6引入)</p>
<p>七种数据类型：String,Boolean,Number,null,undefined,Object,Array</p>
<p>typeof返回六种情况：String,Boolean,Number,undefined,Object,function</p>
<h2 id="text转化成json"><a href="#text转化成json" class="headerlink" title="text转化成json"></a>text转化成json</h2><ol>
<li>responseText = eval(‘(‘ + responseText + ‘)’);</li>
<li>responseText = JSON.parse(responseText);</li>
<li>responseText = (new Function(“return “ + responseText))();</li>
</ol>
<hr>
<h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><h2 id="W3C标准盒子模型"><a href="#W3C标准盒子模型" class="headerlink" title="W3C标准盒子模型"></a>W3C标准盒子模型</h2><p>W3C定义的盒子模型包括 内容（content）、内边距（padding）、边框（border）、外边距（margin）。<br>其中内容（content）部分不包含其它部分。</p>
<h2 id="IE盒子模型"><a href="#IE盒子模型" class="headerlink" title="IE盒子模型"></a>IE盒子模型</h2><p>IE盒子模型包括 内容（content）、内边距（padding）、边框（border）、外边距（margin）。<br>其中内容（content）包括内边距（padding）和边框（border）。</p>
<h1 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h1><table>
<thead>
<tr>
<th style="text-align:center">选择器</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">权重</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">style=””</td>
<td style="text-align:center">内联样式</td>
<td style="text-align:center">1000</td>
</tr>
<tr>
<td style="text-align:center">#id</td>
<td style="text-align:center">id选择器</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center">.class</td>
<td style="text-align:center">类选择器</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">p:hover</td>
<td style="text-align:center">伪类选择器</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">p[title=””]</td>
<td style="text-align:center">属性选择器</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">p</td>
<td style="text-align:center">标签选择器</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">ul::after</td>
<td style="text-align:center">伪选择器</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="页面加载过程"><a href="#页面加载过程" class="headerlink" title="页面加载过程"></a>页面加载过程</h1><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol>
<li>查找浏览器缓存；</li>
<li>DNS解析、查找该域名对应的IP地址、重定向（301）、发出第二个GET请求</li>
<li>进行HTTP协议会话</li>
<li>客户端发送请求报头</li>
<li>文档开始下载</li>
<li>文档树建立，根据标记请求所需执行MIME类型的文件</li>
<li>文件显示</li>
</ol>
<p>浏览器这边的工作大致分为：</p>
<ol>
<li>加载：根据请求的URL进行域名解析，向服务器发起请求，接受文件（HTML,JS,CSS,图像等）；</li>
<li>解析：对加载到的资源（HTML,JS,CSS等）进行语法解析。</li>
</ol>
<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><ol>
<li>主机向服务器发送一个建立连接的请求（ 您好，我想认识您 ）；</li>
<li>服务器接到请求后发送同意连接的信号（ 好的，很高兴认识您 ）；</li>
<li>主机接到同意连接的信号后，再次向服务器发送了确认信号（ 我也很高兴认识您），自此，主机与服务器两者建立了连接。</li>
</ol>
<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><ol>
<li>主机向服务器发送一个断开连接的请求（ 不早了，我该走了 ）；</li>
<li>服务器接到请求后发送确认收到请求的信号（ 知道了 ）；</li>
<li>服务器向主机发送断开通知（ 我也该走了 ）；</li>
<li>主机接到断开通知后断开连接并反馈一个确认信号（ 嗯，好的 ），服务器收到确认信号后断开连接。</li>
</ol>
<hr>
<h1 id="ready和onload的区别"><a href="#ready和onload的区别" class="headerlink" title="ready和onload的区别"></a>ready和onload的区别</h1><p>jQuery中 $(document).ready()和window.onload的区别</p>
<h2 id="执行时间"><a href="#执行时间" class="headerlink" title="执行时间"></a>执行时间</h2><p>$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。<br>window.onload必须等到页面内包括图片的所有元素加载完毕才能执行。</p>
<h2 id="编写个数"><a href="#编写个数" class="headerlink" title="编写个数"></a>编写个数</h2><p>$(document).ready()可以同时编写多个，并且都可以得到执行。<br>window.onload不能同时编写多个，如有多个只会执行一个。</p>
<h2 id="简化写法"><a href="#简化写法" class="headerlink" title="简化写法"></a>简化写法</h2><p>$(document).ready(function(){});可以简写成$(function(){});。<br>window.onload没有简化写法。</p>
<hr>
<h1 id="清除元素浮动"><a href="#清除元素浮动" class="headerlink" title="清除元素浮动"></a>清除元素浮动</h1><h2 id="clear属性"><a href="#clear属性" class="headerlink" title="clear属性"></a>clear属性</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#000</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.div</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">background</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.clear</span> &#123;</div><div class="line">	<span class="attribute">clear</span>: both;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper clear"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#000</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.clear</span> &#123;</div><div class="line">	<span class="comment">/*兼容IE*/</span></div><div class="line">	<span class="attribute">zoom</span>:<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">	<span class="attribute">display</span>:block;</div><div class="line">	<span class="attribute">content</span>:<span class="string">""</span>;</div><div class="line">	<span class="attribute">clear</span>:both;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.div</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">background</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">br</span> <span class="attr">clear</span>=<span class="string">"all"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#000</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.div</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">background</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="overflow属性"><a href="#overflow属性" class="headerlink" title="overflow属性"></a>overflow属性</h2><p>父元素设置overflow属性为auto或hidden<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#000</span>;</div><div class="line">	<span class="attribute">overflow</span>:auto;</div><div class="line">	<span class="comment">/*overflow:hidden;*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.div</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">background</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h2><p>父元素设置display属性为inline-block<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#000</span>;</div><div class="line">	<span class="attribute">display</span>:inline-block;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.div</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">background</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="父级元素浮动"><a href="#父级元素浮动" class="headerlink" title="父级元素浮动"></a>父级元素浮动</h2><p>父元素设置float属性为left或right<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#000</span>;</div><div class="line">	<span class="attribute">float</span>:left;</div><div class="line">	<span class="comment">/*float:right;*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.div</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">background</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;记录面试题&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>js学习之事件模型</title>
    <link href="http://yoursite.com/2017/03/10/js-dom/"/>
    <id>http://yoursite.com/2017/03/10/js-dom/</id>
    <published>2017-03-10T14:15:18.000Z</published>
    <updated>2017-04-22T04:55:00.387Z</updated>
    
    <content type="html"><![CDATA[<p><em>一直对JavaScript中的事件模型不是很清楚，特此记录学习笔记</em><br><a id="more"></a></p>
<hr>
<h1 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h1><p>Dom(文档对象模型)结构是一个树形结构，当一个HTML元素产生一个事件时，该事件会在元素节点与根节点之间按特定的顺序传播，路径所经过的节点都会收到该事件，这个传播过程称为DOM事件流。</p>
<p>事件顺序有两种类型：事件捕获和事件冒泡</p>
<h2 id="冒泡型事件（Event-Bubbling）"><a href="#冒泡型事件（Event-Bubbling）" class="headerlink" title="冒泡型事件（Event Bubbling）"></a>冒泡型事件（Event Bubbling）</h2><p>这是IE浏览器对事件模型的实现，也是最容易理解的。冒泡，顾名思义，事件像水中的气泡一样往上冒，直到顶端。<br>从DOM树形结构上理解，就是事件由具有从属关系的最确定的目标元素一直传递到最不确定的目标元素。<br>即从当前元素一层一层往外直到最顶层。</p>
<h2 id="捕获型事件（Event-Capturing）"><a href="#捕获型事件（Event-Capturing）" class="headerlink" title="捕获型事件（Event Capturing）"></a>捕获型事件（Event Capturing）</h2><p>与冒泡型刚好相反，由DOM树最顶层元素一直到最精确的元素。</p>
<h2 id="标准的事件传送模式"><a href="#标准的事件传送模式" class="headerlink" title="标准的事件传送模式"></a>标准的事件传送模式</h2><p>（1）.在事件捕捉（Capturing）阶段，事件将沿着DOM树向下传送，目标节点的每一个祖先节点，直至目标节点。例如，若用户单击了一个超链接，则该单击事件将从document节点转送到html元素，body元素以及包含该链接的p元素。<br>在此过程中，浏览器都会检测针对该事件的捕捉事件监听器，并且运行这件事件监听器。<br>（2）. 在目标（target）阶段，浏览器在查找到已经指定给目标事件的事件监听器之后，就会运行 该事件监听器。目标节点就是触发事件的DOM节点。例如，如果用户单击一个超链接，那么该链接就是目标节点（此时的目标节点实际上是超链接内的文本节点）。<br>（3）.在冒泡（Bubbling）阶段，事件将沿着DOM树向上转送，再次逐个访问目标元素的祖先节点到document节点。该过程中的每一步。浏览器都将检测那些不是捕捉事件监听器的事件监听器，并执行它们。</p>
<blockquote>
<p>并非所有的事件都经过冒泡阶段<br>所有的事件都要经过捕捉阶段和目标阶段，但是有些事件会跳过冒泡阶段，例如让元素获得输入焦点的focus事件和失去输入焦点的blur事件都不会冒泡。</p>
</blockquote>
<hr>
<h1 id="事件句柄和事件监听器"><a href="#事件句柄和事件监听器" class="headerlink" title="事件句柄和事件监听器"></a>事件句柄和事件监听器</h1><h2 id="事件句柄"><a href="#事件句柄" class="headerlink" title="事件句柄"></a>事件句柄</h2><p>事件句柄（又称事件处理函数，DOM称之为事件监听函数），用于响应某个事件而调用的函数称为事件处理函数。<br>每一个事件对应一个句柄，响应点击事件的函数是onclick事件处理函数，可以分配在HTML和JavaScript中。</p>
<blockquote>
<p><strong>HTML</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"#"</span> onclick=<span class="string">"click"</span>&gt;click me!<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p><strong>JavaSript</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.getElementById(<span class="string">"mylink"</span>);</div><div class="line">link.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	dosomething();</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="事件监听器"><a href="#事件监听器" class="headerlink" title="事件监听器"></a>事件监听器</h2><p>现在大多数浏览器都内置了一些更高级的事件处理方式，即事件监听器，这种处理方式就不受一个元素只能绑定一个事件句柄的限制。<br>事件句柄和事件监听器最大的不同就是在使用事件句柄时一次只能插接一个事件句柄，但对于事件监听器，一次可以插接多个。</p>
<h3 id="IE下的事件监听器"><a href="#IE下的事件监听器" class="headerlink" title="IE下的事件监听器"></a>IE下的事件监听器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.attachEvent(<span class="string">"onevent"</span>,eventListener);</div></pre></td></tr></table></figure>
<p>在IE中想要给一个元素的事件附加事件处理函数，必须调用attachEvent方法才能创建一个事件监听器。attachEvent方法允许外界注册该元素多个事件监听器。<br>attachEvent方法接受两个参数，第一个参数是<em>事件类型名</em>（’on’开头），第二个参数是<em>回调处理函数</em>。<br><strong>注意：IE中用attachEvent注册的处理函数调用this指向不再是先前注册事件的元素，此时的this为window对象。</strong><br>用detachEvent方法即可移除，参数相同。</p>
<h3 id="DOM标准下的事件监听器"><a href="#DOM标准下的事件监听器" class="headerlink" title="DOM标准下的事件监听器"></a>DOM标准下的事件监听器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//标准语法</span></div><div class="line">element.addEventListener(<span class="string">'event'</span>,eventListener,useCapture);</div><div class="line"><span class="comment">//默认</span></div><div class="line">element.addEventListener(<span class="string">'event'</span>,eventListener,<span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>addEventListener方法接受三个参数，第一个参数是<em>事件类型名</em>（没’on’开头），第二个参数是<em>回调处理函数</em>，第三个参数<em>注明该处理函数在事件传递过程中是否调用捕获阶段</em>，通常设置为false（为false时是冒泡），如果设置为true，就创建一个捕捉事件监听器。<br>用removeEventListener方法即可移除，参数必须完全相同（包括useCapture的值）。</p>
<h3 id="跨浏览器的注册与移除元素事件监听器"><a href="#跨浏览器的注册与移除元素事件监听器" class="headerlink" title="跨浏览器的注册与移除元素事件监听器"></a>跨浏览器的注册与移除元素事件监听器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Event = &#123;</div><div class="line">	<span class="comment">//注册</span></div><div class="line">	addHandler:<span class="function"><span class="keyword">function</span>(<span class="params">element,type,handle</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(element.addEventListener)&#123;</div><div class="line">			element.addEventListener(type,handle,<span class="literal">false</span>);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent)&#123;</div><div class="line">			element.attachEvent(<span class="string">"on"</span>+type,handle);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			element[<span class="string">"on"</span>+type] = handle;</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	<span class="comment">//移除</span></div><div class="line">	removeHandle:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(element.remoeEventListener)&#123;</div><div class="line">			element.removeEventListener(type,handle,<span class="literal">false</span>);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.detachEvent)&#123;</div><div class="line">			element.detachEvent(<span class="string">"on"</span>+type,handle);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			element[<span class="string">"on"</span>+type] = <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h1 id="事件对象引用"><a href="#事件对象引用" class="headerlink" title="事件对象引用"></a>事件对象引用</h1><p>为了可以更好地处理事件，可以根据所发生的事件的特定属性来采取不同的操作。<br>与事件模型类似，IE使用一个event的全局事件对象来处理对象（可以在全局变量window.event来访问），其它浏览器采用的W3C推荐的方式，使用独立的包含事件对象的参数传递。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventUtil=&#123;</div><div class="line">	<span class="attr">getEvent</span>:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> event?event:<span class="built_in">window</span>.event;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">getTarget</span>:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> event.target || event.srcElement;</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h1 id="停止事件冒泡和阻止事件的默认行为"><a href="#停止事件冒泡和阻止事件的默认行为" class="headerlink" title="停止事件冒泡和阻止事件的默认行为"></a>停止事件冒泡和阻止事件的默认行为</h1><p>停止事件冒泡和阻止事件的默认行为这两个概念非常重要吗，它们对复杂的应用程序处理非常有用。</p>
<h2 id="停止事件冒泡"><a href="#停止事件冒泡" class="headerlink" title="停止事件冒泡"></a>停止事件冒泡</h2><p>停止事件冒泡，指停止冒泡型事件的进一步传递。在冒泡型时间传递中，如果在body处理停止事件传递后，位于上层的document的事件监听器就不再收到通知，不再被处理。</p>
<h3 id="IE下的停止事件冒泡"><a href="#IE下的停止事件冒泡" class="headerlink" title="IE下的停止事件冒泡"></a>IE下的停止事件冒泡</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">someHandle</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>; <span class="comment">// 取消冒泡</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DOM标准下的停止事件冒泡"><a href="#DOM标准下的停止事件冒泡" class="headerlink" title="DOM标准下的停止事件冒泡"></a>DOM标准下的停止事件冒泡</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">someHandle</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">	event.stopPropagation();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="跨浏览器的事件事件冒泡"><a href="#跨浏览器的事件事件冒泡" class="headerlink" title="跨浏览器的事件事件冒泡"></a>跨浏览器的事件事件冒泡</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">someHandle</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">	event=event || <span class="built_in">window</span>.event;</div><div class="line">	<span class="keyword">if</span>(event.stopPropagation)&#123;</div><div class="line">		event.stopPropagation();</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		event.cancelBubble = <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="停止事件的默认行为"><a href="#停止事件的默认行为" class="headerlink" title="停止事件的默认行为"></a>停止事件的默认行为</h2><p>停止事件的默认行为，指通常浏览器在事件传递并处理完后会执行与该事件相关联的默认动作。<br>例如，表单中input type的属性是”submit”，点击后在事件传播完后，浏览器就自动提交表单。<br>又例如，input元素的keydown事件发生并树立后，浏览器默认会将用户键入的字符自动追加到input元素中。</p>
<h3 id="IE下的停止事件的默认行为"><a href="#IE下的停止事件的默认行为" class="headerlink" title="IE下的停止事件的默认行为"></a>IE下的停止事件的默认行为</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">someHandle</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DOM标准下的停止事件的默认行为"><a href="#DOM标准下的停止事件的默认行为" class="headerlink" title="DOM标准下的停止事件的默认行为"></a>DOM标准下的停止事件的默认行为</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">someHandle</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">	event.preventDefault();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="跨浏览器的停止时间的默认行为"><a href="#跨浏览器的停止时间的默认行为" class="headerlink" title="跨浏览器的停止时间的默认行为"></a>跨浏览器的停止时间的默认行为</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">someHandle</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">	event = event || <span class="built_in">window</span>.event;</div><div class="line">	<span class="keyword">if</span>(event.preventDefault)&#123;</div><div class="line">		event.preventDefault();</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		event.returnValue = <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="完整的事件处理兼容性函数"><a href="#完整的事件处理兼容性函数" class="headerlink" title="完整的事件处理兼容性函数"></a>完整的事件处理兼容性函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventUtil=&#123;</div><div class="line">	<span class="comment">//添加事件</span></div><div class="line">	addHandler:<span class="function"><span class="keyword">function</span>(<span class="params">element,type,handle</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(element.addEventListener)&#123;</div><div class="line">			element.addEventListener(type,handle.false);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent)&#123;</div><div class="line">			element.attachEvent(<span class="string">"on"</span>+type,handle);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			element[<span class="string">"on"</span>+type]=handle;</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	<span class="comment">//移除事件</span></div><div class="line">	removeHandler:<span class="function"><span class="keyword">function</span>(<span class="params">element,type,handle</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(element.removeEventListener)&#123;</div><div class="line">			element.removeEventListener(type,handle,<span class="literal">false</span>);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.detachEvent)&#123;</div><div class="line">			element.detachEvent(<span class="string">"on"</span>+type,handle);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			element[<span class="string">"on"</span>+type]=<span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	<span class="comment">//获取事件对象</span></div><div class="line">	getEvent:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> event?event:<span class="built_in">window</span>.event;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">getTarget</span>:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> event.target || event.srcElement;</div><div class="line">	&#125;,</div><div class="line">	<span class="comment">//停止冒泡</span></div><div class="line">	stopPropagation:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		event=event||<span class="built_in">window</span>.event;</div><div class="line">		<span class="keyword">if</span>(event.stopPropagation)&#123;</div><div class="line">			event.stopPropagation();</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			event.cancelBubble=<span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	<span class="comment">//停止事件的默认行为</span></div><div class="line">	preventDefault:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">		event=event||<span class="built_in">window</span>.event;</div><div class="line">		<span class="keyword">if</span>(event.preventDefault)&#123;</div><div class="line">			event.preventDefault();</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			event.returnValue=<span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h1 id="捕获型事件模型与冒泡型事件模型的应用场合"><a href="#捕获型事件模型与冒泡型事件模型的应用场合" class="headerlink" title="捕获型事件模型与冒泡型事件模型的应用场合"></a>捕获型事件模型与冒泡型事件模型的应用场合</h1><h2 id="捕获型事件模型的应用场合"><a href="#捕获型事件模型的应用场合" class="headerlink" title="捕获型事件模型的应用场合"></a>捕获型事件模型的应用场合</h2><p>捕获型事件传递由最不精确的祖先元素一直到最精确的事件源元素，传递方式与操作系统中的全局快捷键与应用程序快捷键相似。<br>当一个系统组合键发生时，如果注册了系统全局快捷键监听器，该事件就先被操作系统层捕获，全局监听器就先于应用程序快捷键监听器得到通知，也就是全局的先获得控制权，它有权阻止事件的进一步传递。<br>所以捕获型事件模型适用于作<strong>全局范围</strong>内的监听，这里的全局是相对的全局，相对于某个顶层结点与该结点所有子孙结点形成的集合范围。<br>例如你想作全局的点击事件监听，相对于document结点与document下所有的子结点，在某个条件下要求所有的子结点点击无效，这种情况下冒泡模型就解决不了了，而捕获型却非常适合，可以在最顶层结点添加捕获型事件监听器。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">globalClickListener</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(canEventPass == <span class="literal">false</span>)&#123;</div><div class="line">		<span class="comment">//取消事件的进一步向子节点传递和冒泡传递</span></div><div class="line">		event.stopPropagation();</div><div class="line">		<span class="comment">//取消浏览器事件后的默认行为</span></div><div class="line">		event.preventDefault();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="冒泡型事件模型的应用场合"><a href="#冒泡型事件模型的应用场合" class="headerlink" title="冒泡型事件模型的应用场合"></a>冒泡型事件模型的应用场合</h2><p>在元素一些频繁触发的事件中，如onmousemove,onmouseover,onmouseout,如果明确事件处理后没必要进一步传递，那么就可以大胆的取消它。<br>此外，对于子结点事件监听器的处理会对父层监听器处理造成负面影响的，也应该在子结点监听器中禁止事件进一步向上传递以消除影响。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onclick</span>=<span class="string">"alert('current is body');"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div0"</span> <span class="attr">onclick</span>=<span class="string">"alert('current is '+this.id)"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">onclick</span>=<span class="string">"alert('current is '+this.id)"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span> <span class="attr">onclick</span>=<span class="string">"alert('current is '+this.id)"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"event_source"</span> <span class="attr">onclick</span>=<span class="string">"alert('current is '+this.id)"</span> <span class="attr">style</span>=<span class="string">"height:200px;width:200px;background-color:red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>点击event_source时无论是DOM标准还是IE，直接写在HTML里的监听处理函数是事件冒泡传递时调用的，由最里层一直往上传递，先后出现<br>current is event_source<br>current is div2<br>current is div1<br>current is div0<br>current is body</p>
<p>添加以下片段<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> div2 = <span class="built_in">document</span>.getElementById(<span class="string">"div2"</span>);</div><div class="line">EventUtil.addHandler(div2,<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">	event=EventUtil.getEvent();</div><div class="line">	EventUtil.stopPropagation(event);</div><div class="line">&#125;,<span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p>点击出现<br>current is event_source<br>current is div2</p>
<p>在支持DOM标准的浏览器中，添加以下代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	event.stopPropagation();</div><div class="line">&#125;,<span class="literal">true</span>);<span class="comment">//在捕获型传递调用</span></div></pre></td></tr></table></figure></p>
<p>以上代码中的监听函数由于是捕获型传递时被调用的,所以点击event_source后,虽然事件源是id为event_source的元素,但捕获型选传递,从最顶层开始,body节点监听函数先被调用,并且取消了事件进一步向下传递,所以只会出现current is body 。 </p>
<h1 id="事件的代理和委托（Delegation）"><a href="#事件的代理和委托（Delegation）" class="headerlink" title="事件的代理和委托（Delegation）"></a>事件的代理和委托（Delegation）</h1><blockquote>
<p>事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。</p>
</blockquote>
<h2 id="JavaScript事件代理"><a href="#JavaScript事件代理" class="headerlink" title="JavaScript事件代理"></a>JavaScript事件代理</h2><p>当我们需要对很多元素添加事件时，可以通过将事件添加到它们的父节点而将事件委托给父节点来触发处理函数。这主要得益于浏览器的事件冒泡机制。</p>
<p>假如有一个ul的父节点，包含了很多个li的子节点<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"item1"</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"item2"</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"item3"</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"item4"</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>当我们需要用到li点击事件时，通常的写法是为每个li都添加点击事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</div><div class="line"><span class="keyword">var</span> item = list.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;item.length;i++)&#123;</div><div class="line">	item[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">	&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果这个ul中的li子元素会频繁地添加或删除节点，我们就需要在每次添加li节点的时为每个li节点都重新添加点击事件，这就增加了复杂度和出错的可能性。<br>更简单的方法是使用事件代理机制，当事件被抛到父节点的时候，我们通过检查事件的目标对象（target）来判断并获取事件源li。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</div><div class="line">list.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">	<span class="comment">// 兼容IE</span></div><div class="line">	<span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</div><div class="line">	<span class="keyword">var</span> target = e.target || e.srcElement; <span class="comment">// 获取事件源</span></div><div class="line">	<span class="built_in">console</span>.log(target);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>为父节点添加一个click事件，当子节点被点击时，click事件会从子节点开始向上冒泡。父节点捕获到事件之后，通过判断e.target来判断是否为我们需要的节点。</p>
<h2 id="jQuery中delegate函数"><a href="#jQuery中delegate函数" class="headerlink" title="jQuery中delegate函数"></a>jQuery中delegate函数</h2><p>jQuery的delegate的方法需要三个参数，一个选择器，一个事件名称和事件处理函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list = $(<span class="string">'#list'</span>);</div><div class="line">list.delegate(<span class="string">'li'</span>,<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>事件委托带来的几个优点：</p>
<ol>
<li>管理的函数变少，不需要为每个元素都添加监听事件，对于同一个父节点下面类似的子元素，可以通过委托给父元素的监听函数来处理事。</li>
<li>可以方便地动态添加和修改元素，不需要因为元素的改动而修改事件绑定。</li>
<li>JavaScript和DOM节点之间的关联减少，这样也就减少了因循环引用而带来的内存泄漏发生的概率。</li>
</ol>
<p>适合用事件委托的事件：click，mousedown，mouseup，keydown，keyup，keypress。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;一直对JavaScript中的事件模型不是很清楚，特此记录学习笔记&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js学习之(原型)继承</title>
    <link href="http://yoursite.com/2017/02/21/entend/"/>
    <id>http://yoursite.com/2017/02/21/entend/</id>
    <published>2017-02-21T13:11:35.000Z</published>
    <updated>2017-03-31T13:28:03.172Z</updated>
    
    <content type="html"><![CDATA[<p>参考《你不知道的JavaScript》<a id="more"></a><br>继承意味着复制操作，JavaScript(默认)不会复制对象属性。<br>JavaScript会在两个对象之间创建一个关联，这样一个对象就可以通过委托访问另一个对象的属性和函数。<br>函数不是构造函数，但是当且仅当使用 new 时，函数调用会变成“构造函数调用”。</p>
<h1 id="创建一个关联对象"><a href="#创建一个关联对象" class="headerlink" title="创建一个关联对象"></a>创建一个关联对象</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">//ES6之前</span></div><div class="line">Bar.prototype = <span class="built_in">Object</span>.create(Foo.prototype);</div><div class="line"></div><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="built_in">Object</span>.setPrototypeOf(Bar.prototype,Foo.prototype);</div></pre></td></tr></table></figure>
<p>Object.create()会创建一个新对象(这里指Bar.prototype)并把新对象内部的[[Prototype]]关联到指定的对象中(这里指Foo)。</p>
<p>[[Prototype]]机制就是存在于对象中的一个内部链接，它会引用其它对象。</p>
<p>构造函数、原型、实例的关系：<br>每个构造对象都有一个原型对象，原型对象包含一个指向构造函数的指针（prototype），而实例则包含一个指向原型对象的指针（<strong>proto</strong>）。</p>
<hr>
<h1 id="原型继承实现方式"><a href="#原型继承实现方式" class="headerlink" title="原型继承实现方式"></a>原型继承实现方式</h1><p>1.定义新的构造函数，并在内部用<strong>call()</strong>调用希望继承的构造函数，并绑定this；<br>2.借助中间函数<strong>F</strong>实现原型继承，最好通过封装的Object.create()函数实现；<br>3.继续在新的构造函数的原型上定义新方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 父</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">props</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name=props.name||<span class="string">'Unnamed'</span>;</div><div class="line">&#125;</div><div class="line">Student.prototype.hello=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Hello,'</span>+<span class="keyword">this</span>.name+<span class="string">'!'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 子</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PrimaryStudent</span>(<span class="params">props</span>)</span>&#123;</div><div class="line">	Student.call(<span class="keyword">this</span>,props);</div><div class="line">	<span class="keyword">this</span>.grade=props.grade || <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">			</div><div class="line"><span class="comment">// 定义空函数，作桥接作用</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="comment">// 把F的原型指向Student.prototype</span></div><div class="line">F.prototype=Student.prototype;</div><div class="line"></div><div class="line"><span class="comment">// 把PrimaryStudent的原型指向一个新的F对象，F对象的原型正好指向Student.prototype</span></div><div class="line">PrimaryStudent.prototype=<span class="keyword">new</span> F();</div><div class="line"></div><div class="line"><span class="comment">// 把PrimaryStudent原型的构造函数修复为PrimaryStudent</span></div><div class="line">PrimaryStudent.prototype.constructor=PrimaryStudent;</div><div class="line">			</div><div class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> PrimaryStudent(&#123;</div><div class="line">	<span class="attr">name</span>:<span class="string">'小明'</span>,</div><div class="line">	<span class="attr">grade</span>:<span class="number">2</span></div><div class="line">&#125;);</div><div class="line">			</div><div class="line"><span class="built_in">console</span>.log(xiaoming.name);</div><div class="line"><span class="built_in">console</span>.log(xiaoming.grade);</div><div class="line"></div><div class="line"><span class="comment">// 验证原型</span></div><div class="line"><span class="built_in">console</span>.log(xiaoming.__proto__===PrimaryStudent.prototype); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(xiaoming.__proto__.__proto__===Student.prototype); <span class="comment">// true</span></div><div class="line">			</div><div class="line"><span class="comment">// 验证继承关系</span></div><div class="line"><span class="built_in">console</span>.log(xiaoming <span class="keyword">instanceof</span> PrimaryStudent); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(xiaoming <span class="keyword">instanceof</span> Student); <span class="comment">// true</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考《你不知道的JavaScript》
    
    </summary>
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js学习之对象</title>
    <link href="http://yoursite.com/2017/02/20/object/"/>
    <id>http://yoursite.com/2017/02/20/object/</id>
    <published>2017-02-20T14:21:49.000Z</published>
    <updated>2017-02-21T14:52:03.814Z</updated>
    
    <content type="html"><![CDATA[<p>参考《你不知道的JavaScript》<a id="more"></a></p>
<h1 id="对象的定义"><a href="#对象的定义" class="headerlink" title="对象的定义"></a>对象的定义</h1><hr>
<h2 id="声明形式"><a href="#声明形式" class="headerlink" title="声明形式"></a>声明形式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">	<span class="attr">key1</span>:value1,</div><div class="line">	<span class="attr">key2</span>:value2</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h2 id="构造形式"><a href="#构造形式" class="headerlink" title="构造形式"></a>构造形式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">obj.key=value;</div></pre></td></tr></table></figure>
<hr>
<h1 id="对象的类型"><a href="#对象的类型" class="headerlink" title="对象的类型"></a>对象的类型</h1><hr>
<h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>对象是JavaScript的基础，在JavaScrpit中一共有六种主要类型。</p>
<ul>
<li><strong>string</strong></li>
<li><strong>boolean</strong></li>
<li><strong>number</strong></li>
<li><strong>null</strong></li>
<li><strong>undefined</strong></li>
<li><strong>object</strong></li>
</ul>
<hr>
<h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>一些基本类型对象的子类型，通常被成为内置对象。</p>
<ul>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
<li>Object</li>
<li>Function</li>
<li>Array</li>
<li>Date</li>
<li>RegExp</li>
<li>Error<br>!!!在JavaScript中，它们只是一些内置函数，而不是类似于Java当中的类。!!!<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str1 = <span class="string">"I am a string"</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str1); <span class="comment">// string</span></div><div class="line"><span class="built_in">console</span>.log(str1 <span class="keyword">instanceof</span> <span class="built_in">String</span>); <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"I am a String"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str2); <span class="comment">// object</span></div><div class="line"><span class="built_in">console</span>.log(str2 <span class="keyword">instanceof</span> <span class="built_in">String</span>); <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">//检查str2对象</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(str2); <span class="comment">// [Object String]</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h1 id="对象的内容"><a href="#对象的内容" class="headerlink" title="对象的内容"></a>对象的内容</h1><hr>
<h2 id="访问对象的值"><a href="#访问对象的值" class="headerlink" title="访问对象的值"></a>访问对象的值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj&#123;</div><div class="line">	<span class="attr">a</span> : <span class="number">2</span></div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(obj[<span class="string">"a"</span>]); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p>访问对象的值，需要使用 .操作符和[]操作符。<br>.语法通常被成为属性访问，[]语法通常被成为键访问。</p>
<hr>
<h2 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h2><p>ECMAScript5中定义了一个叫”属性描述符”的对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj=&#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>&#123;</div><div class="line">	<span class="attr">value</span>:<span class="number">2</span>, <span class="comment">// 值</span></div><div class="line">	writable:<span class="literal">true</span>, <span class="comment">// 是否可写</span></div><div class="line">	configurable:<span class="literal">true</span>, <span class="comment">// 是否可配置</span></div><div class="line">	enumerable:<span class="literal">true</span>, <span class="comment">// 是否可枚举</span></div><div class="line">	setter:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;, <span class="comment">// 设置值</span></div><div class="line">	getter:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">// 获取值</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="Writable"><a href="#Writable" class="headerlink" title="Writable"></a>Writable</h3><p>writable 决定是否可以修改属性的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</div><div class="line">	<span class="attr">value</span>:<span class="number">2</span>,</div><div class="line">	<span class="attr">writable</span>:<span class="literal">false</span>,</div><div class="line">	<span class="attr">configurable</span>:<span class="literal">true</span>,</div><div class="line">	<span class="attr">enumerable</span>:<span class="literal">true</span></div><div class="line">&#125;);</div><div class="line">obj.a = <span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">// 2,无法修改值,在严格模式下会报TypeError错误</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="Configurable"><a href="#Configurable" class="headerlink" title="Configurable"></a>Configurable</h3><p>只要属性是可配置的，就可以使用defineProperty()方法来修改属性描述符<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">obj.a = <span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log(obj.a);</div><div class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</div><div class="line">	<span class="attr">value</span>:<span class="number">4</span>,</div><div class="line">	<span class="attr">writable</span>:<span class="literal">true</span>,</div><div class="line">	<span class="attr">configurable</span>:<span class="literal">false</span>,</div><div class="line">	<span class="attr">writable</span>:<span class="literal">true</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">// 4</span></div><div class="line">obj.a = <span class="number">5</span>;</div><div class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">// 5</span></div><div class="line"></div><div class="line"><span class="keyword">delete</span> obj.a;</div><div class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">// 5，禁止删除这个属性</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</div><div class="line">	<span class="attr">value</span>:<span class="number">6</span>,</div><div class="line">	<span class="attr">writable</span>:<span class="literal">true</span>,</div><div class="line">	<span class="attr">configurable</span>:<span class="literal">true</span>,</div><div class="line">	<span class="attr">writable</span>:<span class="literal">true</span></div><div class="line">&#125;); <span class="comment">// TypeError,无法修改属性描述符</span></div></pre></td></tr></table></figure></p>
<p>由此可见，把configurable修改为false是单向操作，无法撤销！</p>
<hr>
<h3 id="Enumerable"><a href="#Enumerable" class="headerlink" title="Enumerable"></a>Enumerable</h3><p>控制对象的属性能否出现在属性枚举中，比如说for..in循环。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">	<span class="attr">a</span>:<span class="number">2</span>,</div><div class="line">	<span class="attr">b</span>:<span class="number">3</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> obj)&#123;</div><div class="line">	<span class="built_in">console</span>.log(i);</div><div class="line">&#125; <span class="comment">// a b</span></div><div class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</div><div class="line">	<span class="attr">value</span>:<span class="number">2</span>,</div><div class="line">	<span class="attr">writable</span>:<span class="literal">true</span>,</div><div class="line">	<span class="attr">configurable</span>:<span class="literal">true</span>,</div><div class="line">	<span class="attr">enumerable</span>:<span class="literal">false</span></div><div class="line">&#125;);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> obj)&#123;</div><div class="line">	<span class="built_in">console</span>.log(i);</div><div class="line">&#125; <span class="comment">// b</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="Setter和Getter"><a href="#Setter和Getter" class="headerlink" title="Setter和Getter"></a>Setter和Getter</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">	get a()&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>._a_;</div><div class="line">	&#125;</div><div class="line">	set a(value)&#123;</div><div class="line">		<span class="keyword">this</span>._a_ = value*<span class="number">2</span>;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"b"</span>,&#123;</div><div class="line">	<span class="attr">get</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.a*<span class="number">2</span>&#125;,</div><div class="line">&#125;);</div><div class="line">obj.a=<span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">// 4</span></div><div class="line"><span class="built_in">console</span>.log(obj.b); <span class="comment">// 8</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="禁止拓展"><a href="#禁止拓展" class="headerlink" title="禁止拓展"></a>禁止拓展</h2><p>禁止一个对象添属性并保留已有属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">	a=<span class="number">2</span></div><div class="line">&#125;;</div><div class="line"><span class="built_in">Object</span>.preventExtensions(obj); <span class="comment">//禁止拓展</span></div><div class="line">obj.b=<span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log(obj.b); <span class="comment">// undefined</span></div></pre></td></tr></table></figure></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考《你不知道的JavaScript》
    
    </summary>
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js学习之this</title>
    <link href="http://yoursite.com/2017/02/19/this/"/>
    <id>http://yoursite.com/2017/02/19/this/</id>
    <published>2017-02-19T13:12:43.000Z</published>
    <updated>2017-02-21T13:13:02.803Z</updated>
    
    <content type="html"><![CDATA[<p>参考《你不知道的JavaScript》<a id="more"></a></p>
<h1 id="绑定规则"><a href="#绑定规则" class="headerlink" title="绑定规则"></a>绑定规则</h1><hr>
<h2 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</div><div class="line">foo(); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p>默认绑定时,this指向全局对象。<br>但是在严格模式下,全局对象无法使用默认绑定。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="meta">	"use strict"</span>;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</div><div class="line">foo(); <span class="comment">// Type Error:this is undefined</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h2><p>在一个对象内部创建包含一个指向函数的属性，并通过这个对象间接引用函数，<br>从而把this隐式绑定到这个对象上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj =&#123;</div><div class="line">	<span class="attr">a</span>:<span class="number">2</span>,</div><div class="line">	<span class="attr">f</span>:foo</div><div class="line">&#125;</div><div class="line">obj.f(); <span class="comment">// 2</span></div></pre></td></tr></table></figure></p>
<p>this绑定到obj对象</p>
<h3 id="隐式丢失"><a href="#隐式丢失" class="headerlink" title="隐式丢失"></a>隐式丢失</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj =&#123;</div><div class="line">	<span class="attr">a</span>:<span class="number">2</span>,</div><div class="line">	<span class="attr">f</span>:foo</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> bar = obj.f;</div><div class="line"><span class="keyword">var</span> a = <span class="string">"hello"</span>;</div><div class="line">bar(); <span class="comment">// hello</span></div></pre></td></tr></table></figure>
<p>隐式绑定的函数丢失绑定对象，应用默认绑定。</p>
<hr>
<h2 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h2><p>使用 call() 和 apply() 方法，把this绑定到传进去的对象上<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">	a=<span class="number">2</span>;</div><div class="line">&#125;</div><div class="line">foo.call(obj); <span class="comment">// 2</span></div></pre></td></tr></table></figure></p>
<p>与隐式绑定相同，显示绑定同样有着绑定丢失的情况<br>但是显示绑定的一个变种可以解决这个问题</p>
<h3 id="硬绑定"><a href="#硬绑定" class="headerlink" title="硬绑定"></a>硬绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="title">something</span>(<span class="params">something</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a,something);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.a + something;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">	a=<span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> bar = foo.bind(obj);</div><div class="line"><span class="keyword">var</span> b = bar(<span class="number">3</span>); <span class="comment">// 2 3</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">//5</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.a=a;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> foo(<span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(bar.a); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p>创建一个新对象并把它绑定到foo()调用的this上</p>
<h1 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h1><hr>
<h2 id="显示绑定和隐式绑定"><a href="#显示绑定和隐式绑定" class="headerlink" title="显示绑定和隐式绑定"></a>显示绑定和隐式绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj1=&#123;</div><div class="line">	<span class="attr">a</span>:<span class="number">2</span>,</div><div class="line">	<span class="attr">foo</span>:foo</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> obj2=&#123;</div><div class="line">	a=<span class="number">3</span>,</div><div class="line">	<span class="attr">foo</span>:foo</div><div class="line">&#125;;</div><div class="line">obj1.foo(); <span class="comment">// 2</span></div><div class="line">obj2.foo(); <span class="comment">// 3</span></div><div class="line"></div><div class="line">obj1.foo.call(obj2); <span class="comment">// 3</span></div><div class="line">obj2.foo.call(obj1); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p>可以看到，显示绑定优先级更高，在判断时应当先考虑是否可以应用显示绑定</p>
<hr>
<h2 id="new绑定和隐式绑定"><a href="#new绑定和隐式绑定" class="headerlink" title="new绑定和隐式绑定"></a>new绑定和隐式绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">something</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.a=something;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj1=&#123;</div><div class="line">	<span class="attr">foo</span>:foo</div><div class="line">&#125;;</div><div class="line"></div><div class="line">obj1.foo(<span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(obj1.a); <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> obj1.foo(<span class="number">4</span>);</div><div class="line"><span class="built_in">console</span>.log(obj1.a); <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(bar.a); <span class="comment">// 4</span></div></pre></td></tr></table></figure>
<p>可以看到，new绑定比隐式绑定优先级更高</p>
<hr>
<h2 id="new绑定和显示绑定"><a href="#new绑定和显示绑定" class="headerlink" title="new绑定和显示绑定"></a>new绑定和显示绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">something</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.a=something;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bar = foo.bind(obj1);</div><div class="line">bar(<span class="number">2</span>);</div><div class="line">consolo.log(obj1.a); <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> baz = <span class="keyword">new</span> bar(<span class="number">3</span>);</div><div class="line"><span class="built_in">console</span>.log(obj1.a); <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(baz.a); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>可以看到，new绑定比显示绑定优先级更高</p>
<hr>
<h2 id="判断this顺序"><a href="#判断this顺序" class="headerlink" title="判断this顺序"></a>判断this顺序</h2><p>按照下面的顺序来判断this所应用的规则<br>1.函数是否在用new中调用(new绑定)</p>
<blockquote>
<p>var bar = new foo();</p>
</blockquote>
<p>2.函数是否通过call、apply或者bind(硬绑定)调用(显示绑定)</p>
<blockquote>
<p>var bar = foo.call(obj);</p>
</blockquote>
<p>3.函数是否在某个上下文对象中调用(隐式绑定)</p>
<blockquote>
<p>var bar = obj.foo();</p>
</blockquote>
<p>4.如果都不是的话,就使用默认绑定</p>
<blockquote>
<p>var bar = foo();</p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考《你不知道的JavaScript》
    
    </summary>
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Github</title>
    <link href="http://yoursite.com/2017/02/17/github/"/>
    <id>http://yoursite.com/2017/02/17/github/</id>
    <published>2017-02-17T09:24:33.000Z</published>
    <updated>2017-02-26T12:48:22.416Z</updated>
    
    <content type="html"><![CDATA[<p>学习Git<a id="more"></a></p>
<h1 id="一、windows安装git"><a href="#一、windows安装git" class="headerlink" title="一、windows安装git"></a>一、windows安装git</h1><p><a href="https://git-for-windows.github.io/" target="_blank" rel="external">下载链接</a></p>
<h1 id="二、建立远程仓库"><a href="#二、建立远程仓库" class="headerlink" title="二、建立远程仓库"></a>二、建立远程仓库</h1><h2 id="1-创建SSH-Key"><a href="#1-创建SSH-Key" class="headerlink" title="1.创建SSH Key"></a>1.创建SSH Key</h2><blockquote>
<p>$ ssh-keygen -t rsa -C “Cybbin@Cybbin.com”</p>
</blockquote>
<p>创建ssh key,一路回车默认即可<br>创建.ssh目录,在该目录(我的是在C:\Users\Administrator目录下)下会有id_rsa,和id_rsa.pub文件<br>id_rsa是私钥,不能泄露<br>id_rsa.pub是公钥</p>
<h2 id="2-登陆Github"><a href="#2-登陆Github" class="headerlink" title="2.登陆Github"></a>2.登陆Github</h2><p>点击头像，打开Setting,点击左边的SSH and GPG keys,点击News SSH key<br>填上任意Title,把id_rsa.pub的内容粘贴到Key文本框里<br>然后点击Add SSH key</p>
<h1 id="三、git指令"><a href="#三、git指令" class="headerlink" title="三、git指令"></a>三、git指令</h1><h2 id="提交仓库"><a href="#提交仓库" class="headerlink" title="提交仓库"></a>提交仓库</h2><hr>
<blockquote>
<p>git init</p>
</blockquote>
<p>git目录初始化</p>
<hr>
<blockquote>
<p>git add .</p>
</blockquote>
<p>添加该目录下所有文件到暂存区</p>
<hr>
<blockquote>
<p>git commit -m ‘m’</p>
</blockquote>
<p>把文件提交到仓库,引号为提交的说明</p>
<hr>
<blockquote>
<p>git remote add origin git@github.com:Cybbin/jd.git</p>
</blockquote>
<p>将本地仓库与Github仓库关联</p>
<hr>
<blockquote>
<p>git push -u origin master</p>
</blockquote>
<p>将本地仓库推送到远程(Github)库的master主分支上<br>-u是第一次提交时,把本地的master分支与远程的master分支关联起来<br>在以后的推送就可以简化命令</p>
<blockquote>
<p>git push origin master</p>
</blockquote>
<hr>
<blockquote>
<p>git clone git@github.com:Cybbin/jd.git</p>
</blockquote>
<p>克隆远程库到本地,克隆在gitskills文件夹中</p>
<hr>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><hr>
<blockquote>
<p>git log</p>
</blockquote>
<p>查看版本控制器的历史记录<br>commit后面为版本id</p>
<hr>
<blockquote>
<p>git log --pretty=oneline</p>
</blockquote>
<p>前面为版本commit id,后面的数字为在commit的时候后面引号内的内容</p>
<blockquote>
<p>git log --pretty=oneline --abbrev-commit</p>
</blockquote>
<p>只显示前几位commit id</p>
<hr>
<blockquote>
<p>git reset --hard HEAD^</p>
</blockquote>
<p>回到上个版本<br>上上个版本是 Head^^<br>上100个版本是 Head~100<br>回到第id个版本,id为git log出现的commit id</p>
<blockquote>
<p>git reset --hard id</p>
</blockquote>
<hr>
<blockquote>
<p>git reflog</p>
</blockquote>
<p>记录每一次命令的id<br>回退时找不到新版本的id时用(重返未来)</p>
<hr>
<blockquote>
<p>git status</p>
</blockquote>
<p>查看当前仓库的状态</p>
<hr>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><hr>
<blockquote>
<p>git branch dev</p>
</blockquote>
<p>创建dev分支</p>
<hr>
<blockquote>
<p>git checkout dev</p>
</blockquote>
<p>切换到dev分支上</p>
<hr>
<blockquote>
<p>git checkout -b dev</p>
</blockquote>
<p>相当于这两句</p>
<blockquote>
<p>git branch dev<br>git checkout dev</p>
</blockquote>
<hr>
<blockquote>
<p>git branch</p>
</blockquote>
<p>列出所有分支,当前分支前有*号</p>
<hr>
<blockquote>
<p>git merge dev</p>
</blockquote>
<p>将dev分支合并到master主分支上,Fast forward模式</p>
<hr>
<blockquote>
<p>git merge dev --no-ff -m ‘’ dev</p>
</blockquote>
<p>禁用Fast forward模式，并提交备注信息</p>
<hr>
<blockquote>
<p>git branch -d dev</p>
</blockquote>
<p>删除dev分支,没有被合并时,如果有修改,无法删除</p>
<hr>
<blockquote>
<p>git branch -D dev</p>
</blockquote>
<p>强力删除dev分支</p>
<hr>
<blockquote>
<p>git log --graph</p>
</blockquote>
<p>列出分支合并图</p>
<hr>
<blockquote>
<p>git stash</p>
</blockquote>
<p>将当前工作现场隐藏</p>
<hr>
<blockquote>
<p>git stash list</p>
</blockquote>
<p>列出当前分支所有被隐藏的工作区</p>
<hr>
<blockquote>
<p>git stash pop</p>
</blockquote>
<p>恢复工作区,并删除stash内容</p>
<hr>
<blockquote>
<p>git stash apply stash@{0}</p>
</blockquote>
<p>恢复工作区,但没有删除stash内容<br>需要再用 git stash drop 来删除</p>
<hr>
<blockquote>
<p>git pull</p>
</blockquote>
<p>将最新的提交从origin抓下来</p>
<hr>
<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><hr>
<blockquote>
<p>git tag v1.0</p>
</blockquote>
<p>设置当前标签为v1.0</p>
<hr>
<blockquote>
<p>git tag</p>
</blockquote>
<p>查看当前分支的所有标签(不是按时间顺序排列,按字母顺序排列)</p>
<hr>
<blockquote>
<p>git tab v1.0 id</p>
</blockquote>
<p>对当前分支的过去版本打标签,id为commit id(版本回退里有)</p>
<hr>
<blockquote>
<p>git show v1.0</p>
</blockquote>
<p>查看v1.0标签信息</p>
<hr>
<blockquote>
<p>git tag -d v1.0</p>
</blockquote>
<p>删除本地的标签</p>
<blockquote>
<p>git push origin :ref/tags/v1.0</p>
</blockquote>
<p>删除推送到远程的标签</p>
<hr>
<blockquote>
<p>git push origin v1.0</p>
</blockquote>
<p>推送标签到远程</p>
<blockquote>
<p>git push origin --tags</p>
</blockquote>
<p>一次性推送全部未推送到远程的标签</p>
<hr>
<h2 id="其它小命令"><a href="#其它小命令" class="headerlink" title="其它小命令"></a>其它小命令</h2><hr>
<blockquote>
<p>git remote -v</p>
</blockquote>
<p>查看远程库的信息</p>
<hr>
<blockquote>
<p>ls</p>
</blockquote>
<p>查看当前目录所有文件</p>
<hr>
<blockquote>
<p>touch README.md</p>
</blockquote>
<p>创建 README.md 文件</p>
<hr>
<blockquote>
<p>rm README.md</p>
</blockquote>
<p>删除 README.md 文件</p>
<hr>
<h1 id="四、踩过的坑"><a href="#四、踩过的坑" class="headerlink" title="四、踩过的坑"></a>四、踩过的坑</h1><hr>
<p>错误：<br>git commit 后运行 git status<br>出现  git commit On branch master nothing to commit, working tree clean<br>解决办法:<br>当前分支没有修改内容,可能是切换错分支了<br>查看分支</p>
<blockquote>
<p>git branch</p>
</blockquote>
<hr>
<p>错误：</p>
<blockquote>
<p>git push origin master<br>To git@github.com:Cybbin/jd.git<br> ! [rejected]        master -&gt; master (non-fast-forward)<br>error: failed to push some refs to ‘git@github.com:Cybbin/jd.git’<br>hint: Updates were rejected because the tip of your current branch is behind<br>hint: its remote counterpart. Integrate the remote changes (e.g.<br>hint: ‘git pull …’) before pushing again.<br>hint: See the ‘Note about fast-forwards’ in ‘git push --help’ for details.</p>
</blockquote>
<p>解决办法：</p>
<blockquote>
<p>git push -f origin master</p>
</blockquote>
<hr>
<p>错误：</p>
<blockquote>
<p>$ git push -u origin master<br>To git@github.com:yangchao0718/cocos2d.git<br> ! [rejected]        master -&gt; master (non-fast-forward)<br>error: failed to push some refs to ‘git@github.com:yangchao0718/cocos2d.git<br>hint: Updates were rejected because the tip of your current branch is behin<br>hint: its remote counterpart. Integrate the remote changes (e.g.<br>hint: ‘git pull …’) before pushing again.<br>hint: See the ‘Note about fast-forwards’ in ‘git push --help’ for details.</p>
</blockquote>
<p>解决办法：<br>github上的README.md文件不在本地代码目录中</p>
<blockquote>
<p>git pull --rebase origin master</p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习Git
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="language" scheme="http://yoursite.com/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>js学习之ajax</title>
    <link href="http://yoursite.com/2017/02/01/ajax/"/>
    <id>http://yoursite.com/2017/02/01/ajax/</id>
    <published>2017-02-01T08:46:46.000Z</published>
    <updated>2017-04-19T15:17:48.138Z</updated>
    
    <content type="html"><![CDATA[<p>ajax源码:</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xmlHttp;</div><div class="line"></div><div class="line"><span class="comment">// 第一步：创建xmlHttpRequest对象</span></div><div class="line"><span class="comment">// 这是XMLHttpRequest对象使用中最复杂的一步</span></div><div class="line"><span class="comment">// 需要针对IE和其它类型的浏览器</span></div><div class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</div><div class="line">	<span class="comment">// 针对 FireFox、Mozillar、Opear、Safari、IE7、IE8</span></div><div class="line">	xmlHttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.ActionXObject)&#123;</div><div class="line">	<span class="comment">// 针对 IE6、IE5.5、IE5</span></div><div class="line">	<span class="comment">// 两个可以用于创建 XMLHttpRequest 对象的控件名称，保存在一个js的数组中</span></div><div class="line">	<span class="comment">// 排在前面的版本较新</span></div><div class="line">	<span class="keyword">var</span> actionName=[<span class="string">'MSXML2.XMLHTTP'</span>,<span class="string">'Microsoft.XMLHTTP'</span>];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;actionName.length;i++)&#123;</div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">			xmlHttp = <span class="keyword">new</span> ActionXObject(actionName[i]);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;<span class="keyword">catch</span>(e)&#123;&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 确认 XMLHttpRequest 对象是否创建成功</span></div><div class="line"><span class="keyword">if</span>(!xmlHttp)&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'xmlHttpRequest对象创建失败'</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	<span class="comment">// 第二步：注册回调函数</span></div><div class="line">	<span class="comment">// 不需要括号</span></div><div class="line">	xmlHttp.onreadystatechange = callback;</div><div class="line">	</div><div class="line">	<span class="comment">// 第三步：设置连接信息</span></div><div class="line">	<span class="comment">// 第一个参数表示 HTTP 的请求方式，支持所有 HTTP 的请求方式，主要使用 GET 和 POST</span></div><div class="line">	<span class="comment">// 第二个参数表示请求的 url 地址，GET 方式请求的参数也在 url 中</span></div><div class="line">	<span class="comment">// 第三个参数表示采用异步还是同步方式交互，true 表示异步</span></div><div class="line">	<span class="comment">// 这里采用 GET 方式，获取网易云音乐API</span></div><div class="line">	xmlHttp.open(<span class="string">'GET'</span>, <span class="string">'http://s.music.163.com/search/get/?type=1&amp;filterDj=true&amp;s=%E8%96%9B%E4%B9%8B%E8%B0%A6&amp;limit=100&amp;offset=0'</span>, <span class="literal">true</span>);</div><div class="line">	</div><div class="line">	<span class="comment">// POST 方式</span></div><div class="line">	<span class="comment">//xmlHttp.open('POST','http://s.music.163.com/search/get/',true);</span></div><div class="line">	<span class="comment">// POST方式需要自己设置 HTTP 请求头</span></div><div class="line">	<span class="comment">//xmlHttp.setRequestHeader('Content-Type','application/x-www-form-urlencoded');</span></div><div class="line">	</div><div class="line">	<span class="comment">// 第四步：发送数据，开始和服务器进行交互</span></div><div class="line">	<span class="comment">// GET 方式发送数据</span></div><div class="line">	xmlHttp.send(<span class="literal">null</span>);</div><div class="line">	<span class="comment">// POST 方式发送数据</span></div><div class="line">	<span class="comment">// xmlHttp.send('type=1&amp;filterDj=true&amp;s=%E8%96%9B%E4%B9%8B%E8%B0%A6&amp;limit=100&amp;offset=0');</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 回调函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// 第五步：接收响应数据</span></div><div class="line">	<span class="comment">// 判断对象的状态是否交互完成</span></div><div class="line">	<span class="keyword">if</span>(xmlHttp.readyState == <span class="number">4</span>)&#123;</div><div class="line">		<span class="comment">// 判断 HTTP 的交互是否成功</span></div><div class="line">		<span class="keyword">if</span>(xmlHttp.status == <span class="number">200</span>)&#123;</div><div class="line">			<span class="comment">// 获取服务器端返回的数据</span></div><div class="line">			<span class="comment">// 获取服务器端输出的文本数据</span></div><div class="line">			<span class="keyword">var</span> responseText = xmlHttp.responseText;</div><div class="line">			<span class="comment">// 获取服务器端输出的XML数据</span></div><div class="line">			<span class="comment">//var responseXML = xmlHtpp.responseXML;</span></div><div class="line">			</div><div class="line">			<span class="comment">// 将文本数据转化成 JSON 对象</span></div><div class="line">			responseText = <span class="built_in">eval</span>(<span class="string">'('</span>+responseText+<span class="string">')'</span>);</div><div class="line">			<span class="built_in">console</span>.log(responseText);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">'error'</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ajax源码:&lt;/p&gt;
    
    </summary>
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>css居中问题</title>
    <link href="http://yoursite.com/2017/01/25/css%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
    <id>http://yoursite.com/2017/01/25/css水平垂直居中/</id>
    <published>2017-01-25T12:52:30.000Z</published>
    <updated>2017-04-22T07:27:45.370Z</updated>
    
    <content type="html"><![CDATA[<p>css中水平和垂直居中问题</p>
<a id="more"></a>
<h1 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h1><h2 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h2><p>父元素设置 text-align:center;<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-center"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">span</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.inline-center</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">text-align</span>:center;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="块状固定宽度"><a href="#块状固定宽度" class="headerlink" title="块状固定宽度"></a>块状固定宽度</h2><p>该元素设置 margin:0 auto;<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"known-width"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">background</span>:<span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.known-width</span>&#123;</div><div class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">background</span>:red;</div><div class="line">	<span class="attribute">margin</span>:<span class="number">0</span> auto;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="块状不固定宽度"><a href="#块状不固定宽度" class="headerlink" title="块状不固定宽度"></a>块状不固定宽度</h2><p>原理：将该元素设置成行内元素，并按行内元素居中。</p>
<ol>
<li>父元素设置 text-align:center;</li>
<li>该元素设置 display:inline-block;</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"un-known-width"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">* &#123;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.un-known-width</span> &#123;</div><div class="line">	<span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.un-known-width</span> <span class="selector-tag">li</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">list-style</span>: none;</div><div class="line">	<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">10px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">	<span class="attribute">background</span>: red;</div><div class="line">	<span class="attribute">display</span>: inline;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>更多方法在与垂直居中一起讲</p>
<h2 id="浮动元素"><a href="#浮动元素" class="headerlink" title="浮动元素"></a>浮动元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.outer</span>&#123;</div><div class="line">	<span class="attribute">position</span>:relative;</div><div class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">float</span>:left;</div><div class="line">	<span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">background</span>:<span class="number">#000</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.inner</span>&#123;</div><div class="line">	<span class="attribute">position</span>:relative;</div><div class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">float</span>:left;</div><div class="line">	<span class="attribute">right</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">background</span>:<span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="绝对定位元素"><a href="#绝对定位元素" class="headerlink" title="绝对定位元素"></a>绝对定位元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"abso"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.abso</span>&#123;</div><div class="line">	<span class="attribute">position</span>:absolute;</div><div class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">background</span>:red;</div><div class="line">	<span class="attribute">margin</span>:<span class="number">0</span> auto;</div><div class="line">	<span class="attribute">left</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">right</span>:<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h1><h2 id="行内元素-1"><a href="#行内元素-1" class="headerlink" title="行内元素"></a>行内元素</h2><h3 id="单行文字"><a href="#单行文字" class="headerlink" title="单行文字"></a>单行文字</h3><p>设置该元素的line-height值与父元素高度一致。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"single-line"</span>&gt;</span></div><div class="line">		测试文本测试文本测试文本测试文本</div><div class="line">	<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">	<span class="attribute">text-align</span>:center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.single-line</span> &#123;</div><div class="line">	<span class="attribute">line-height</span>:<span class="number">500px</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="多行文字"><a href="#多行文字" class="headerlink" title="多行文字"></a>多行文字</h3><p>原理：将文字当图片处理，用一个span标签将所有文字封装起来，设置文字和图片相同的display属性(inline-block)，然后用处理图片垂直居中的方式处理文字的垂直居中即可。</p>
<ol>
<li>父元素设置 display:table-cell;vertical-align:middle;</li>
<li>span元素设置 display:inline-block;<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"multi-line"</span>&gt;</span></div><div class="line">		测试文本测试文本测试文本测试文本<span class="tag">&lt;<span class="name">br</span>/&gt;</span>测试文本测试文本测试文本测试文本测试文本测试文本测试文本<span class="tag">&lt;<span class="name">br</span>/&gt;</span>测试文本测试文本测试文本测试文本</div><div class="line">	<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">	<span class="attribute">display</span>: table-cell;</div><div class="line">	<span class="attribute">vertical-align</span>: middle;</div><div class="line">	<span class="attribute">text-align</span>:center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.multi-line</span> &#123;</div><div class="line">	<span class="attribute">display</span>: inline-block;</div><div class="line">	<span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="块状元素"><a href="#块状元素" class="headerlink" title="块状元素"></a>块状元素</h2><h3 id="固定宽高"><a href="#固定宽高" class="headerlink" title="固定宽高"></a>固定宽高</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><ol>
<li>设置父元素display为static以外的值</li>
<li>设置该元素display为absolute或fixed，并设置top、left、margin-left、margin-top的值</li>
</ol>
<p>注意：</p>
<ol>
<li>IE不支持fixed属性；</li>
<li>margin-left为负的宽度的一半，margin-top为负的高度的一半</li>
</ol>
<p>优点：兼容性好。<br>缺点：需要固定宽高。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"known-size"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">	<span class="attribute">position</span>:relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.known-size</span> &#123;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">width</span>:<span class="number">80px</span>;</div><div class="line">	<span class="attribute">background</span>:red;</div><div class="line">	<span class="attribute">position</span>:absolute;</div><div class="line">	<span class="attribute">top</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">margin-top</span>:-<span class="number">50px</span>;</div><div class="line">	<span class="attribute">margin-left</span>:-<span class="number">40px</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><ol>
<li>设置父元素display为static以外的值</li>
<li>设置该元素display:absolute（或fixed)，并设置top、bottom、left、right为0，margin:auto。</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"known-size"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">	<span class="attribute">position</span>:relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.known-size</span> &#123;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">background</span>:red;</div><div class="line">	<span class="attribute">position</span>:absolute;</div><div class="line">	<span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">bottom</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">right</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">margin</span>:auto;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="不固定宽高"><a href="#不固定宽高" class="headerlink" title="不固定宽高"></a>不固定宽高</h3><h4 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h4><ol>
<li>设置父元素display为static以外的值;</li>
<li>设置该元素display:absolute（或fixed)，并设置top:50%、left:50%，transform:translate(-50%,-50%)。</li>
</ol>
<p>优点：该方法同样适用于已知宽高，移动端用得较多。<br>缺点：IE9以下不支持transform属性。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"un-known-size"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">	<span class="attribute">position</span>:relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.un-known-size</span> &#123;</div><div class="line">	<span class="attribute">position</span>:absolute;</div><div class="line">	<span class="attribute">top</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">transform</span>:<span class="built_in">translate</span>(-50%,-50%);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.un-known-size</span> <span class="selector-tag">li</span>&#123;</div><div class="line">	<span class="attribute">float</span>:left;</div><div class="line">	<span class="attribute">list-style</span>:none;</div><div class="line">	<span class="attribute">background</span>:red;</div><div class="line">	<span class="attribute">width</span>:<span class="number">50px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">50px</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h4><ol>
<li>父元素设置display:table-cell、vertical-align:middle、text-align:center</li>
<li>该元素设置display:inline-block、vertical-align:middle。</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"un-known-size"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">	<span class="attribute">display</span>: table-cell;</div><div class="line">	<span class="attribute">vertical-align</span>: middle;</div><div class="line">	<span class="attribute">text-align</span>:center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.un-known-size</span>&#123;</div><div class="line">	<span class="attribute">display</span>:inline-block;</div><div class="line">	<span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.un-known-size</span> <span class="selector-tag">li</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">list-style</span>: none;</div><div class="line">	<span class="attribute">background</span>: red;</div><div class="line">	<span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p>父元素设置 display:flex、justify-content:center、align-items:center。<br>优点：简单。<br>缺点：兼容性差。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"un-known-size"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">* &#123;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#ccc</span>;		</div><div class="line">	<span class="attribute">display</span>:flex;</div><div class="line">	<span class="attribute">justify-content</span>:center;</div><div class="line">	<span class="attribute">align-items</span>:center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.un-known-size</span> <span class="selector-tag">li</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">list-style</span>: none;</div><div class="line">	<span class="attribute">background</span>: red;</div><div class="line">	<span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css中水平和垂直居中问题&lt;/p&gt;
    
    </summary>
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="http://yoursite.com/2017/01/25/markdown/"/>
    <id>http://yoursite.com/2017/01/25/markdown/</id>
    <published>2017-01-25T07:55:33.000Z</published>
    <updated>2017-02-21T12:15:29.625Z</updated>
    
    <content type="html"><![CDATA[<p>md语法<a id="more"></a></p>
<hr>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section"># 这是H1</span></div></pre></td></tr></table></figure>
<p>效果：</p>
<h1 id="这是H1"><a href="#这是H1" class="headerlink" title="这是H1"></a>这是H1</h1><hr>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">## 这是H2 ##</span></div></pre></td></tr></table></figure>
<p>效果：</p>
<h2 id="这是H2"><a href="#这是H2" class="headerlink" title="这是H2"></a>这是H2</h2><hr>
<h1 id="标记区块"><a href="#标记区块" class="headerlink" title="标记区块"></a>标记区块</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; 标记区块1</span></div><div class="line">标记区块1</div><div class="line"><span class="quote">&gt; &gt; 标记区块2</span></div></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<p>标记区块1<br>标记区块1</p>
<blockquote>
<p>标记区块2</p>
</blockquote>
</blockquote>
<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span></div><div class="line"><span class="code">     var i=0;</span></div><div class="line"><span class="code">     i++;</span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span></div><div class="line"><span class="code">`print() ;`</span></div></pre></td></tr></table></figure>
<p>效果：</p>
<p><pre><code><br>     var i=0;<br>     i++;<br></code></pre><br><code>print() ;</code></p>
<hr>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>Bird</div><div class="line"><span class="bullet">* </span>McHale</div><div class="line"><span class="bullet">* </span>Parish</div><div class="line"></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span>Bird<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span>McHale<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span>Parish<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>效果：</p>
<ul>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ul>
<ul><br><li>Bird</li><br><li>McHale</li><br><li>Parish</li><br></ul>

<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span>Bird<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span>McHale<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span>Parish<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>效果：</p>
<ol><br><li>Bird</li><br><li>McHale</li><br><li>Parish</li><br></ol>

<hr>
<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="emphasis">***</span></div><div class="line"><span class="section">___</span></div><div class="line">---</div></pre></td></tr></table></figure>
<p>效果：</p>
<hr>
<hr>
<h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="string">点击预览</span>](<span class="link">http://www.baidu.com</span>)</div><div class="line">[<span class="string">点击预览</span>](<span class="link">http://www.baidu.com "预览"</span>)</div></pre></td></tr></table></figure>
<p>效果：<br><a href="http://www.baidu.com" target="_blank" rel="external">点击预览</a><br><a href="http://www.baidu.com" title="预览" target="_blank" rel="external">点击预览</a></p>
<hr>
<h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="emphasis">*强调(斜体)*</span></div><div class="line"><span class="strong">**强调(加粗)**</span></div></pre></td></tr></table></figure>
<p>效果：<br><em>强调(斜体)</em><br><strong>强调(加粗)</strong></p>
<hr>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">Alt Text</span>](<span class="link">/uploads/1.jpg</span>)</div></pre></td></tr></table></figure>
<p>效果：<br><img src="/uploads/1.jpg" alt="Alt Text"></p>
<hr>
<h1 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</div></pre></td></tr></table></figure>
<hr>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">|language  |language_key|</div><div class="line">|:--------:|:----------:|</div><div class="line">|css       |css         |</div><div class="line">|C++       |cpp         |</div><div class="line">|C# C      |cpp         |</div><div class="line">|Go        |go          |</div><div class="line">|HTTP      |http        |</div><div class="line">|Java      |java        |</div><div class="line">|Javascript|javascript  |</div><div class="line">|JSON      |json        |</div><div class="line">|Less      |less        |</div><div class="line">|Markdown  |markdown    |</div><div class="line">|Matlab    |matlab      |</div><div class="line">|PHP       |php         |</div><div class="line">|Python    |python      |</div><div class="line">|Ruby      |ruby        |</div><div class="line">|SCSS      |SCSS        |</div><div class="line">|SQL       |sql         |</div><div class="line">|XML       |xml         |</div></pre></td></tr></table></figure>
<p>效果：</p>
<table>
<thead>
<tr>
<th style="text-align:center">language</th>
<th style="text-align:center">language_key</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">css</td>
<td style="text-align:center">css</td>
</tr>
<tr>
<td style="text-align:center">C++</td>
<td style="text-align:center">cpp</td>
</tr>
<tr>
<td style="text-align:center">C# C</td>
<td style="text-align:center">cpp</td>
</tr>
<tr>
<td style="text-align:center">Go</td>
<td style="text-align:center">go</td>
</tr>
<tr>
<td style="text-align:center">HTTP</td>
<td style="text-align:center">http</td>
</tr>
<tr>
<td style="text-align:center">Java</td>
<td style="text-align:center">java</td>
</tr>
<tr>
<td style="text-align:center">Javascript</td>
<td style="text-align:center">javascript</td>
</tr>
<tr>
<td style="text-align:center">JSON</td>
<td style="text-align:center">json</td>
</tr>
<tr>
<td style="text-align:center">Less</td>
<td style="text-align:center">less</td>
</tr>
<tr>
<td style="text-align:center">Markdown</td>
<td style="text-align:center">markdown</td>
</tr>
<tr>
<td style="text-align:center">Matlab</td>
<td style="text-align:center">matlab</td>
</tr>
<tr>
<td style="text-align:center">PHP</td>
<td style="text-align:center">php</td>
</tr>
<tr>
<td style="text-align:center">Python</td>
<td style="text-align:center">python</td>
</tr>
<tr>
<td style="text-align:center">Ruby</td>
<td style="text-align:center">ruby</td>
</tr>
<tr>
<td style="text-align:center">SCSS</td>
<td style="text-align:center">SCSS</td>
</tr>
<tr>
<td style="text-align:center">SQL</td>
<td style="text-align:center">sql</td>
</tr>
<tr>
<td style="text-align:center">XML</td>
<td style="text-align:center">xml</td>
</tr>
</tbody>
</table>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;md语法
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="language" scheme="http://yoursite.com/tags/language/"/>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
</feed>
